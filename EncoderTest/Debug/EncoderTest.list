
EncoderTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006560  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  08006730  08006730  00007730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006abc  08006abc  000081d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006abc  08006abc  00007abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ac4  08006ac4  000081d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ac4  08006ac4  00007ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ac8  08006ac8  00007ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08006acc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  200001d8  08006ca4  000081d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ec  08006ca4  000083ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000081d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df17  00000000  00000000  00008208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002063  00000000  00000000  0001611f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  00018188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a5c  00000000  00000000  00018ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022bec  00000000  00000000  0001992c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f84d  00000000  00000000  0003c518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2c1b  00000000  00000000  0004bd65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011e980  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004770  00000000  00000000  0011e9c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00123134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006718 	.word	0x08006718

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	08006718 	.word	0x08006718

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f1c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f20:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d013      	beq.n	8000f54 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f2c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f30:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000f34:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d00b      	beq.n	8000f54 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f3c:	e000      	b.n	8000f40 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f3e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f40:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d0f9      	beq.n	8000f3e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f4a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	b2d2      	uxtb	r2, r2
 8000f52:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f54:	687b      	ldr	r3, [r7, #4]
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
	...

08000f64 <HAL_TIM_IC_CaptureCallback>:
//{
//    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
//    return ch;
//}
uint32_t counter=0;
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
	counter=__HAL_TIM_GET_COUNTER(htim);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f72:	4a04      	ldr	r2, [pc, #16]	@ (8000f84 <HAL_TIM_IC_CaptureCallback+0x20>)
 8000f74:	6013      	str	r3, [r2, #0]

}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	20000294 	.word	0x20000294

08000f88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f8e:	f000 fc29 	bl	80017e4 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f92:	f000 f857 	bl	8001044 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f96:	f000 f8c7 	bl	8001128 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f9a:	f000 f963 	bl	8001264 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f9e:	f000 f937 	bl	8001210 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000fa2:	f000 f8dd 	bl	8001160 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000fa6:	213c      	movs	r1, #60	@ 0x3c
 8000fa8:	481d      	ldr	r0, [pc, #116]	@ (8001020 <main+0x98>)
 8000faa:	f002 f96d 	bl	8003288 <HAL_TIM_Encoder_Start>
  TIM1->CR1 =0x81;
 8000fae:	4b1d      	ldr	r3, [pc, #116]	@ (8001024 <main+0x9c>)
 8000fb0:	2281      	movs	r2, #129	@ 0x81
 8000fb2:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  volatile uint32_t pos = __HAL_TIM_GET_COUNTER(&htim1);   // reads TIMx->CNT
 8000fb4:	4b1a      	ldr	r3, [pc, #104]	@ (8001020 <main+0x98>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fba:	607b      	str	r3, [r7, #4]


	  AChannel = HAL_GPIO_ReadPin(GPIOC, A_Pin);
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	481a      	ldr	r0, [pc, #104]	@ (8001028 <main+0xa0>)
 8000fc0:	f000 ff28 	bl	8001e14 <HAL_GPIO_ReadPin>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	4b18      	ldr	r3, [pc, #96]	@ (800102c <main+0xa4>)
 8000fca:	601a      	str	r2, [r3, #0]
	  BChannel = HAL_GPIO_ReadPin(GPIOC, B_Pin);
 8000fcc:	2102      	movs	r1, #2
 8000fce:	4816      	ldr	r0, [pc, #88]	@ (8001028 <main+0xa0>)
 8000fd0:	f000 ff20 	bl	8001e14 <HAL_GPIO_ReadPin>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	4b15      	ldr	r3, [pc, #84]	@ (8001030 <main+0xa8>)
 8000fda:	601a      	str	r2, [r3, #0]

	  state=CheckState();
 8000fdc:	f000 f9ca 	bl	8001374 <CheckState>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	4a14      	ldr	r2, [pc, #80]	@ (8001034 <main+0xac>)
 8000fe4:	6013      	str	r3, [r2, #0]

	  counter = TIM1->CNT;
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8001024 <main+0x9c>)
 8000fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fea:	4a13      	ldr	r2, [pc, #76]	@ (8001038 <main+0xb0>)
 8000fec:	6013      	str	r3, [r2, #0]
	  if ((AChannel != PrevA)|| BChannel!=PrevB ){
 8000fee:	4b0f      	ldr	r3, [pc, #60]	@ (800102c <main+0xa4>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	4b12      	ldr	r3, [pc, #72]	@ (800103c <main+0xb4>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	429a      	cmp	r2, r3



	  }

	  	  if(AChannel && PrevB){
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800102c <main+0xa4>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d006      	beq.n	800100e <main+0x86>
 8001000:	4b0f      	ldr	r3, [pc, #60]	@ (8001040 <main+0xb8>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d102      	bne.n	800100e <main+0x86>
	  		 // printf("clockwise\n",pos);
	  	  }

	  	  else if(BChannel && PrevA){
 8001008:	4b09      	ldr	r3, [pc, #36]	@ (8001030 <main+0xa8>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
	  		  //printf("counterclockwise\n");
	  	  }

		  PrevA=AChannel;
 800100e:	4b07      	ldr	r3, [pc, #28]	@ (800102c <main+0xa4>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a0a      	ldr	r2, [pc, #40]	@ (800103c <main+0xb4>)
 8001014:	6013      	str	r3, [r2, #0]
		  PrevB=BChannel;
 8001016:	4b06      	ldr	r3, [pc, #24]	@ (8001030 <main+0xa8>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a09      	ldr	r2, [pc, #36]	@ (8001040 <main+0xb8>)
 800101c:	6013      	str	r3, [r2, #0]
  {
 800101e:	e7c9      	b.n	8000fb4 <main+0x2c>
 8001020:	200001f4 	.word	0x200001f4
 8001024:	40010000 	.word	0x40010000
 8001028:	40020800 	.word	0x40020800
 800102c:	20000284 	.word	0x20000284
 8001030:	20000288 	.word	0x20000288
 8001034:	20000000 	.word	0x20000000
 8001038:	20000294 	.word	0x20000294
 800103c:	2000028c 	.word	0x2000028c
 8001040:	20000290 	.word	0x20000290

08001044 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b094      	sub	sp, #80	@ 0x50
 8001048:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104a:	f107 031c 	add.w	r3, r7, #28
 800104e:	2234      	movs	r2, #52	@ 0x34
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f003 fc39 	bl	80048ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001058:	f107 0308 	add.w	r3, r7, #8
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001068:	2300      	movs	r3, #0
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	4b2c      	ldr	r3, [pc, #176]	@ (8001120 <SystemClock_Config+0xdc>)
 800106e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001070:	4a2b      	ldr	r2, [pc, #172]	@ (8001120 <SystemClock_Config+0xdc>)
 8001072:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001076:	6413      	str	r3, [r2, #64]	@ 0x40
 8001078:	4b29      	ldr	r3, [pc, #164]	@ (8001120 <SystemClock_Config+0xdc>)
 800107a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001084:	2300      	movs	r3, #0
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	4b26      	ldr	r3, [pc, #152]	@ (8001124 <SystemClock_Config+0xe0>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a25      	ldr	r2, [pc, #148]	@ (8001124 <SystemClock_Config+0xe0>)
 800108e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001092:	6013      	str	r3, [r2, #0]
 8001094:	4b23      	ldr	r3, [pc, #140]	@ (8001124 <SystemClock_Config+0xe0>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800109c:	603b      	str	r3, [r7, #0]
 800109e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010a0:	2302      	movs	r3, #2
 80010a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010a4:	2301      	movs	r3, #1
 80010a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010a8:	2310      	movs	r3, #16
 80010aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ac:	2302      	movs	r3, #2
 80010ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010b0:	2300      	movs	r3, #0
 80010b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010b4:	2308      	movs	r3, #8
 80010b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80010b8:	23b4      	movs	r3, #180	@ 0xb4
 80010ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010bc:	2302      	movs	r3, #2
 80010be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010c0:	2302      	movs	r3, #2
 80010c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010c4:	2302      	movs	r3, #2
 80010c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c8:	f107 031c 	add.w	r3, r7, #28
 80010cc:	4618      	mov	r0, r3
 80010ce:	f001 fd97 	bl	8002c00 <HAL_RCC_OscConfig>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80010d8:	f000 f982 	bl	80013e0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80010dc:	f000 fecc 	bl	8001e78 <HAL_PWREx_EnableOverDrive>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80010e6:	f000 f97b 	bl	80013e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ea:	230f      	movs	r3, #15
 80010ec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ee:	2302      	movs	r3, #2
 80010f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010f6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80010fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001100:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001102:	f107 0308 	add.w	r3, r7, #8
 8001106:	2105      	movs	r1, #5
 8001108:	4618      	mov	r0, r3
 800110a:	f000 ff05 	bl	8001f18 <HAL_RCC_ClockConfig>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001114:	f000 f964 	bl	80013e0 <Error_Handler>
  }
}
 8001118:	bf00      	nop
 800111a:	3750      	adds	r7, #80	@ 0x50
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40023800 	.word	0x40023800
 8001124:	40007000 	.word	0x40007000

08001128 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b098      	sub	sp, #96	@ 0x60
 800112c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	225c      	movs	r2, #92	@ 0x5c
 8001132:	2100      	movs	r1, #0
 8001134:	4618      	mov	r0, r3
 8001136:	f003 fbc8 	bl	80048ca <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM;
 800113a:	2310      	movs	r3, #16
 800113c:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800113e:	2301      	movs	r3, #1
 8001140:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001144:	1d3b      	adds	r3, r7, #4
 8001146:	4618      	mov	r0, r3
 8001148:	f001 f800 	bl	800214c <HAL_RCCEx_PeriphCLKConfig>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <PeriphCommonClock_Config+0x2e>
  {
    Error_Handler();
 8001152:	f000 f945 	bl	80013e0 <Error_Handler>
  }
}
 8001156:	bf00      	nop
 8001158:	3760      	adds	r7, #96	@ 0x60
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08c      	sub	sp, #48	@ 0x30
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001166:	f107 030c 	add.w	r3, r7, #12
 800116a:	2224      	movs	r2, #36	@ 0x24
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f003 fbab 	bl	80048ca <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800117c:	4b22      	ldr	r3, [pc, #136]	@ (8001208 <MX_TIM1_Init+0xa8>)
 800117e:	4a23      	ldr	r2, [pc, #140]	@ (800120c <MX_TIM1_Init+0xac>)
 8001180:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001182:	4b21      	ldr	r3, [pc, #132]	@ (8001208 <MX_TIM1_Init+0xa8>)
 8001184:	2200      	movs	r2, #0
 8001186:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001188:	4b1f      	ldr	r3, [pc, #124]	@ (8001208 <MX_TIM1_Init+0xa8>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800118e:	4b1e      	ldr	r3, [pc, #120]	@ (8001208 <MX_TIM1_Init+0xa8>)
 8001190:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001194:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001196:	4b1c      	ldr	r3, [pc, #112]	@ (8001208 <MX_TIM1_Init+0xa8>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800119c:	4b1a      	ldr	r3, [pc, #104]	@ (8001208 <MX_TIM1_Init+0xa8>)
 800119e:	2200      	movs	r2, #0
 80011a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011a2:	4b19      	ldr	r3, [pc, #100]	@ (8001208 <MX_TIM1_Init+0xa8>)
 80011a4:	2280      	movs	r2, #128	@ 0x80
 80011a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011a8:	2303      	movs	r3, #3
 80011aa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80011ac:	2302      	movs	r3, #2
 80011ae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011b0:	2301      	movs	r3, #1
 80011b2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80011b8:	230a      	movs	r3, #10
 80011ba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011bc:	2300      	movs	r3, #0
 80011be:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011c0:	2301      	movs	r3, #1
 80011c2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011c4:	2300      	movs	r3, #0
 80011c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 80011c8:	230a      	movs	r3, #10
 80011ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80011cc:	f107 030c 	add.w	r3, r7, #12
 80011d0:	4619      	mov	r1, r3
 80011d2:	480d      	ldr	r0, [pc, #52]	@ (8001208 <MX_TIM1_Init+0xa8>)
 80011d4:	f001 ffb2 	bl	800313c <HAL_TIM_Encoder_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80011de:	f000 f8ff 	bl	80013e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	4619      	mov	r1, r3
 80011ee:	4806      	ldr	r0, [pc, #24]	@ (8001208 <MX_TIM1_Init+0xa8>)
 80011f0:	f002 fabc 	bl	800376c <HAL_TIMEx_MasterConfigSynchronization>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80011fa:	f000 f8f1 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	3730      	adds	r7, #48	@ 0x30
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200001f4 	.word	0x200001f4
 800120c:	40010000 	.word	0x40010000

08001210 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001214:	4b11      	ldr	r3, [pc, #68]	@ (800125c <MX_USART2_UART_Init+0x4c>)
 8001216:	4a12      	ldr	r2, [pc, #72]	@ (8001260 <MX_USART2_UART_Init+0x50>)
 8001218:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800121a:	4b10      	ldr	r3, [pc, #64]	@ (800125c <MX_USART2_UART_Init+0x4c>)
 800121c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001220:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001222:	4b0e      	ldr	r3, [pc, #56]	@ (800125c <MX_USART2_UART_Init+0x4c>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001228:	4b0c      	ldr	r3, [pc, #48]	@ (800125c <MX_USART2_UART_Init+0x4c>)
 800122a:	2200      	movs	r2, #0
 800122c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800122e:	4b0b      	ldr	r3, [pc, #44]	@ (800125c <MX_USART2_UART_Init+0x4c>)
 8001230:	2200      	movs	r2, #0
 8001232:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001234:	4b09      	ldr	r3, [pc, #36]	@ (800125c <MX_USART2_UART_Init+0x4c>)
 8001236:	220c      	movs	r2, #12
 8001238:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800123a:	4b08      	ldr	r3, [pc, #32]	@ (800125c <MX_USART2_UART_Init+0x4c>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001240:	4b06      	ldr	r3, [pc, #24]	@ (800125c <MX_USART2_UART_Init+0x4c>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001246:	4805      	ldr	r0, [pc, #20]	@ (800125c <MX_USART2_UART_Init+0x4c>)
 8001248:	f002 fb20 	bl	800388c <HAL_UART_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001252:	f000 f8c5 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	2000023c 	.word	0x2000023c
 8001260:	40004400 	.word	0x40004400

08001264 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08a      	sub	sp, #40	@ 0x28
 8001268:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126a:	f107 0314 	add.w	r3, r7, #20
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
 8001278:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
 800127e:	4b33      	ldr	r3, [pc, #204]	@ (800134c <MX_GPIO_Init+0xe8>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001282:	4a32      	ldr	r2, [pc, #200]	@ (800134c <MX_GPIO_Init+0xe8>)
 8001284:	f043 0304 	orr.w	r3, r3, #4
 8001288:	6313      	str	r3, [r2, #48]	@ 0x30
 800128a:	4b30      	ldr	r3, [pc, #192]	@ (800134c <MX_GPIO_Init+0xe8>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	f003 0304 	and.w	r3, r3, #4
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	4b2c      	ldr	r3, [pc, #176]	@ (800134c <MX_GPIO_Init+0xe8>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129e:	4a2b      	ldr	r2, [pc, #172]	@ (800134c <MX_GPIO_Init+0xe8>)
 80012a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a6:	4b29      	ldr	r3, [pc, #164]	@ (800134c <MX_GPIO_Init+0xe8>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	4b25      	ldr	r3, [pc, #148]	@ (800134c <MX_GPIO_Init+0xe8>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	4a24      	ldr	r2, [pc, #144]	@ (800134c <MX_GPIO_Init+0xe8>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c2:	4b22      	ldr	r3, [pc, #136]	@ (800134c <MX_GPIO_Init+0xe8>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	4b1e      	ldr	r3, [pc, #120]	@ (800134c <MX_GPIO_Init+0xe8>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	4a1d      	ldr	r2, [pc, #116]	@ (800134c <MX_GPIO_Init+0xe8>)
 80012d8:	f043 0302 	orr.w	r3, r3, #2
 80012dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012de:	4b1b      	ldr	r3, [pc, #108]	@ (800134c <MX_GPIO_Init+0xe8>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2120      	movs	r1, #32
 80012ee:	4818      	ldr	r0, [pc, #96]	@ (8001350 <MX_GPIO_Init+0xec>)
 80012f0:	f000 fda8 	bl	8001e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012fa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80012fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4619      	mov	r1, r3
 800130a:	4812      	ldr	r0, [pc, #72]	@ (8001354 <MX_GPIO_Init+0xf0>)
 800130c:	f000 fbee 	bl	8001aec <HAL_GPIO_Init>

  /*Configure GPIO pins : A_Pin B_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin;
 8001310:	2303      	movs	r3, #3
 8001312:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001314:	2300      	movs	r3, #0
 8001316:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	4619      	mov	r1, r3
 8001322:	480c      	ldr	r0, [pc, #48]	@ (8001354 <MX_GPIO_Init+0xf0>)
 8001324:	f000 fbe2 	bl	8001aec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001328:	2320      	movs	r3, #32
 800132a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132c:	2301      	movs	r3, #1
 800132e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001334:	2300      	movs	r3, #0
 8001336:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	4619      	mov	r1, r3
 800133e:	4804      	ldr	r0, [pc, #16]	@ (8001350 <MX_GPIO_Init+0xec>)
 8001340:	f000 fbd4 	bl	8001aec <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001344:	bf00      	nop
 8001346:	3728      	adds	r7, #40	@ 0x28
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40023800 	.word	0x40023800
 8001350:	40020000 	.word	0x40020000
 8001354:	40020800 	.word	0x40020800

08001358 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fdd6 	bl	8000f14 <ITM_SendChar>
	return 0;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <CheckState>:

int CheckState(){
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0


	if(AChannel==0 && BChannel==0){
 8001378:	4b17      	ldr	r3, [pc, #92]	@ (80013d8 <CheckState+0x64>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d105      	bne.n	800138c <CheckState+0x18>
 8001380:	4b16      	ldr	r3, [pc, #88]	@ (80013dc <CheckState+0x68>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d101      	bne.n	800138c <CheckState+0x18>
		return 1;
 8001388:	2301      	movs	r3, #1
 800138a:	e01f      	b.n	80013cc <CheckState+0x58>
	}
	else if(AChannel==1 && BChannel==0){
 800138c:	4b12      	ldr	r3, [pc, #72]	@ (80013d8 <CheckState+0x64>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d105      	bne.n	80013a0 <CheckState+0x2c>
 8001394:	4b11      	ldr	r3, [pc, #68]	@ (80013dc <CheckState+0x68>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d101      	bne.n	80013a0 <CheckState+0x2c>
		return 2;
 800139c:	2302      	movs	r3, #2
 800139e:	e015      	b.n	80013cc <CheckState+0x58>
	}
	else if(AChannel==1 && BChannel==1){
 80013a0:	4b0d      	ldr	r3, [pc, #52]	@ (80013d8 <CheckState+0x64>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d105      	bne.n	80013b4 <CheckState+0x40>
 80013a8:	4b0c      	ldr	r3, [pc, #48]	@ (80013dc <CheckState+0x68>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d101      	bne.n	80013b4 <CheckState+0x40>
		return 3;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e00b      	b.n	80013cc <CheckState+0x58>
	}
	else if(AChannel==0 && BChannel==1){
 80013b4:	4b08      	ldr	r3, [pc, #32]	@ (80013d8 <CheckState+0x64>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d105      	bne.n	80013c8 <CheckState+0x54>
 80013bc:	4b07      	ldr	r3, [pc, #28]	@ (80013dc <CheckState+0x68>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d101      	bne.n	80013c8 <CheckState+0x54>
		return 4;
 80013c4:	2304      	movs	r3, #4
 80013c6:	e001      	b.n	80013cc <CheckState+0x58>
	}
	else{
		return -1;
 80013c8:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	20000284 	.word	0x20000284
 80013dc:	20000288 	.word	0x20000288

080013e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e4:	b672      	cpsid	i
}
 80013e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <Error_Handler+0x8>

080013ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	4b10      	ldr	r3, [pc, #64]	@ (8001438 <HAL_MspInit+0x4c>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001438 <HAL_MspInit+0x4c>)
 80013fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001400:	6453      	str	r3, [r2, #68]	@ 0x44
 8001402:	4b0d      	ldr	r3, [pc, #52]	@ (8001438 <HAL_MspInit+0x4c>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001406:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	603b      	str	r3, [r7, #0]
 8001412:	4b09      	ldr	r3, [pc, #36]	@ (8001438 <HAL_MspInit+0x4c>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001416:	4a08      	ldr	r2, [pc, #32]	@ (8001438 <HAL_MspInit+0x4c>)
 8001418:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800141c:	6413      	str	r3, [r2, #64]	@ 0x40
 800141e:	4b06      	ldr	r3, [pc, #24]	@ (8001438 <HAL_MspInit+0x4c>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001422:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001426:	603b      	str	r3, [r7, #0]
 8001428:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800142a:	2007      	movs	r0, #7
 800142c:	f000 fb1c 	bl	8001a68 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001430:	bf00      	nop
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40023800 	.word	0x40023800

0800143c <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	@ 0x28
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a1d      	ldr	r2, [pc, #116]	@ (80014d0 <HAL_TIM_Encoder_MspInit+0x94>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d134      	bne.n	80014c8 <HAL_TIM_Encoder_MspInit+0x8c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	4b1c      	ldr	r3, [pc, #112]	@ (80014d4 <HAL_TIM_Encoder_MspInit+0x98>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001466:	4a1b      	ldr	r2, [pc, #108]	@ (80014d4 <HAL_TIM_Encoder_MspInit+0x98>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6453      	str	r3, [r2, #68]	@ 0x44
 800146e:	4b19      	ldr	r3, [pc, #100]	@ (80014d4 <HAL_TIM_Encoder_MspInit+0x98>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	4b15      	ldr	r3, [pc, #84]	@ (80014d4 <HAL_TIM_Encoder_MspInit+0x98>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001482:	4a14      	ldr	r2, [pc, #80]	@ (80014d4 <HAL_TIM_Encoder_MspInit+0x98>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6313      	str	r3, [r2, #48]	@ 0x30
 800148a:	4b12      	ldr	r3, [pc, #72]	@ (80014d4 <HAL_TIM_Encoder_MspInit+0x98>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001496:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800149a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149c:	2302      	movs	r3, #2
 800149e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a4:	2300      	movs	r3, #0
 80014a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80014a8:	2301      	movs	r3, #1
 80014aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	4619      	mov	r1, r3
 80014b2:	4809      	ldr	r0, [pc, #36]	@ (80014d8 <HAL_TIM_Encoder_MspInit+0x9c>)
 80014b4:	f000 fb1a 	bl	8001aec <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80014b8:	2200      	movs	r2, #0
 80014ba:	2100      	movs	r1, #0
 80014bc:	2019      	movs	r0, #25
 80014be:	f000 fade 	bl	8001a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80014c2:	2019      	movs	r0, #25
 80014c4:	f000 faf7 	bl	8001ab6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80014c8:	bf00      	nop
 80014ca:	3728      	adds	r7, #40	@ 0x28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40010000 	.word	0x40010000
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40020000 	.word	0x40020000

080014dc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08a      	sub	sp, #40	@ 0x28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a19      	ldr	r2, [pc, #100]	@ (8001560 <HAL_UART_MspInit+0x84>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d12b      	bne.n	8001556 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	613b      	str	r3, [r7, #16]
 8001502:	4b18      	ldr	r3, [pc, #96]	@ (8001564 <HAL_UART_MspInit+0x88>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001506:	4a17      	ldr	r2, [pc, #92]	@ (8001564 <HAL_UART_MspInit+0x88>)
 8001508:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800150c:	6413      	str	r3, [r2, #64]	@ 0x40
 800150e:	4b15      	ldr	r3, [pc, #84]	@ (8001564 <HAL_UART_MspInit+0x88>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001516:	613b      	str	r3, [r7, #16]
 8001518:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	4b11      	ldr	r3, [pc, #68]	@ (8001564 <HAL_UART_MspInit+0x88>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	4a10      	ldr	r2, [pc, #64]	@ (8001564 <HAL_UART_MspInit+0x88>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	6313      	str	r3, [r2, #48]	@ 0x30
 800152a:	4b0e      	ldr	r3, [pc, #56]	@ (8001564 <HAL_UART_MspInit+0x88>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001536:	230c      	movs	r3, #12
 8001538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153a:	2302      	movs	r3, #2
 800153c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001542:	2303      	movs	r3, #3
 8001544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001546:	2307      	movs	r3, #7
 8001548:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	4619      	mov	r1, r3
 8001550:	4805      	ldr	r0, [pc, #20]	@ (8001568 <HAL_UART_MspInit+0x8c>)
 8001552:	f000 facb 	bl	8001aec <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001556:	bf00      	nop
 8001558:	3728      	adds	r7, #40	@ 0x28
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40004400 	.word	0x40004400
 8001564:	40023800 	.word	0x40023800
 8001568:	40020000 	.word	0x40020000

0800156c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001570:	bf00      	nop
 8001572:	e7fd      	b.n	8001570 <NMI_Handler+0x4>

08001574 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001578:	bf00      	nop
 800157a:	e7fd      	b.n	8001578 <HardFault_Handler+0x4>

0800157c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001580:	bf00      	nop
 8001582:	e7fd      	b.n	8001580 <MemManage_Handler+0x4>

08001584 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001588:	bf00      	nop
 800158a:	e7fd      	b.n	8001588 <BusFault_Handler+0x4>

0800158c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001590:	bf00      	nop
 8001592:	e7fd      	b.n	8001590 <UsageFault_Handler+0x4>

08001594 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c2:	f000 f961 	bl	8001888 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
	...

080015cc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015d0:	4802      	ldr	r0, [pc, #8]	@ (80015dc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80015d2:	f001 fee7 	bl	80033a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	200001f4 	.word	0x200001f4

080015e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  return 1;
 80015e4:	2301      	movs	r3, #1
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <_kill>:

int _kill(int pid, int sig)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015fa:	f003 f9b9 	bl	8004970 <__errno>
 80015fe:	4603      	mov	r3, r0
 8001600:	2216      	movs	r2, #22
 8001602:	601a      	str	r2, [r3, #0]
  return -1;
 8001604:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001608:	4618      	mov	r0, r3
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <_exit>:

void _exit (int status)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001618:	f04f 31ff 	mov.w	r1, #4294967295
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff ffe7 	bl	80015f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001622:	bf00      	nop
 8001624:	e7fd      	b.n	8001622 <_exit+0x12>

08001626 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b086      	sub	sp, #24
 800162a:	af00      	add	r7, sp, #0
 800162c:	60f8      	str	r0, [r7, #12]
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
 8001636:	e00a      	b.n	800164e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001638:	f3af 8000 	nop.w
 800163c:	4601      	mov	r1, r0
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	1c5a      	adds	r2, r3, #1
 8001642:	60ba      	str	r2, [r7, #8]
 8001644:	b2ca      	uxtb	r2, r1
 8001646:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	3301      	adds	r3, #1
 800164c:	617b      	str	r3, [r7, #20]
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	429a      	cmp	r2, r3
 8001654:	dbf0      	blt.n	8001638 <_read+0x12>
  }

  return len;
 8001656:	687b      	ldr	r3, [r7, #4]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	e009      	b.n	8001686 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	1c5a      	adds	r2, r3, #1
 8001676:	60ba      	str	r2, [r7, #8]
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fe6c 	bl	8001358 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	3301      	adds	r3, #1
 8001684:	617b      	str	r3, [r7, #20]
 8001686:	697a      	ldr	r2, [r7, #20]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	429a      	cmp	r2, r3
 800168c:	dbf1      	blt.n	8001672 <_write+0x12>
  }
  return len;
 800168e:	687b      	ldr	r3, [r7, #4]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3718      	adds	r7, #24
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <_close>:

int _close(int file)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016c0:	605a      	str	r2, [r3, #4]
  return 0;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <_isatty>:

int _isatty(int file)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016d8:	2301      	movs	r3, #1
}
 80016da:	4618      	mov	r0, r3
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b085      	sub	sp, #20
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	60f8      	str	r0, [r7, #12]
 80016ee:	60b9      	str	r1, [r7, #8]
 80016f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001708:	4a14      	ldr	r2, [pc, #80]	@ (800175c <_sbrk+0x5c>)
 800170a:	4b15      	ldr	r3, [pc, #84]	@ (8001760 <_sbrk+0x60>)
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001714:	4b13      	ldr	r3, [pc, #76]	@ (8001764 <_sbrk+0x64>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d102      	bne.n	8001722 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800171c:	4b11      	ldr	r3, [pc, #68]	@ (8001764 <_sbrk+0x64>)
 800171e:	4a12      	ldr	r2, [pc, #72]	@ (8001768 <_sbrk+0x68>)
 8001720:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001722:	4b10      	ldr	r3, [pc, #64]	@ (8001764 <_sbrk+0x64>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	429a      	cmp	r2, r3
 800172e:	d207      	bcs.n	8001740 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001730:	f003 f91e 	bl	8004970 <__errno>
 8001734:	4603      	mov	r3, r0
 8001736:	220c      	movs	r2, #12
 8001738:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800173a:	f04f 33ff 	mov.w	r3, #4294967295
 800173e:	e009      	b.n	8001754 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001740:	4b08      	ldr	r3, [pc, #32]	@ (8001764 <_sbrk+0x64>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001746:	4b07      	ldr	r3, [pc, #28]	@ (8001764 <_sbrk+0x64>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	4a05      	ldr	r2, [pc, #20]	@ (8001764 <_sbrk+0x64>)
 8001750:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001752:	68fb      	ldr	r3, [r7, #12]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20020000 	.word	0x20020000
 8001760:	00000400 	.word	0x00000400
 8001764:	20000298 	.word	0x20000298
 8001768:	200003f0 	.word	0x200003f0

0800176c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001770:	4b06      	ldr	r3, [pc, #24]	@ (800178c <SystemInit+0x20>)
 8001772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001776:	4a05      	ldr	r2, [pc, #20]	@ (800178c <SystemInit+0x20>)
 8001778:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800177c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001790:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017c8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001794:	f7ff ffea 	bl	800176c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001798:	480c      	ldr	r0, [pc, #48]	@ (80017cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800179a:	490d      	ldr	r1, [pc, #52]	@ (80017d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800179c:	4a0d      	ldr	r2, [pc, #52]	@ (80017d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800179e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a0:	e002      	b.n	80017a8 <LoopCopyDataInit>

080017a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017a6:	3304      	adds	r3, #4

080017a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017ac:	d3f9      	bcc.n	80017a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ae:	4a0a      	ldr	r2, [pc, #40]	@ (80017d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017b0:	4c0a      	ldr	r4, [pc, #40]	@ (80017dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80017b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b4:	e001      	b.n	80017ba <LoopFillZerobss>

080017b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b8:	3204      	adds	r2, #4

080017ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017bc:	d3fb      	bcc.n	80017b6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80017be:	f003 f8dd 	bl	800497c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017c2:	f7ff fbe1 	bl	8000f88 <main>
  bx  lr    
 80017c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80017d4:	08006acc 	.word	0x08006acc
  ldr r2, =_sbss
 80017d8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80017dc:	200003ec 	.word	0x200003ec

080017e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017e0:	e7fe      	b.n	80017e0 <ADC_IRQHandler>
	...

080017e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001824 <HAL_Init+0x40>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001824 <HAL_Init+0x40>)
 80017ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001824 <HAL_Init+0x40>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001824 <HAL_Init+0x40>)
 80017fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001800:	4b08      	ldr	r3, [pc, #32]	@ (8001824 <HAL_Init+0x40>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a07      	ldr	r2, [pc, #28]	@ (8001824 <HAL_Init+0x40>)
 8001806:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800180a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800180c:	2003      	movs	r0, #3
 800180e:	f000 f92b 	bl	8001a68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001812:	2000      	movs	r0, #0
 8001814:	f000 f808 	bl	8001828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001818:	f7ff fde8 	bl	80013ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40023c00 	.word	0x40023c00

08001828 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001830:	4b12      	ldr	r3, [pc, #72]	@ (800187c <HAL_InitTick+0x54>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4b12      	ldr	r3, [pc, #72]	@ (8001880 <HAL_InitTick+0x58>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	4619      	mov	r1, r3
 800183a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800183e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001842:	fbb2 f3f3 	udiv	r3, r2, r3
 8001846:	4618      	mov	r0, r3
 8001848:	f000 f943 	bl	8001ad2 <HAL_SYSTICK_Config>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e00e      	b.n	8001874 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2b0f      	cmp	r3, #15
 800185a:	d80a      	bhi.n	8001872 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800185c:	2200      	movs	r2, #0
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	f04f 30ff 	mov.w	r0, #4294967295
 8001864:	f000 f90b 	bl	8001a7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001868:	4a06      	ldr	r2, [pc, #24]	@ (8001884 <HAL_InitTick+0x5c>)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800186e:	2300      	movs	r3, #0
 8001870:	e000      	b.n	8001874 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
}
 8001874:	4618      	mov	r0, r3
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20000004 	.word	0x20000004
 8001880:	2000000c 	.word	0x2000000c
 8001884:	20000008 	.word	0x20000008

08001888 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800188c:	4b06      	ldr	r3, [pc, #24]	@ (80018a8 <HAL_IncTick+0x20>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	461a      	mov	r2, r3
 8001892:	4b06      	ldr	r3, [pc, #24]	@ (80018ac <HAL_IncTick+0x24>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4413      	add	r3, r2
 8001898:	4a04      	ldr	r2, [pc, #16]	@ (80018ac <HAL_IncTick+0x24>)
 800189a:	6013      	str	r3, [r2, #0]
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	2000000c 	.word	0x2000000c
 80018ac:	2000029c 	.word	0x2000029c

080018b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return uwTick;
 80018b4:	4b03      	ldr	r3, [pc, #12]	@ (80018c4 <HAL_GetTick+0x14>)
 80018b6:	681b      	ldr	r3, [r3, #0]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	2000029c 	.word	0x2000029c

080018c8 <__NVIC_SetPriorityGrouping>:
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d8:	4b0c      	ldr	r3, [pc, #48]	@ (800190c <__NVIC_SetPriorityGrouping+0x44>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018e4:	4013      	ands	r3, r2
 80018e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018fa:	4a04      	ldr	r2, [pc, #16]	@ (800190c <__NVIC_SetPriorityGrouping+0x44>)
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	60d3      	str	r3, [r2, #12]
}
 8001900:	bf00      	nop
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <__NVIC_GetPriorityGrouping>:
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001914:	4b04      	ldr	r3, [pc, #16]	@ (8001928 <__NVIC_GetPriorityGrouping+0x18>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	0a1b      	lsrs	r3, r3, #8
 800191a:	f003 0307 	and.w	r3, r3, #7
}
 800191e:	4618      	mov	r0, r3
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <__NVIC_EnableIRQ>:
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193a:	2b00      	cmp	r3, #0
 800193c:	db0b      	blt.n	8001956 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	f003 021f 	and.w	r2, r3, #31
 8001944:	4907      	ldr	r1, [pc, #28]	@ (8001964 <__NVIC_EnableIRQ+0x38>)
 8001946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194a:	095b      	lsrs	r3, r3, #5
 800194c:	2001      	movs	r0, #1
 800194e:	fa00 f202 	lsl.w	r2, r0, r2
 8001952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000e100 	.word	0xe000e100

08001968 <__NVIC_SetPriority>:
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	6039      	str	r1, [r7, #0]
 8001972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001978:	2b00      	cmp	r3, #0
 800197a:	db0a      	blt.n	8001992 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	b2da      	uxtb	r2, r3
 8001980:	490c      	ldr	r1, [pc, #48]	@ (80019b4 <__NVIC_SetPriority+0x4c>)
 8001982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001986:	0112      	lsls	r2, r2, #4
 8001988:	b2d2      	uxtb	r2, r2
 800198a:	440b      	add	r3, r1
 800198c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001990:	e00a      	b.n	80019a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	b2da      	uxtb	r2, r3
 8001996:	4908      	ldr	r1, [pc, #32]	@ (80019b8 <__NVIC_SetPriority+0x50>)
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	f003 030f 	and.w	r3, r3, #15
 800199e:	3b04      	subs	r3, #4
 80019a0:	0112      	lsls	r2, r2, #4
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	440b      	add	r3, r1
 80019a6:	761a      	strb	r2, [r3, #24]
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	e000e100 	.word	0xe000e100
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <NVIC_EncodePriority>:
{
 80019bc:	b480      	push	{r7}
 80019be:	b089      	sub	sp, #36	@ 0x24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f1c3 0307 	rsb	r3, r3, #7
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	bf28      	it	cs
 80019da:	2304      	movcs	r3, #4
 80019dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	3304      	adds	r3, #4
 80019e2:	2b06      	cmp	r3, #6
 80019e4:	d902      	bls.n	80019ec <NVIC_EncodePriority+0x30>
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	3b03      	subs	r3, #3
 80019ea:	e000      	b.n	80019ee <NVIC_EncodePriority+0x32>
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f0:	f04f 32ff 	mov.w	r2, #4294967295
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43da      	mvns	r2, r3
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	401a      	ands	r2, r3
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a04:	f04f 31ff 	mov.w	r1, #4294967295
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0e:	43d9      	mvns	r1, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a14:	4313      	orrs	r3, r2
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3724      	adds	r7, #36	@ 0x24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
	...

08001a24 <SysTick_Config>:
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a34:	d301      	bcc.n	8001a3a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001a36:	2301      	movs	r3, #1
 8001a38:	e00f      	b.n	8001a5a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a64 <SysTick_Config+0x40>)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a42:	210f      	movs	r1, #15
 8001a44:	f04f 30ff 	mov.w	r0, #4294967295
 8001a48:	f7ff ff8e 	bl	8001968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a4c:	4b05      	ldr	r3, [pc, #20]	@ (8001a64 <SysTick_Config+0x40>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a52:	4b04      	ldr	r3, [pc, #16]	@ (8001a64 <SysTick_Config+0x40>)
 8001a54:	2207      	movs	r2, #7
 8001a56:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	e000e010 	.word	0xe000e010

08001a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff ff29 	bl	80018c8 <__NVIC_SetPriorityGrouping>
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b086      	sub	sp, #24
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	4603      	mov	r3, r0
 8001a86:	60b9      	str	r1, [r7, #8]
 8001a88:	607a      	str	r2, [r7, #4]
 8001a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a90:	f7ff ff3e 	bl	8001910 <__NVIC_GetPriorityGrouping>
 8001a94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	68b9      	ldr	r1, [r7, #8]
 8001a9a:	6978      	ldr	r0, [r7, #20]
 8001a9c:	f7ff ff8e 	bl	80019bc <NVIC_EncodePriority>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff ff5d 	bl	8001968 <__NVIC_SetPriority>
}
 8001aae:	bf00      	nop
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	4603      	mov	r3, r0
 8001abe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff ff31 	bl	800192c <__NVIC_EnableIRQ>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff ffa2 	bl	8001a24 <SysTick_Config>
 8001ae0:	4603      	mov	r3, r0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b089      	sub	sp, #36	@ 0x24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001afa:	2300      	movs	r3, #0
 8001afc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b02:	2300      	movs	r3, #0
 8001b04:	61fb      	str	r3, [r7, #28]
 8001b06:	e165      	b.n	8001dd4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b08:	2201      	movs	r2, #1
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	697a      	ldr	r2, [r7, #20]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	f040 8154 	bne.w	8001dce <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f003 0303 	and.w	r3, r3, #3
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d005      	beq.n	8001b3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d130      	bne.n	8001ba0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	2203      	movs	r2, #3
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4013      	ands	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	68da      	ldr	r2, [r3, #12]
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b74:	2201      	movs	r2, #1
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	091b      	lsrs	r3, r3, #4
 8001b8a:	f003 0201 	and.w	r2, r3, #1
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 0303 	and.w	r3, r3, #3
 8001ba8:	2b03      	cmp	r3, #3
 8001baa:	d017      	beq.n	8001bdc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	2203      	movs	r2, #3
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d123      	bne.n	8001c30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	08da      	lsrs	r2, r3, #3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3208      	adds	r2, #8
 8001bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	220f      	movs	r2, #15
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	691a      	ldr	r2, [r3, #16]
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	08da      	lsrs	r2, r3, #3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	3208      	adds	r2, #8
 8001c2a:	69b9      	ldr	r1, [r7, #24]
 8001c2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	2203      	movs	r2, #3
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4013      	ands	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 0203 	and.w	r2, r3, #3
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f000 80ae 	beq.w	8001dce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	4b5d      	ldr	r3, [pc, #372]	@ (8001dec <HAL_GPIO_Init+0x300>)
 8001c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c7a:	4a5c      	ldr	r2, [pc, #368]	@ (8001dec <HAL_GPIO_Init+0x300>)
 8001c7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c80:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c82:	4b5a      	ldr	r3, [pc, #360]	@ (8001dec <HAL_GPIO_Init+0x300>)
 8001c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c8e:	4a58      	ldr	r2, [pc, #352]	@ (8001df0 <HAL_GPIO_Init+0x304>)
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	089b      	lsrs	r3, r3, #2
 8001c94:	3302      	adds	r3, #2
 8001c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f003 0303 	and.w	r3, r3, #3
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	220f      	movs	r2, #15
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43db      	mvns	r3, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a4f      	ldr	r2, [pc, #316]	@ (8001df4 <HAL_GPIO_Init+0x308>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d025      	beq.n	8001d06 <HAL_GPIO_Init+0x21a>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a4e      	ldr	r2, [pc, #312]	@ (8001df8 <HAL_GPIO_Init+0x30c>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d01f      	beq.n	8001d02 <HAL_GPIO_Init+0x216>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a4d      	ldr	r2, [pc, #308]	@ (8001dfc <HAL_GPIO_Init+0x310>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d019      	beq.n	8001cfe <HAL_GPIO_Init+0x212>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a4c      	ldr	r2, [pc, #304]	@ (8001e00 <HAL_GPIO_Init+0x314>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d013      	beq.n	8001cfa <HAL_GPIO_Init+0x20e>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a4b      	ldr	r2, [pc, #300]	@ (8001e04 <HAL_GPIO_Init+0x318>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d00d      	beq.n	8001cf6 <HAL_GPIO_Init+0x20a>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a4a      	ldr	r2, [pc, #296]	@ (8001e08 <HAL_GPIO_Init+0x31c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d007      	beq.n	8001cf2 <HAL_GPIO_Init+0x206>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a49      	ldr	r2, [pc, #292]	@ (8001e0c <HAL_GPIO_Init+0x320>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d101      	bne.n	8001cee <HAL_GPIO_Init+0x202>
 8001cea:	2306      	movs	r3, #6
 8001cec:	e00c      	b.n	8001d08 <HAL_GPIO_Init+0x21c>
 8001cee:	2307      	movs	r3, #7
 8001cf0:	e00a      	b.n	8001d08 <HAL_GPIO_Init+0x21c>
 8001cf2:	2305      	movs	r3, #5
 8001cf4:	e008      	b.n	8001d08 <HAL_GPIO_Init+0x21c>
 8001cf6:	2304      	movs	r3, #4
 8001cf8:	e006      	b.n	8001d08 <HAL_GPIO_Init+0x21c>
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e004      	b.n	8001d08 <HAL_GPIO_Init+0x21c>
 8001cfe:	2302      	movs	r3, #2
 8001d00:	e002      	b.n	8001d08 <HAL_GPIO_Init+0x21c>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <HAL_GPIO_Init+0x21c>
 8001d06:	2300      	movs	r3, #0
 8001d08:	69fa      	ldr	r2, [r7, #28]
 8001d0a:	f002 0203 	and.w	r2, r2, #3
 8001d0e:	0092      	lsls	r2, r2, #2
 8001d10:	4093      	lsls	r3, r2
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d18:	4935      	ldr	r1, [pc, #212]	@ (8001df0 <HAL_GPIO_Init+0x304>)
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	089b      	lsrs	r3, r3, #2
 8001d1e:	3302      	adds	r3, #2
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d26:	4b3a      	ldr	r3, [pc, #232]	@ (8001e10 <HAL_GPIO_Init+0x324>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4013      	ands	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d4a:	4a31      	ldr	r2, [pc, #196]	@ (8001e10 <HAL_GPIO_Init+0x324>)
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d50:	4b2f      	ldr	r3, [pc, #188]	@ (8001e10 <HAL_GPIO_Init+0x324>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d74:	4a26      	ldr	r2, [pc, #152]	@ (8001e10 <HAL_GPIO_Init+0x324>)
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d7a:	4b25      	ldr	r3, [pc, #148]	@ (8001e10 <HAL_GPIO_Init+0x324>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	43db      	mvns	r3, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4013      	ands	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d9e:	4a1c      	ldr	r2, [pc, #112]	@ (8001e10 <HAL_GPIO_Init+0x324>)
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001da4:	4b1a      	ldr	r3, [pc, #104]	@ (8001e10 <HAL_GPIO_Init+0x324>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dc8:	4a11      	ldr	r2, [pc, #68]	@ (8001e10 <HAL_GPIO_Init+0x324>)
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	61fb      	str	r3, [r7, #28]
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	2b0f      	cmp	r3, #15
 8001dd8:	f67f ae96 	bls.w	8001b08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ddc:	bf00      	nop
 8001dde:	bf00      	nop
 8001de0:	3724      	adds	r7, #36	@ 0x24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40013800 	.word	0x40013800
 8001df4:	40020000 	.word	0x40020000
 8001df8:	40020400 	.word	0x40020400
 8001dfc:	40020800 	.word	0x40020800
 8001e00:	40020c00 	.word	0x40020c00
 8001e04:	40021000 	.word	0x40021000
 8001e08:	40021400 	.word	0x40021400
 8001e0c:	40021800 	.word	0x40021800
 8001e10:	40013c00 	.word	0x40013c00

08001e14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	691a      	ldr	r2, [r3, #16]
 8001e24:	887b      	ldrh	r3, [r7, #2]
 8001e26:	4013      	ands	r3, r2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d002      	beq.n	8001e32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	73fb      	strb	r3, [r7, #15]
 8001e30:	e001      	b.n	8001e36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e32:	2300      	movs	r3, #0
 8001e34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	807b      	strh	r3, [r7, #2]
 8001e50:	4613      	mov	r3, r2
 8001e52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e54:	787b      	ldrb	r3, [r7, #1]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e5a:	887a      	ldrh	r2, [r7, #2]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e60:	e003      	b.n	8001e6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e62:	887b      	ldrh	r3, [r7, #2]
 8001e64:	041a      	lsls	r2, r3, #16
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	619a      	str	r2, [r3, #24]
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
	...

08001e78 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	603b      	str	r3, [r7, #0]
 8001e86:	4b20      	ldr	r3, [pc, #128]	@ (8001f08 <HAL_PWREx_EnableOverDrive+0x90>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8a:	4a1f      	ldr	r2, [pc, #124]	@ (8001f08 <HAL_PWREx_EnableOverDrive+0x90>)
 8001e8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e92:	4b1d      	ldr	r3, [pc, #116]	@ (8001f08 <HAL_PWREx_EnableOverDrive+0x90>)
 8001e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e9a:	603b      	str	r3, [r7, #0]
 8001e9c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001e9e:	4b1b      	ldr	r3, [pc, #108]	@ (8001f0c <HAL_PWREx_EnableOverDrive+0x94>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ea4:	f7ff fd04 	bl	80018b0 <HAL_GetTick>
 8001ea8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001eaa:	e009      	b.n	8001ec0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001eac:	f7ff fd00 	bl	80018b0 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001eba:	d901      	bls.n	8001ec0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e01f      	b.n	8001f00 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001ec0:	4b13      	ldr	r3, [pc, #76]	@ (8001f10 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ec8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ecc:	d1ee      	bne.n	8001eac <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001ece:	4b11      	ldr	r3, [pc, #68]	@ (8001f14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ed4:	f7ff fcec 	bl	80018b0 <HAL_GetTick>
 8001ed8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001eda:	e009      	b.n	8001ef0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001edc:	f7ff fce8 	bl	80018b0 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001eea:	d901      	bls.n	8001ef0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e007      	b.n	8001f00 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ef0:	4b07      	ldr	r3, [pc, #28]	@ (8001f10 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ef8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001efc:	d1ee      	bne.n	8001edc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	420e0040 	.word	0x420e0040
 8001f10:	40007000 	.word	0x40007000
 8001f14:	420e0044 	.word	0x420e0044

08001f18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e0cc      	b.n	80020c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f2c:	4b68      	ldr	r3, [pc, #416]	@ (80020d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 030f 	and.w	r3, r3, #15
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d90c      	bls.n	8001f54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3a:	4b65      	ldr	r3, [pc, #404]	@ (80020d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f42:	4b63      	ldr	r3, [pc, #396]	@ (80020d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 030f 	and.w	r3, r3, #15
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d001      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e0b8      	b.n	80020c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d020      	beq.n	8001fa2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0304 	and.w	r3, r3, #4
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d005      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f6c:	4b59      	ldr	r3, [pc, #356]	@ (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	4a58      	ldr	r2, [pc, #352]	@ (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f72:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001f76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0308 	and.w	r3, r3, #8
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d005      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f84:	4b53      	ldr	r3, [pc, #332]	@ (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	4a52      	ldr	r2, [pc, #328]	@ (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001f8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f90:	4b50      	ldr	r3, [pc, #320]	@ (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	494d      	ldr	r1, [pc, #308]	@ (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d044      	beq.n	8002038 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d107      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb6:	4b47      	ldr	r3, [pc, #284]	@ (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d119      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e07f      	b.n	80020c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d003      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fd2:	2b03      	cmp	r3, #3
 8001fd4:	d107      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fd6:	4b3f      	ldr	r3, [pc, #252]	@ (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d109      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e06f      	b.n	80020c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe6:	4b3b      	ldr	r3, [pc, #236]	@ (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e067      	b.n	80020c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ff6:	4b37      	ldr	r3, [pc, #220]	@ (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f023 0203 	bic.w	r2, r3, #3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	4934      	ldr	r1, [pc, #208]	@ (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002004:	4313      	orrs	r3, r2
 8002006:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002008:	f7ff fc52 	bl	80018b0 <HAL_GetTick>
 800200c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800200e:	e00a      	b.n	8002026 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002010:	f7ff fc4e 	bl	80018b0 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800201e:	4293      	cmp	r3, r2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e04f      	b.n	80020c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002026:	4b2b      	ldr	r3, [pc, #172]	@ (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 020c 	and.w	r2, r3, #12
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	429a      	cmp	r2, r3
 8002036:	d1eb      	bne.n	8002010 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002038:	4b25      	ldr	r3, [pc, #148]	@ (80020d0 <HAL_RCC_ClockConfig+0x1b8>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 030f 	and.w	r3, r3, #15
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	429a      	cmp	r2, r3
 8002044:	d20c      	bcs.n	8002060 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002046:	4b22      	ldr	r3, [pc, #136]	@ (80020d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	b2d2      	uxtb	r2, r2
 800204c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800204e:	4b20      	ldr	r3, [pc, #128]	@ (80020d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 030f 	and.w	r3, r3, #15
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	429a      	cmp	r2, r3
 800205a:	d001      	beq.n	8002060 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e032      	b.n	80020c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	2b00      	cmp	r3, #0
 800206a:	d008      	beq.n	800207e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800206c:	4b19      	ldr	r3, [pc, #100]	@ (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	4916      	ldr	r1, [pc, #88]	@ (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 800207a:	4313      	orrs	r3, r2
 800207c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	2b00      	cmp	r3, #0
 8002088:	d009      	beq.n	800209e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800208a:	4b12      	ldr	r3, [pc, #72]	@ (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	490e      	ldr	r1, [pc, #56]	@ (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 800209a:	4313      	orrs	r3, r2
 800209c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800209e:	f000 fb7f 	bl	80027a0 <HAL_RCC_GetSysClockFreq>
 80020a2:	4602      	mov	r2, r0
 80020a4:	4b0b      	ldr	r3, [pc, #44]	@ (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	091b      	lsrs	r3, r3, #4
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	490a      	ldr	r1, [pc, #40]	@ (80020d8 <HAL_RCC_ClockConfig+0x1c0>)
 80020b0:	5ccb      	ldrb	r3, [r1, r3]
 80020b2:	fa22 f303 	lsr.w	r3, r2, r3
 80020b6:	4a09      	ldr	r2, [pc, #36]	@ (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 80020b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80020ba:	4b09      	ldr	r3, [pc, #36]	@ (80020e0 <HAL_RCC_ClockConfig+0x1c8>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff fbb2 	bl	8001828 <HAL_InitTick>

  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40023c00 	.word	0x40023c00
 80020d4:	40023800 	.word	0x40023800
 80020d8:	08006730 	.word	0x08006730
 80020dc:	20000004 	.word	0x20000004
 80020e0:	20000008 	.word	0x20000008

080020e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020e8:	4b03      	ldr	r3, [pc, #12]	@ (80020f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80020ea:	681b      	ldr	r3, [r3, #0]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	20000004 	.word	0x20000004

080020fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002100:	f7ff fff0 	bl	80020e4 <HAL_RCC_GetHCLKFreq>
 8002104:	4602      	mov	r2, r0
 8002106:	4b05      	ldr	r3, [pc, #20]	@ (800211c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	0a9b      	lsrs	r3, r3, #10
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	4903      	ldr	r1, [pc, #12]	@ (8002120 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002112:	5ccb      	ldrb	r3, [r1, r3]
 8002114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002118:	4618      	mov	r0, r3
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40023800 	.word	0x40023800
 8002120:	08006740 	.word	0x08006740

08002124 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002128:	f7ff ffdc 	bl	80020e4 <HAL_RCC_GetHCLKFreq>
 800212c:	4602      	mov	r2, r0
 800212e:	4b05      	ldr	r3, [pc, #20]	@ (8002144 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	0b5b      	lsrs	r3, r3, #13
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	4903      	ldr	r1, [pc, #12]	@ (8002148 <HAL_RCC_GetPCLK2Freq+0x24>)
 800213a:	5ccb      	ldrb	r3, [r1, r3]
 800213c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002140:	4618      	mov	r0, r3
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40023800 	.word	0x40023800
 8002148:	08006740 	.word	0x08006740

0800214c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08c      	sub	sp, #48	@ 0x30
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002154:	2300      	movs	r3, #0
 8002156:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8002158:	2300      	movs	r3, #0
 800215a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800215c:	2300      	movs	r3, #0
 800215e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002160:	2300      	movs	r3, #0
 8002162:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002164:	2300      	movs	r3, #0
 8002166:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002168:	2300      	movs	r3, #0
 800216a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800216c:	2300      	movs	r3, #0
 800216e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002170:	2300      	movs	r3, #0
 8002172:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8002174:	2300      	movs	r3, #0
 8002176:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b00      	cmp	r3, #0
 8002182:	d010      	beq.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002184:	4b6f      	ldr	r3, [pc, #444]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002186:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800218a:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002192:	496c      	ldr	r1, [pc, #432]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002194:	4313      	orrs	r3, r2
 8002196:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80021a2:	2301      	movs	r3, #1
 80021a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d010      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80021b2:	4b64      	ldr	r3, [pc, #400]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80021b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021b8:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021c0:	4960      	ldr	r1, [pc, #384]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80021d0:	2301      	movs	r3, #1
 80021d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d017      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021e0:	4b58      	ldr	r3, [pc, #352]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80021e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ee:	4955      	ldr	r1, [pc, #340]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80021fe:	d101      	bne.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002200:	2301      	movs	r3, #1
 8002202:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800220c:	2301      	movs	r3, #1
 800220e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0308 	and.w	r3, r3, #8
 8002218:	2b00      	cmp	r3, #0
 800221a:	d017      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800221c:	4b49      	ldr	r3, [pc, #292]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800221e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002222:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800222a:	4946      	ldr	r1, [pc, #280]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800222c:	4313      	orrs	r3, r2
 800222e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002236:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800223a:	d101      	bne.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800223c:	2301      	movs	r3, #1
 800223e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002244:	2b00      	cmp	r3, #0
 8002246:	d101      	bne.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002248:	2301      	movs	r3, #1
 800224a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0320 	and.w	r3, r3, #32
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 808a 	beq.w	800236e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	60bb      	str	r3, [r7, #8]
 800225e:	4b39      	ldr	r3, [pc, #228]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002262:	4a38      	ldr	r2, [pc, #224]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002264:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002268:	6413      	str	r3, [r2, #64]	@ 0x40
 800226a:	4b36      	ldr	r3, [pc, #216]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002272:	60bb      	str	r3, [r7, #8]
 8002274:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002276:	4b34      	ldr	r3, [pc, #208]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a33      	ldr	r2, [pc, #204]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800227c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002280:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002282:	f7ff fb15 	bl	80018b0 <HAL_GetTick>
 8002286:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002288:	e008      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800228a:	f7ff fb11 	bl	80018b0 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d901      	bls.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e278      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800229c:	4b2a      	ldr	r3, [pc, #168]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0f0      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022a8:	4b26      	ldr	r3, [pc, #152]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022b0:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d02f      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022c0:	6a3a      	ldr	r2, [r7, #32]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d028      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022c6:	4b1f      	ldr	r3, [pc, #124]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022ce:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022d0:	4b1e      	ldr	r3, [pc, #120]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022d6:	4b1d      	ldr	r3, [pc, #116]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80022dc:	4a19      	ldr	r2, [pc, #100]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022de:	6a3b      	ldr	r3, [r7, #32]
 80022e0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80022e2:	4b18      	ldr	r3, [pc, #96]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d114      	bne.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80022ee:	f7ff fadf 	bl	80018b0 <HAL_GetTick>
 80022f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f4:	e00a      	b.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f6:	f7ff fadb 	bl	80018b0 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002304:	4293      	cmp	r3, r2
 8002306:	d901      	bls.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e240      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800230c:	4b0d      	ldr	r3, [pc, #52]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800230e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0ee      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002320:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002324:	d114      	bne.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002326:	4b07      	ldr	r3, [pc, #28]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002332:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002336:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800233a:	4902      	ldr	r1, [pc, #8]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800233c:	4313      	orrs	r3, r2
 800233e:	608b      	str	r3, [r1, #8]
 8002340:	e00c      	b.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002342:	bf00      	nop
 8002344:	40023800 	.word	0x40023800
 8002348:	40007000 	.word	0x40007000
 800234c:	42470e40 	.word	0x42470e40
 8002350:	4b4a      	ldr	r3, [pc, #296]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	4a49      	ldr	r2, [pc, #292]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002356:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800235a:	6093      	str	r3, [r2, #8]
 800235c:	4b47      	ldr	r3, [pc, #284]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800235e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002364:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002368:	4944      	ldr	r1, [pc, #272]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800236a:	4313      	orrs	r3, r2
 800236c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0310 	and.w	r3, r3, #16
 8002376:	2b00      	cmp	r3, #0
 8002378:	d004      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8002380:	4b3f      	ldr	r3, [pc, #252]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002382:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00a      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002390:	4b3a      	ldr	r3, [pc, #232]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002392:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002396:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800239e:	4937      	ldr	r1, [pc, #220]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00a      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80023b2:	4b32      	ldr	r3, [pc, #200]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80023b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023b8:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023c0:	492e      	ldr	r1, [pc, #184]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d011      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80023d4:	4b29      	ldr	r3, [pc, #164]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80023d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023da:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023e2:	4926      	ldr	r1, [pc, #152]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023f2:	d101      	bne.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80023f4:	2301      	movs	r3, #1
 80023f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00a      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002404:	4b1d      	ldr	r3, [pc, #116]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002406:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800240a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002412:	491a      	ldr	r1, [pc, #104]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002414:	4313      	orrs	r3, r2
 8002416:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002422:	2b00      	cmp	r3, #0
 8002424:	d011      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002426:	4b15      	ldr	r3, [pc, #84]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002428:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800242c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002434:	4911      	ldr	r1, [pc, #68]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002436:	4313      	orrs	r3, r2
 8002438:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002440:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002444:	d101      	bne.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002446:	2301      	movs	r3, #1
 8002448:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800244a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800244c:	2b01      	cmp	r3, #1
 800244e:	d005      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002458:	f040 80ff 	bne.w	800265a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800245c:	4b09      	ldr	r3, [pc, #36]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002462:	f7ff fa25 	bl	80018b0 <HAL_GetTick>
 8002466:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002468:	e00e      	b.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800246a:	f7ff fa21 	bl	80018b0 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d907      	bls.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e188      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800247c:	40023800 	.word	0x40023800
 8002480:	424711e0 	.word	0x424711e0
 8002484:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002488:	4b7e      	ldr	r3, [pc, #504]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1ea      	bne.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d009      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d028      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d124      	bne.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80024bc:	4b71      	ldr	r3, [pc, #452]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80024be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024c2:	0c1b      	lsrs	r3, r3, #16
 80024c4:	f003 0303 	and.w	r3, r3, #3
 80024c8:	3301      	adds	r3, #1
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80024ce:	4b6d      	ldr	r3, [pc, #436]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80024d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024d4:	0e1b      	lsrs	r3, r3, #24
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	019b      	lsls	r3, r3, #6
 80024e6:	431a      	orrs	r2, r3
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	085b      	lsrs	r3, r3, #1
 80024ec:	3b01      	subs	r3, #1
 80024ee:	041b      	lsls	r3, r3, #16
 80024f0:	431a      	orrs	r2, r3
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	061b      	lsls	r3, r3, #24
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	071b      	lsls	r3, r3, #28
 80024fe:	4961      	ldr	r1, [pc, #388]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002500:	4313      	orrs	r3, r2
 8002502:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0304 	and.w	r3, r3, #4
 800250e:	2b00      	cmp	r3, #0
 8002510:	d004      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002516:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800251a:	d00a      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002524:	2b00      	cmp	r3, #0
 8002526:	d035      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800252c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002530:	d130      	bne.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002532:	4b54      	ldr	r3, [pc, #336]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002534:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002538:	0c1b      	lsrs	r3, r3, #16
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	3301      	adds	r3, #1
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002544:	4b4f      	ldr	r3, [pc, #316]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002546:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800254a:	0f1b      	lsrs	r3, r3, #28
 800254c:	f003 0307 	and.w	r3, r3, #7
 8002550:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	019b      	lsls	r3, r3, #6
 800255c:	431a      	orrs	r2, r3
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	085b      	lsrs	r3, r3, #1
 8002562:	3b01      	subs	r3, #1
 8002564:	041b      	lsls	r3, r3, #16
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	061b      	lsls	r3, r3, #24
 800256e:	431a      	orrs	r2, r3
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	071b      	lsls	r3, r3, #28
 8002574:	4943      	ldr	r1, [pc, #268]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002576:	4313      	orrs	r3, r2
 8002578:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800257c:	4b41      	ldr	r3, [pc, #260]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800257e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002582:	f023 021f 	bic.w	r2, r3, #31
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800258a:	3b01      	subs	r3, #1
 800258c:	493d      	ldr	r1, [pc, #244]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800258e:	4313      	orrs	r3, r2
 8002590:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800259c:	2b00      	cmp	r3, #0
 800259e:	d029      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025a8:	d124      	bne.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80025aa:	4b36      	ldr	r3, [pc, #216]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80025ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025b0:	0c1b      	lsrs	r3, r3, #16
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	3301      	adds	r3, #1
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80025bc:	4b31      	ldr	r3, [pc, #196]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80025be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025c2:	0f1b      	lsrs	r3, r3, #28
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	019b      	lsls	r3, r3, #6
 80025d4:	431a      	orrs	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	085b      	lsrs	r3, r3, #1
 80025dc:	3b01      	subs	r3, #1
 80025de:	041b      	lsls	r3, r3, #16
 80025e0:	431a      	orrs	r2, r3
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	061b      	lsls	r3, r3, #24
 80025e6:	431a      	orrs	r2, r3
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	071b      	lsls	r3, r3, #28
 80025ec:	4925      	ldr	r1, [pc, #148]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d016      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	019b      	lsls	r3, r3, #6
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	085b      	lsrs	r3, r3, #1
 8002612:	3b01      	subs	r3, #1
 8002614:	041b      	lsls	r3, r3, #16
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	061b      	lsls	r3, r3, #24
 800261e:	431a      	orrs	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	695b      	ldr	r3, [r3, #20]
 8002624:	071b      	lsls	r3, r3, #28
 8002626:	4917      	ldr	r1, [pc, #92]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002628:	4313      	orrs	r3, r2
 800262a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800262e:	4b16      	ldr	r3, [pc, #88]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002630:	2201      	movs	r2, #1
 8002632:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002634:	f7ff f93c 	bl	80018b0 <HAL_GetTick>
 8002638:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800263a:	e008      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800263c:	f7ff f938 	bl	80018b0 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e09f      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800264e:	4b0d      	ldr	r3, [pc, #52]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d0f0      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 800265a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800265c:	2b01      	cmp	r3, #1
 800265e:	f040 8095 	bne.w	800278c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002662:	4b0a      	ldr	r3, [pc, #40]	@ (800268c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002668:	f7ff f922 	bl	80018b0 <HAL_GetTick>
 800266c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800266e:	e00f      	b.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002670:	f7ff f91e 	bl	80018b0 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d908      	bls.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e085      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002682:	bf00      	nop
 8002684:	40023800 	.word	0x40023800
 8002688:	42470068 	.word	0x42470068
 800268c:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002690:	4b41      	ldr	r3, [pc, #260]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002698:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800269c:	d0e8      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0304 	and.w	r3, r3, #4
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d009      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d02b      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d127      	bne.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80026c6:	4b34      	ldr	r3, [pc, #208]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80026c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026cc:	0c1b      	lsrs	r3, r3, #16
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	3301      	adds	r3, #1
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	699a      	ldr	r2, [r3, #24]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	69db      	ldr	r3, [r3, #28]
 80026e0:	019b      	lsls	r3, r3, #6
 80026e2:	431a      	orrs	r2, r3
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	085b      	lsrs	r3, r3, #1
 80026e8:	3b01      	subs	r3, #1
 80026ea:	041b      	lsls	r3, r3, #16
 80026ec:	431a      	orrs	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f2:	061b      	lsls	r3, r3, #24
 80026f4:	4928      	ldr	r1, [pc, #160]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80026fc:	4b26      	ldr	r3, [pc, #152]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80026fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002702:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800270a:	3b01      	subs	r3, #1
 800270c:	021b      	lsls	r3, r3, #8
 800270e:	4922      	ldr	r1, [pc, #136]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002710:	4313      	orrs	r3, r2
 8002712:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800271e:	2b00      	cmp	r3, #0
 8002720:	d01d      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002726:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800272a:	d118      	bne.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800272c:	4b1a      	ldr	r3, [pc, #104]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800272e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002732:	0e1b      	lsrs	r3, r3, #24
 8002734:	f003 030f 	and.w	r3, r3, #15
 8002738:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	699a      	ldr	r2, [r3, #24]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	019b      	lsls	r3, r3, #6
 8002744:	431a      	orrs	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	085b      	lsrs	r3, r3, #1
 800274c:	3b01      	subs	r3, #1
 800274e:	041b      	lsls	r3, r3, #16
 8002750:	431a      	orrs	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	061b      	lsls	r3, r3, #24
 8002756:	4910      	ldr	r1, [pc, #64]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002758:	4313      	orrs	r3, r2
 800275a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800275e:	4b0f      	ldr	r3, [pc, #60]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002760:	2201      	movs	r2, #1
 8002762:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002764:	f7ff f8a4 	bl	80018b0 <HAL_GetTick>
 8002768:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800276a:	e008      	b.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800276c:	f7ff f8a0 	bl	80018b0 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d901      	bls.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e007      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800277e:	4b06      	ldr	r3, [pc, #24]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002786:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800278a:	d1ef      	bne.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3730      	adds	r7, #48	@ 0x30
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	40023800 	.word	0x40023800
 800279c:	42470070 	.word	0x42470070

080027a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027a4:	b0ae      	sub	sp, #184	@ 0xb8
 80027a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80027a8:	2300      	movs	r3, #0
 80027aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80027b4:	2300      	movs	r3, #0
 80027b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80027c0:	2300      	movs	r3, #0
 80027c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027c6:	4bcb      	ldr	r3, [pc, #812]	@ (8002af4 <HAL_RCC_GetSysClockFreq+0x354>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 030c 	and.w	r3, r3, #12
 80027ce:	2b0c      	cmp	r3, #12
 80027d0:	f200 8206 	bhi.w	8002be0 <HAL_RCC_GetSysClockFreq+0x440>
 80027d4:	a201      	add	r2, pc, #4	@ (adr r2, 80027dc <HAL_RCC_GetSysClockFreq+0x3c>)
 80027d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027da:	bf00      	nop
 80027dc:	08002811 	.word	0x08002811
 80027e0:	08002be1 	.word	0x08002be1
 80027e4:	08002be1 	.word	0x08002be1
 80027e8:	08002be1 	.word	0x08002be1
 80027ec:	08002819 	.word	0x08002819
 80027f0:	08002be1 	.word	0x08002be1
 80027f4:	08002be1 	.word	0x08002be1
 80027f8:	08002be1 	.word	0x08002be1
 80027fc:	08002821 	.word	0x08002821
 8002800:	08002be1 	.word	0x08002be1
 8002804:	08002be1 	.word	0x08002be1
 8002808:	08002be1 	.word	0x08002be1
 800280c:	08002a11 	.word	0x08002a11
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002810:	4bb9      	ldr	r3, [pc, #740]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002812:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002816:	e1e7      	b.n	8002be8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002818:	4bb8      	ldr	r3, [pc, #736]	@ (8002afc <HAL_RCC_GetSysClockFreq+0x35c>)
 800281a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800281e:	e1e3      	b.n	8002be8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002820:	4bb4      	ldr	r3, [pc, #720]	@ (8002af4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002828:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800282c:	4bb1      	ldr	r3, [pc, #708]	@ (8002af4 <HAL_RCC_GetSysClockFreq+0x354>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d071      	beq.n	800291c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002838:	4bae      	ldr	r3, [pc, #696]	@ (8002af4 <HAL_RCC_GetSysClockFreq+0x354>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	099b      	lsrs	r3, r3, #6
 800283e:	2200      	movs	r2, #0
 8002840:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002844:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002848:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800284c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002850:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002854:	2300      	movs	r3, #0
 8002856:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800285a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800285e:	4622      	mov	r2, r4
 8002860:	462b      	mov	r3, r5
 8002862:	f04f 0000 	mov.w	r0, #0
 8002866:	f04f 0100 	mov.w	r1, #0
 800286a:	0159      	lsls	r1, r3, #5
 800286c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002870:	0150      	lsls	r0, r2, #5
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	4621      	mov	r1, r4
 8002878:	1a51      	subs	r1, r2, r1
 800287a:	6439      	str	r1, [r7, #64]	@ 0x40
 800287c:	4629      	mov	r1, r5
 800287e:	eb63 0301 	sbc.w	r3, r3, r1
 8002882:	647b      	str	r3, [r7, #68]	@ 0x44
 8002884:	f04f 0200 	mov.w	r2, #0
 8002888:	f04f 0300 	mov.w	r3, #0
 800288c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002890:	4649      	mov	r1, r9
 8002892:	018b      	lsls	r3, r1, #6
 8002894:	4641      	mov	r1, r8
 8002896:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800289a:	4641      	mov	r1, r8
 800289c:	018a      	lsls	r2, r1, #6
 800289e:	4641      	mov	r1, r8
 80028a0:	1a51      	subs	r1, r2, r1
 80028a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80028a4:	4649      	mov	r1, r9
 80028a6:	eb63 0301 	sbc.w	r3, r3, r1
 80028aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028ac:	f04f 0200 	mov.w	r2, #0
 80028b0:	f04f 0300 	mov.w	r3, #0
 80028b4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80028b8:	4649      	mov	r1, r9
 80028ba:	00cb      	lsls	r3, r1, #3
 80028bc:	4641      	mov	r1, r8
 80028be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028c2:	4641      	mov	r1, r8
 80028c4:	00ca      	lsls	r2, r1, #3
 80028c6:	4610      	mov	r0, r2
 80028c8:	4619      	mov	r1, r3
 80028ca:	4603      	mov	r3, r0
 80028cc:	4622      	mov	r2, r4
 80028ce:	189b      	adds	r3, r3, r2
 80028d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80028d2:	462b      	mov	r3, r5
 80028d4:	460a      	mov	r2, r1
 80028d6:	eb42 0303 	adc.w	r3, r2, r3
 80028da:	637b      	str	r3, [r7, #52]	@ 0x34
 80028dc:	f04f 0200 	mov.w	r2, #0
 80028e0:	f04f 0300 	mov.w	r3, #0
 80028e4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80028e8:	4629      	mov	r1, r5
 80028ea:	024b      	lsls	r3, r1, #9
 80028ec:	4621      	mov	r1, r4
 80028ee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028f2:	4621      	mov	r1, r4
 80028f4:	024a      	lsls	r2, r1, #9
 80028f6:	4610      	mov	r0, r2
 80028f8:	4619      	mov	r1, r3
 80028fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028fe:	2200      	movs	r2, #0
 8002900:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002904:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002908:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800290c:	f7fe f96c 	bl	8000be8 <__aeabi_uldivmod>
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	4613      	mov	r3, r2
 8002916:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800291a:	e067      	b.n	80029ec <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800291c:	4b75      	ldr	r3, [pc, #468]	@ (8002af4 <HAL_RCC_GetSysClockFreq+0x354>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	099b      	lsrs	r3, r3, #6
 8002922:	2200      	movs	r2, #0
 8002924:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002928:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800292c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002934:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002936:	2300      	movs	r3, #0
 8002938:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800293a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800293e:	4622      	mov	r2, r4
 8002940:	462b      	mov	r3, r5
 8002942:	f04f 0000 	mov.w	r0, #0
 8002946:	f04f 0100 	mov.w	r1, #0
 800294a:	0159      	lsls	r1, r3, #5
 800294c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002950:	0150      	lsls	r0, r2, #5
 8002952:	4602      	mov	r2, r0
 8002954:	460b      	mov	r3, r1
 8002956:	4621      	mov	r1, r4
 8002958:	1a51      	subs	r1, r2, r1
 800295a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800295c:	4629      	mov	r1, r5
 800295e:	eb63 0301 	sbc.w	r3, r3, r1
 8002962:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002964:	f04f 0200 	mov.w	r2, #0
 8002968:	f04f 0300 	mov.w	r3, #0
 800296c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002970:	4649      	mov	r1, r9
 8002972:	018b      	lsls	r3, r1, #6
 8002974:	4641      	mov	r1, r8
 8002976:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800297a:	4641      	mov	r1, r8
 800297c:	018a      	lsls	r2, r1, #6
 800297e:	4641      	mov	r1, r8
 8002980:	ebb2 0a01 	subs.w	sl, r2, r1
 8002984:	4649      	mov	r1, r9
 8002986:	eb63 0b01 	sbc.w	fp, r3, r1
 800298a:	f04f 0200 	mov.w	r2, #0
 800298e:	f04f 0300 	mov.w	r3, #0
 8002992:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002996:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800299a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800299e:	4692      	mov	sl, r2
 80029a0:	469b      	mov	fp, r3
 80029a2:	4623      	mov	r3, r4
 80029a4:	eb1a 0303 	adds.w	r3, sl, r3
 80029a8:	623b      	str	r3, [r7, #32]
 80029aa:	462b      	mov	r3, r5
 80029ac:	eb4b 0303 	adc.w	r3, fp, r3
 80029b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80029b2:	f04f 0200 	mov.w	r2, #0
 80029b6:	f04f 0300 	mov.w	r3, #0
 80029ba:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80029be:	4629      	mov	r1, r5
 80029c0:	028b      	lsls	r3, r1, #10
 80029c2:	4621      	mov	r1, r4
 80029c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029c8:	4621      	mov	r1, r4
 80029ca:	028a      	lsls	r2, r1, #10
 80029cc:	4610      	mov	r0, r2
 80029ce:	4619      	mov	r1, r3
 80029d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029d4:	2200      	movs	r2, #0
 80029d6:	673b      	str	r3, [r7, #112]	@ 0x70
 80029d8:	677a      	str	r2, [r7, #116]	@ 0x74
 80029da:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80029de:	f7fe f903 	bl	8000be8 <__aeabi_uldivmod>
 80029e2:	4602      	mov	r2, r0
 80029e4:	460b      	mov	r3, r1
 80029e6:	4613      	mov	r3, r2
 80029e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80029ec:	4b41      	ldr	r3, [pc, #260]	@ (8002af4 <HAL_RCC_GetSysClockFreq+0x354>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	0c1b      	lsrs	r3, r3, #16
 80029f2:	f003 0303 	and.w	r3, r3, #3
 80029f6:	3301      	adds	r3, #1
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80029fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002a02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a0e:	e0eb      	b.n	8002be8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a10:	4b38      	ldr	r3, [pc, #224]	@ (8002af4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a1c:	4b35      	ldr	r3, [pc, #212]	@ (8002af4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d06b      	beq.n	8002b00 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a28:	4b32      	ldr	r3, [pc, #200]	@ (8002af4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	099b      	lsrs	r3, r3, #6
 8002a2e:	2200      	movs	r2, #0
 8002a30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a32:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002a34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a3a:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002a40:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002a44:	4622      	mov	r2, r4
 8002a46:	462b      	mov	r3, r5
 8002a48:	f04f 0000 	mov.w	r0, #0
 8002a4c:	f04f 0100 	mov.w	r1, #0
 8002a50:	0159      	lsls	r1, r3, #5
 8002a52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a56:	0150      	lsls	r0, r2, #5
 8002a58:	4602      	mov	r2, r0
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	4621      	mov	r1, r4
 8002a5e:	1a51      	subs	r1, r2, r1
 8002a60:	61b9      	str	r1, [r7, #24]
 8002a62:	4629      	mov	r1, r5
 8002a64:	eb63 0301 	sbc.w	r3, r3, r1
 8002a68:	61fb      	str	r3, [r7, #28]
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	f04f 0300 	mov.w	r3, #0
 8002a72:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002a76:	4659      	mov	r1, fp
 8002a78:	018b      	lsls	r3, r1, #6
 8002a7a:	4651      	mov	r1, sl
 8002a7c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a80:	4651      	mov	r1, sl
 8002a82:	018a      	lsls	r2, r1, #6
 8002a84:	4651      	mov	r1, sl
 8002a86:	ebb2 0801 	subs.w	r8, r2, r1
 8002a8a:	4659      	mov	r1, fp
 8002a8c:	eb63 0901 	sbc.w	r9, r3, r1
 8002a90:	f04f 0200 	mov.w	r2, #0
 8002a94:	f04f 0300 	mov.w	r3, #0
 8002a98:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a9c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002aa0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002aa4:	4690      	mov	r8, r2
 8002aa6:	4699      	mov	r9, r3
 8002aa8:	4623      	mov	r3, r4
 8002aaa:	eb18 0303 	adds.w	r3, r8, r3
 8002aae:	613b      	str	r3, [r7, #16]
 8002ab0:	462b      	mov	r3, r5
 8002ab2:	eb49 0303 	adc.w	r3, r9, r3
 8002ab6:	617b      	str	r3, [r7, #20]
 8002ab8:	f04f 0200 	mov.w	r2, #0
 8002abc:	f04f 0300 	mov.w	r3, #0
 8002ac0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002ac4:	4629      	mov	r1, r5
 8002ac6:	024b      	lsls	r3, r1, #9
 8002ac8:	4621      	mov	r1, r4
 8002aca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ace:	4621      	mov	r1, r4
 8002ad0:	024a      	lsls	r2, r1, #9
 8002ad2:	4610      	mov	r0, r2
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ada:	2200      	movs	r2, #0
 8002adc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002ade:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002ae0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ae4:	f7fe f880 	bl	8000be8 <__aeabi_uldivmod>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	460b      	mov	r3, r1
 8002aec:	4613      	mov	r3, r2
 8002aee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002af2:	e065      	b.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x420>
 8002af4:	40023800 	.word	0x40023800
 8002af8:	00f42400 	.word	0x00f42400
 8002afc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b00:	4b3d      	ldr	r3, [pc, #244]	@ (8002bf8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	099b      	lsrs	r3, r3, #6
 8002b06:	2200      	movs	r2, #0
 8002b08:	4618      	mov	r0, r3
 8002b0a:	4611      	mov	r1, r2
 8002b0c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b10:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b12:	2300      	movs	r3, #0
 8002b14:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b16:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002b1a:	4642      	mov	r2, r8
 8002b1c:	464b      	mov	r3, r9
 8002b1e:	f04f 0000 	mov.w	r0, #0
 8002b22:	f04f 0100 	mov.w	r1, #0
 8002b26:	0159      	lsls	r1, r3, #5
 8002b28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b2c:	0150      	lsls	r0, r2, #5
 8002b2e:	4602      	mov	r2, r0
 8002b30:	460b      	mov	r3, r1
 8002b32:	4641      	mov	r1, r8
 8002b34:	1a51      	subs	r1, r2, r1
 8002b36:	60b9      	str	r1, [r7, #8]
 8002b38:	4649      	mov	r1, r9
 8002b3a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	f04f 0200 	mov.w	r2, #0
 8002b44:	f04f 0300 	mov.w	r3, #0
 8002b48:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002b4c:	4659      	mov	r1, fp
 8002b4e:	018b      	lsls	r3, r1, #6
 8002b50:	4651      	mov	r1, sl
 8002b52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b56:	4651      	mov	r1, sl
 8002b58:	018a      	lsls	r2, r1, #6
 8002b5a:	4651      	mov	r1, sl
 8002b5c:	1a54      	subs	r4, r2, r1
 8002b5e:	4659      	mov	r1, fp
 8002b60:	eb63 0501 	sbc.w	r5, r3, r1
 8002b64:	f04f 0200 	mov.w	r2, #0
 8002b68:	f04f 0300 	mov.w	r3, #0
 8002b6c:	00eb      	lsls	r3, r5, #3
 8002b6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b72:	00e2      	lsls	r2, r4, #3
 8002b74:	4614      	mov	r4, r2
 8002b76:	461d      	mov	r5, r3
 8002b78:	4643      	mov	r3, r8
 8002b7a:	18e3      	adds	r3, r4, r3
 8002b7c:	603b      	str	r3, [r7, #0]
 8002b7e:	464b      	mov	r3, r9
 8002b80:	eb45 0303 	adc.w	r3, r5, r3
 8002b84:	607b      	str	r3, [r7, #4]
 8002b86:	f04f 0200 	mov.w	r2, #0
 8002b8a:	f04f 0300 	mov.w	r3, #0
 8002b8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b92:	4629      	mov	r1, r5
 8002b94:	028b      	lsls	r3, r1, #10
 8002b96:	4621      	mov	r1, r4
 8002b98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b9c:	4621      	mov	r1, r4
 8002b9e:	028a      	lsls	r2, r1, #10
 8002ba0:	4610      	mov	r0, r2
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ba8:	2200      	movs	r2, #0
 8002baa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002bac:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002bae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002bb2:	f7fe f819 	bl	8000be8 <__aeabi_uldivmod>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	460b      	mov	r3, r1
 8002bba:	4613      	mov	r3, r2
 8002bbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002bc0:	4b0d      	ldr	r3, [pc, #52]	@ (8002bf8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	0f1b      	lsrs	r3, r3, #28
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002bce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002bd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002bde:	e003      	b.n	8002be8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002be0:	4b06      	ldr	r3, [pc, #24]	@ (8002bfc <HAL_RCC_GetSysClockFreq+0x45c>)
 8002be2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002be6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002be8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	37b8      	adds	r7, #184	@ 0xb8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	00f42400 	.word	0x00f42400

08002c00 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e28d      	b.n	800312e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f000 8083 	beq.w	8002d26 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002c20:	4b94      	ldr	r3, [pc, #592]	@ (8002e74 <HAL_RCC_OscConfig+0x274>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 030c 	and.w	r3, r3, #12
 8002c28:	2b04      	cmp	r3, #4
 8002c2a:	d019      	beq.n	8002c60 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c2c:	4b91      	ldr	r3, [pc, #580]	@ (8002e74 <HAL_RCC_OscConfig+0x274>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f003 030c 	and.w	r3, r3, #12
        || \
 8002c34:	2b08      	cmp	r3, #8
 8002c36:	d106      	bne.n	8002c46 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c38:	4b8e      	ldr	r3, [pc, #568]	@ (8002e74 <HAL_RCC_OscConfig+0x274>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c44:	d00c      	beq.n	8002c60 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c46:	4b8b      	ldr	r3, [pc, #556]	@ (8002e74 <HAL_RCC_OscConfig+0x274>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c4e:	2b0c      	cmp	r3, #12
 8002c50:	d112      	bne.n	8002c78 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c52:	4b88      	ldr	r3, [pc, #544]	@ (8002e74 <HAL_RCC_OscConfig+0x274>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c5e:	d10b      	bne.n	8002c78 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c60:	4b84      	ldr	r3, [pc, #528]	@ (8002e74 <HAL_RCC_OscConfig+0x274>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d05b      	beq.n	8002d24 <HAL_RCC_OscConfig+0x124>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d157      	bne.n	8002d24 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e25a      	b.n	800312e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c80:	d106      	bne.n	8002c90 <HAL_RCC_OscConfig+0x90>
 8002c82:	4b7c      	ldr	r3, [pc, #496]	@ (8002e74 <HAL_RCC_OscConfig+0x274>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a7b      	ldr	r2, [pc, #492]	@ (8002e74 <HAL_RCC_OscConfig+0x274>)
 8002c88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c8c:	6013      	str	r3, [r2, #0]
 8002c8e:	e01d      	b.n	8002ccc <HAL_RCC_OscConfig+0xcc>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c98:	d10c      	bne.n	8002cb4 <HAL_RCC_OscConfig+0xb4>
 8002c9a:	4b76      	ldr	r3, [pc, #472]	@ (8002e74 <HAL_RCC_OscConfig+0x274>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a75      	ldr	r2, [pc, #468]	@ (8002e74 <HAL_RCC_OscConfig+0x274>)
 8002ca0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ca4:	6013      	str	r3, [r2, #0]
 8002ca6:	4b73      	ldr	r3, [pc, #460]	@ (8002e74 <HAL_RCC_OscConfig+0x274>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a72      	ldr	r2, [pc, #456]	@ (8002e74 <HAL_RCC_OscConfig+0x274>)
 8002cac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cb0:	6013      	str	r3, [r2, #0]
 8002cb2:	e00b      	b.n	8002ccc <HAL_RCC_OscConfig+0xcc>
 8002cb4:	4b6f      	ldr	r3, [pc, #444]	@ (8002e74 <HAL_RCC_OscConfig+0x274>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a6e      	ldr	r2, [pc, #440]	@ (8002e74 <HAL_RCC_OscConfig+0x274>)
 8002cba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cbe:	6013      	str	r3, [r2, #0]
 8002cc0:	4b6c      	ldr	r3, [pc, #432]	@ (8002e74 <HAL_RCC_OscConfig+0x274>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a6b      	ldr	r2, [pc, #428]	@ (8002e74 <HAL_RCC_OscConfig+0x274>)
 8002cc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d013      	beq.n	8002cfc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd4:	f7fe fdec 	bl	80018b0 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cdc:	f7fe fde8 	bl	80018b0 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b64      	cmp	r3, #100	@ 0x64
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e21f      	b.n	800312e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cee:	4b61      	ldr	r3, [pc, #388]	@ (8002e74 <HAL_RCC_OscConfig+0x274>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d0f0      	beq.n	8002cdc <HAL_RCC_OscConfig+0xdc>
 8002cfa:	e014      	b.n	8002d26 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfc:	f7fe fdd8 	bl	80018b0 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d04:	f7fe fdd4 	bl	80018b0 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b64      	cmp	r3, #100	@ 0x64
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e20b      	b.n	800312e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d16:	4b57      	ldr	r3, [pc, #348]	@ (8002e74 <HAL_RCC_OscConfig+0x274>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1f0      	bne.n	8002d04 <HAL_RCC_OscConfig+0x104>
 8002d22:	e000      	b.n	8002d26 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d06f      	beq.n	8002e12 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002d32:	4b50      	ldr	r3, [pc, #320]	@ (8002e74 <HAL_RCC_OscConfig+0x274>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 030c 	and.w	r3, r3, #12
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d017      	beq.n	8002d6e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002d3e:	4b4d      	ldr	r3, [pc, #308]	@ (8002e74 <HAL_RCC_OscConfig+0x274>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 030c 	and.w	r3, r3, #12
        || \
 8002d46:	2b08      	cmp	r3, #8
 8002d48:	d105      	bne.n	8002d56 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002d4a:	4b4a      	ldr	r3, [pc, #296]	@ (8002e74 <HAL_RCC_OscConfig+0x274>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00b      	beq.n	8002d6e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d56:	4b47      	ldr	r3, [pc, #284]	@ (8002e74 <HAL_RCC_OscConfig+0x274>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002d5e:	2b0c      	cmp	r3, #12
 8002d60:	d11c      	bne.n	8002d9c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d62:	4b44      	ldr	r3, [pc, #272]	@ (8002e74 <HAL_RCC_OscConfig+0x274>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d116      	bne.n	8002d9c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d6e:	4b41      	ldr	r3, [pc, #260]	@ (8002e74 <HAL_RCC_OscConfig+0x274>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d005      	beq.n	8002d86 <HAL_RCC_OscConfig+0x186>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d001      	beq.n	8002d86 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e1d3      	b.n	800312e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d86:	4b3b      	ldr	r3, [pc, #236]	@ (8002e74 <HAL_RCC_OscConfig+0x274>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	4937      	ldr	r1, [pc, #220]	@ (8002e74 <HAL_RCC_OscConfig+0x274>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d9a:	e03a      	b.n	8002e12 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d020      	beq.n	8002de6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002da4:	4b34      	ldr	r3, [pc, #208]	@ (8002e78 <HAL_RCC_OscConfig+0x278>)
 8002da6:	2201      	movs	r2, #1
 8002da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002daa:	f7fe fd81 	bl	80018b0 <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002db2:	f7fe fd7d 	bl	80018b0 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e1b4      	b.n	800312e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc4:	4b2b      	ldr	r3, [pc, #172]	@ (8002e74 <HAL_RCC_OscConfig+0x274>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d0f0      	beq.n	8002db2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd0:	4b28      	ldr	r3, [pc, #160]	@ (8002e74 <HAL_RCC_OscConfig+0x274>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	4925      	ldr	r1, [pc, #148]	@ (8002e74 <HAL_RCC_OscConfig+0x274>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	600b      	str	r3, [r1, #0]
 8002de4:	e015      	b.n	8002e12 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002de6:	4b24      	ldr	r3, [pc, #144]	@ (8002e78 <HAL_RCC_OscConfig+0x278>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dec:	f7fe fd60 	bl	80018b0 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002df4:	f7fe fd5c 	bl	80018b0 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e193      	b.n	800312e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e06:	4b1b      	ldr	r3, [pc, #108]	@ (8002e74 <HAL_RCC_OscConfig+0x274>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1f0      	bne.n	8002df4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d036      	beq.n	8002e8c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d016      	beq.n	8002e54 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e26:	4b15      	ldr	r3, [pc, #84]	@ (8002e7c <HAL_RCC_OscConfig+0x27c>)
 8002e28:	2201      	movs	r2, #1
 8002e2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e2c:	f7fe fd40 	bl	80018b0 <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e34:	f7fe fd3c 	bl	80018b0 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e173      	b.n	800312e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e46:	4b0b      	ldr	r3, [pc, #44]	@ (8002e74 <HAL_RCC_OscConfig+0x274>)
 8002e48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d0f0      	beq.n	8002e34 <HAL_RCC_OscConfig+0x234>
 8002e52:	e01b      	b.n	8002e8c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e54:	4b09      	ldr	r3, [pc, #36]	@ (8002e7c <HAL_RCC_OscConfig+0x27c>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e5a:	f7fe fd29 	bl	80018b0 <HAL_GetTick>
 8002e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e60:	e00e      	b.n	8002e80 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e62:	f7fe fd25 	bl	80018b0 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d907      	bls.n	8002e80 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e15c      	b.n	800312e <HAL_RCC_OscConfig+0x52e>
 8002e74:	40023800 	.word	0x40023800
 8002e78:	42470000 	.word	0x42470000
 8002e7c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e80:	4b8a      	ldr	r3, [pc, #552]	@ (80030ac <HAL_RCC_OscConfig+0x4ac>)
 8002e82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1ea      	bne.n	8002e62 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0304 	and.w	r3, r3, #4
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f000 8097 	beq.w	8002fc8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e9e:	4b83      	ldr	r3, [pc, #524]	@ (80030ac <HAL_RCC_OscConfig+0x4ac>)
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10f      	bne.n	8002eca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60bb      	str	r3, [r7, #8]
 8002eae:	4b7f      	ldr	r3, [pc, #508]	@ (80030ac <HAL_RCC_OscConfig+0x4ac>)
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb2:	4a7e      	ldr	r2, [pc, #504]	@ (80030ac <HAL_RCC_OscConfig+0x4ac>)
 8002eb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002eb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002eba:	4b7c      	ldr	r3, [pc, #496]	@ (80030ac <HAL_RCC_OscConfig+0x4ac>)
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ebe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ec2:	60bb      	str	r3, [r7, #8]
 8002ec4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eca:	4b79      	ldr	r3, [pc, #484]	@ (80030b0 <HAL_RCC_OscConfig+0x4b0>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d118      	bne.n	8002f08 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ed6:	4b76      	ldr	r3, [pc, #472]	@ (80030b0 <HAL_RCC_OscConfig+0x4b0>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a75      	ldr	r2, [pc, #468]	@ (80030b0 <HAL_RCC_OscConfig+0x4b0>)
 8002edc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ee0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ee2:	f7fe fce5 	bl	80018b0 <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee8:	e008      	b.n	8002efc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eea:	f7fe fce1 	bl	80018b0 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e118      	b.n	800312e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002efc:	4b6c      	ldr	r3, [pc, #432]	@ (80030b0 <HAL_RCC_OscConfig+0x4b0>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0f0      	beq.n	8002eea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d106      	bne.n	8002f1e <HAL_RCC_OscConfig+0x31e>
 8002f10:	4b66      	ldr	r3, [pc, #408]	@ (80030ac <HAL_RCC_OscConfig+0x4ac>)
 8002f12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f14:	4a65      	ldr	r2, [pc, #404]	@ (80030ac <HAL_RCC_OscConfig+0x4ac>)
 8002f16:	f043 0301 	orr.w	r3, r3, #1
 8002f1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f1c:	e01c      	b.n	8002f58 <HAL_RCC_OscConfig+0x358>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	2b05      	cmp	r3, #5
 8002f24:	d10c      	bne.n	8002f40 <HAL_RCC_OscConfig+0x340>
 8002f26:	4b61      	ldr	r3, [pc, #388]	@ (80030ac <HAL_RCC_OscConfig+0x4ac>)
 8002f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f2a:	4a60      	ldr	r2, [pc, #384]	@ (80030ac <HAL_RCC_OscConfig+0x4ac>)
 8002f2c:	f043 0304 	orr.w	r3, r3, #4
 8002f30:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f32:	4b5e      	ldr	r3, [pc, #376]	@ (80030ac <HAL_RCC_OscConfig+0x4ac>)
 8002f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f36:	4a5d      	ldr	r2, [pc, #372]	@ (80030ac <HAL_RCC_OscConfig+0x4ac>)
 8002f38:	f043 0301 	orr.w	r3, r3, #1
 8002f3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f3e:	e00b      	b.n	8002f58 <HAL_RCC_OscConfig+0x358>
 8002f40:	4b5a      	ldr	r3, [pc, #360]	@ (80030ac <HAL_RCC_OscConfig+0x4ac>)
 8002f42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f44:	4a59      	ldr	r2, [pc, #356]	@ (80030ac <HAL_RCC_OscConfig+0x4ac>)
 8002f46:	f023 0301 	bic.w	r3, r3, #1
 8002f4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f4c:	4b57      	ldr	r3, [pc, #348]	@ (80030ac <HAL_RCC_OscConfig+0x4ac>)
 8002f4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f50:	4a56      	ldr	r2, [pc, #344]	@ (80030ac <HAL_RCC_OscConfig+0x4ac>)
 8002f52:	f023 0304 	bic.w	r3, r3, #4
 8002f56:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d015      	beq.n	8002f8c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f60:	f7fe fca6 	bl	80018b0 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f66:	e00a      	b.n	8002f7e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f68:	f7fe fca2 	bl	80018b0 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e0d7      	b.n	800312e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f7e:	4b4b      	ldr	r3, [pc, #300]	@ (80030ac <HAL_RCC_OscConfig+0x4ac>)
 8002f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0ee      	beq.n	8002f68 <HAL_RCC_OscConfig+0x368>
 8002f8a:	e014      	b.n	8002fb6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8c:	f7fe fc90 	bl	80018b0 <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f92:	e00a      	b.n	8002faa <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f94:	f7fe fc8c 	bl	80018b0 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e0c1      	b.n	800312e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002faa:	4b40      	ldr	r3, [pc, #256]	@ (80030ac <HAL_RCC_OscConfig+0x4ac>)
 8002fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1ee      	bne.n	8002f94 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fb6:	7dfb      	ldrb	r3, [r7, #23]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d105      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fbc:	4b3b      	ldr	r3, [pc, #236]	@ (80030ac <HAL_RCC_OscConfig+0x4ac>)
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc0:	4a3a      	ldr	r2, [pc, #232]	@ (80030ac <HAL_RCC_OscConfig+0x4ac>)
 8002fc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fc6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f000 80ad 	beq.w	800312c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fd2:	4b36      	ldr	r3, [pc, #216]	@ (80030ac <HAL_RCC_OscConfig+0x4ac>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f003 030c 	and.w	r3, r3, #12
 8002fda:	2b08      	cmp	r3, #8
 8002fdc:	d060      	beq.n	80030a0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d145      	bne.n	8003072 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe6:	4b33      	ldr	r3, [pc, #204]	@ (80030b4 <HAL_RCC_OscConfig+0x4b4>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fec:	f7fe fc60 	bl	80018b0 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff4:	f7fe fc5c 	bl	80018b0 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e093      	b.n	800312e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003006:	4b29      	ldr	r3, [pc, #164]	@ (80030ac <HAL_RCC_OscConfig+0x4ac>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1f0      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	69da      	ldr	r2, [r3, #28]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003020:	019b      	lsls	r3, r3, #6
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003028:	085b      	lsrs	r3, r3, #1
 800302a:	3b01      	subs	r3, #1
 800302c:	041b      	lsls	r3, r3, #16
 800302e:	431a      	orrs	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003034:	061b      	lsls	r3, r3, #24
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303c:	071b      	lsls	r3, r3, #28
 800303e:	491b      	ldr	r1, [pc, #108]	@ (80030ac <HAL_RCC_OscConfig+0x4ac>)
 8003040:	4313      	orrs	r3, r2
 8003042:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003044:	4b1b      	ldr	r3, [pc, #108]	@ (80030b4 <HAL_RCC_OscConfig+0x4b4>)
 8003046:	2201      	movs	r2, #1
 8003048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304a:	f7fe fc31 	bl	80018b0 <HAL_GetTick>
 800304e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003050:	e008      	b.n	8003064 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003052:	f7fe fc2d 	bl	80018b0 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e064      	b.n	800312e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003064:	4b11      	ldr	r3, [pc, #68]	@ (80030ac <HAL_RCC_OscConfig+0x4ac>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d0f0      	beq.n	8003052 <HAL_RCC_OscConfig+0x452>
 8003070:	e05c      	b.n	800312c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003072:	4b10      	ldr	r3, [pc, #64]	@ (80030b4 <HAL_RCC_OscConfig+0x4b4>)
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003078:	f7fe fc1a 	bl	80018b0 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003080:	f7fe fc16 	bl	80018b0 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e04d      	b.n	800312e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003092:	4b06      	ldr	r3, [pc, #24]	@ (80030ac <HAL_RCC_OscConfig+0x4ac>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1f0      	bne.n	8003080 <HAL_RCC_OscConfig+0x480>
 800309e:	e045      	b.n	800312c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d107      	bne.n	80030b8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e040      	b.n	800312e <HAL_RCC_OscConfig+0x52e>
 80030ac:	40023800 	.word	0x40023800
 80030b0:	40007000 	.word	0x40007000
 80030b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030b8:	4b1f      	ldr	r3, [pc, #124]	@ (8003138 <HAL_RCC_OscConfig+0x538>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d030      	beq.n	8003128 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d129      	bne.n	8003128 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030de:	429a      	cmp	r2, r3
 80030e0:	d122      	bne.n	8003128 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80030e8:	4013      	ands	r3, r2
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80030ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d119      	bne.n	8003128 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030fe:	085b      	lsrs	r3, r3, #1
 8003100:	3b01      	subs	r3, #1
 8003102:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003104:	429a      	cmp	r2, r3
 8003106:	d10f      	bne.n	8003128 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003112:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003114:	429a      	cmp	r2, r3
 8003116:	d107      	bne.n	8003128 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003122:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003124:	429a      	cmp	r2, r3
 8003126:	d001      	beq.n	800312c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e000      	b.n	800312e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3718      	adds	r7, #24
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40023800 	.word	0x40023800

0800313c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d101      	bne.n	8003150 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e097      	b.n	8003280 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2b00      	cmp	r3, #0
 800315a:	d106      	bne.n	800316a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f7fe f969 	bl	800143c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2202      	movs	r2, #2
 800316e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6812      	ldr	r2, [r2, #0]
 800317c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003180:	f023 0307 	bic.w	r3, r3, #7
 8003184:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	3304      	adds	r3, #4
 800318e:	4619      	mov	r1, r3
 8003190:	4610      	mov	r0, r2
 8003192:	f000 fa1f 	bl	80035d4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031be:	f023 0303 	bic.w	r3, r3, #3
 80031c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	021b      	lsls	r3, r3, #8
 80031ce:	4313      	orrs	r3, r2
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80031dc:	f023 030c 	bic.w	r3, r3, #12
 80031e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80031e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80031ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	68da      	ldr	r2, [r3, #12]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	69db      	ldr	r3, [r3, #28]
 80031f6:	021b      	lsls	r3, r3, #8
 80031f8:	4313      	orrs	r3, r2
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	011a      	lsls	r2, r3, #4
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	031b      	lsls	r3, r3, #12
 800320c:	4313      	orrs	r3, r2
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	4313      	orrs	r3, r2
 8003212:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800321a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003222:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	011b      	lsls	r3, r3, #4
 800322e:	4313      	orrs	r3, r2
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	4313      	orrs	r3, r2
 8003234:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	3718      	adds	r7, #24
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003298:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80032a0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80032a8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80032b0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d110      	bne.n	80032da <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80032b8:	7bfb      	ldrb	r3, [r7, #15]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d102      	bne.n	80032c4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80032be:	7b7b      	ldrb	r3, [r7, #13]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d001      	beq.n	80032c8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e069      	b.n	800339c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2202      	movs	r2, #2
 80032cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2202      	movs	r2, #2
 80032d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032d8:	e031      	b.n	800333e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	2b04      	cmp	r3, #4
 80032de:	d110      	bne.n	8003302 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80032e0:	7bbb      	ldrb	r3, [r7, #14]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d102      	bne.n	80032ec <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80032e6:	7b3b      	ldrb	r3, [r7, #12]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d001      	beq.n	80032f0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e055      	b.n	800339c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2202      	movs	r2, #2
 80032f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2202      	movs	r2, #2
 80032fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003300:	e01d      	b.n	800333e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003302:	7bfb      	ldrb	r3, [r7, #15]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d108      	bne.n	800331a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003308:	7bbb      	ldrb	r3, [r7, #14]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d105      	bne.n	800331a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800330e:	7b7b      	ldrb	r3, [r7, #13]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d102      	bne.n	800331a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003314:	7b3b      	ldrb	r3, [r7, #12]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d001      	beq.n	800331e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e03e      	b.n	800339c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2202      	movs	r2, #2
 8003322:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2202      	movs	r2, #2
 800332a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2202      	movs	r2, #2
 8003332:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2202      	movs	r2, #2
 800333a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d003      	beq.n	800334c <HAL_TIM_Encoder_Start+0xc4>
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	2b04      	cmp	r3, #4
 8003348:	d008      	beq.n	800335c <HAL_TIM_Encoder_Start+0xd4>
 800334a:	e00f      	b.n	800336c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2201      	movs	r2, #1
 8003352:	2100      	movs	r1, #0
 8003354:	4618      	mov	r0, r3
 8003356:	f000 f9e3 	bl	8003720 <TIM_CCxChannelCmd>
      break;
 800335a:	e016      	b.n	800338a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2201      	movs	r2, #1
 8003362:	2104      	movs	r1, #4
 8003364:	4618      	mov	r0, r3
 8003366:	f000 f9db 	bl	8003720 <TIM_CCxChannelCmd>
      break;
 800336a:	e00e      	b.n	800338a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2201      	movs	r2, #1
 8003372:	2100      	movs	r1, #0
 8003374:	4618      	mov	r0, r3
 8003376:	f000 f9d3 	bl	8003720 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2201      	movs	r2, #1
 8003380:	2104      	movs	r1, #4
 8003382:	4618      	mov	r0, r3
 8003384:	f000 f9cc 	bl	8003720 <TIM_CCxChannelCmd>
      break;
 8003388:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f042 0201 	orr.w	r2, r2, #1
 8003398:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3710      	adds	r7, #16
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d020      	beq.n	8003408 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d01b      	beq.n	8003408 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f06f 0202 	mvn.w	r2, #2
 80033d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	f003 0303 	and.w	r3, r3, #3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7fd fdb8 	bl	8000f64 <HAL_TIM_IC_CaptureCallback>
 80033f4:	e005      	b.n	8003402 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f8ce 	bl	8003598 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 f8d5 	bl	80035ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	f003 0304 	and.w	r3, r3, #4
 800340e:	2b00      	cmp	r3, #0
 8003410:	d020      	beq.n	8003454 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f003 0304 	and.w	r3, r3, #4
 8003418:	2b00      	cmp	r3, #0
 800341a:	d01b      	beq.n	8003454 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f06f 0204 	mvn.w	r2, #4
 8003424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2202      	movs	r2, #2
 800342a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003436:	2b00      	cmp	r3, #0
 8003438:	d003      	beq.n	8003442 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7fd fd92 	bl	8000f64 <HAL_TIM_IC_CaptureCallback>
 8003440:	e005      	b.n	800344e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f8a8 	bl	8003598 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 f8af 	bl	80035ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	f003 0308 	and.w	r3, r3, #8
 800345a:	2b00      	cmp	r3, #0
 800345c:	d020      	beq.n	80034a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f003 0308 	and.w	r3, r3, #8
 8003464:	2b00      	cmp	r3, #0
 8003466:	d01b      	beq.n	80034a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f06f 0208 	mvn.w	r2, #8
 8003470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2204      	movs	r2, #4
 8003476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7fd fd6c 	bl	8000f64 <HAL_TIM_IC_CaptureCallback>
 800348c:	e005      	b.n	800349a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f882 	bl	8003598 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f889 	bl	80035ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	f003 0310 	and.w	r3, r3, #16
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d020      	beq.n	80034ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f003 0310 	and.w	r3, r3, #16
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d01b      	beq.n	80034ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f06f 0210 	mvn.w	r2, #16
 80034bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2208      	movs	r2, #8
 80034c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7fd fd46 	bl	8000f64 <HAL_TIM_IC_CaptureCallback>
 80034d8:	e005      	b.n	80034e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 f85c 	bl	8003598 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 f863 	bl	80035ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00c      	beq.n	8003510 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d007      	beq.n	8003510 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f06f 0201 	mvn.w	r2, #1
 8003508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f83a 	bl	8003584 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00c      	beq.n	8003534 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003520:	2b00      	cmp	r3, #0
 8003522:	d007      	beq.n	8003534 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800352c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 f9a2 	bl	8003878 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00c      	beq.n	8003558 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003544:	2b00      	cmp	r3, #0
 8003546:	d007      	beq.n	8003558 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f834 	bl	80035c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	f003 0320 	and.w	r3, r3, #32
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00c      	beq.n	800357c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f003 0320 	and.w	r3, r3, #32
 8003568:	2b00      	cmp	r3, #0
 800356a:	d007      	beq.n	800357c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f06f 0220 	mvn.w	r2, #32
 8003574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f974 	bl	8003864 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800357c:	bf00      	nop
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a43      	ldr	r2, [pc, #268]	@ (80036f4 <TIM_Base_SetConfig+0x120>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d013      	beq.n	8003614 <TIM_Base_SetConfig+0x40>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035f2:	d00f      	beq.n	8003614 <TIM_Base_SetConfig+0x40>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a40      	ldr	r2, [pc, #256]	@ (80036f8 <TIM_Base_SetConfig+0x124>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d00b      	beq.n	8003614 <TIM_Base_SetConfig+0x40>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a3f      	ldr	r2, [pc, #252]	@ (80036fc <TIM_Base_SetConfig+0x128>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d007      	beq.n	8003614 <TIM_Base_SetConfig+0x40>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a3e      	ldr	r2, [pc, #248]	@ (8003700 <TIM_Base_SetConfig+0x12c>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d003      	beq.n	8003614 <TIM_Base_SetConfig+0x40>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a3d      	ldr	r2, [pc, #244]	@ (8003704 <TIM_Base_SetConfig+0x130>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d108      	bne.n	8003626 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800361a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	4313      	orrs	r3, r2
 8003624:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a32      	ldr	r2, [pc, #200]	@ (80036f4 <TIM_Base_SetConfig+0x120>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d02b      	beq.n	8003686 <TIM_Base_SetConfig+0xb2>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003634:	d027      	beq.n	8003686 <TIM_Base_SetConfig+0xb2>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a2f      	ldr	r2, [pc, #188]	@ (80036f8 <TIM_Base_SetConfig+0x124>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d023      	beq.n	8003686 <TIM_Base_SetConfig+0xb2>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a2e      	ldr	r2, [pc, #184]	@ (80036fc <TIM_Base_SetConfig+0x128>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d01f      	beq.n	8003686 <TIM_Base_SetConfig+0xb2>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a2d      	ldr	r2, [pc, #180]	@ (8003700 <TIM_Base_SetConfig+0x12c>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d01b      	beq.n	8003686 <TIM_Base_SetConfig+0xb2>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a2c      	ldr	r2, [pc, #176]	@ (8003704 <TIM_Base_SetConfig+0x130>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d017      	beq.n	8003686 <TIM_Base_SetConfig+0xb2>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a2b      	ldr	r2, [pc, #172]	@ (8003708 <TIM_Base_SetConfig+0x134>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d013      	beq.n	8003686 <TIM_Base_SetConfig+0xb2>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a2a      	ldr	r2, [pc, #168]	@ (800370c <TIM_Base_SetConfig+0x138>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d00f      	beq.n	8003686 <TIM_Base_SetConfig+0xb2>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a29      	ldr	r2, [pc, #164]	@ (8003710 <TIM_Base_SetConfig+0x13c>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d00b      	beq.n	8003686 <TIM_Base_SetConfig+0xb2>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a28      	ldr	r2, [pc, #160]	@ (8003714 <TIM_Base_SetConfig+0x140>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d007      	beq.n	8003686 <TIM_Base_SetConfig+0xb2>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a27      	ldr	r2, [pc, #156]	@ (8003718 <TIM_Base_SetConfig+0x144>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d003      	beq.n	8003686 <TIM_Base_SetConfig+0xb2>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a26      	ldr	r2, [pc, #152]	@ (800371c <TIM_Base_SetConfig+0x148>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d108      	bne.n	8003698 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800368c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	4313      	orrs	r3, r2
 8003696:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	689a      	ldr	r2, [r3, #8]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a0e      	ldr	r2, [pc, #56]	@ (80036f4 <TIM_Base_SetConfig+0x120>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d003      	beq.n	80036c6 <TIM_Base_SetConfig+0xf2>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a10      	ldr	r2, [pc, #64]	@ (8003704 <TIM_Base_SetConfig+0x130>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d103      	bne.n	80036ce <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	691a      	ldr	r2, [r3, #16]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f043 0204 	orr.w	r2, r3, #4
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	601a      	str	r2, [r3, #0]
}
 80036e6:	bf00      	nop
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	40010000 	.word	0x40010000
 80036f8:	40000400 	.word	0x40000400
 80036fc:	40000800 	.word	0x40000800
 8003700:	40000c00 	.word	0x40000c00
 8003704:	40010400 	.word	0x40010400
 8003708:	40014000 	.word	0x40014000
 800370c:	40014400 	.word	0x40014400
 8003710:	40014800 	.word	0x40014800
 8003714:	40001800 	.word	0x40001800
 8003718:	40001c00 	.word	0x40001c00
 800371c:	40002000 	.word	0x40002000

08003720 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003720:	b480      	push	{r7}
 8003722:	b087      	sub	sp, #28
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	f003 031f 	and.w	r3, r3, #31
 8003732:	2201      	movs	r2, #1
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6a1a      	ldr	r2, [r3, #32]
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	43db      	mvns	r3, r3
 8003742:	401a      	ands	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6a1a      	ldr	r2, [r3, #32]
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	f003 031f 	and.w	r3, r3, #31
 8003752:	6879      	ldr	r1, [r7, #4]
 8003754:	fa01 f303 	lsl.w	r3, r1, r3
 8003758:	431a      	orrs	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	621a      	str	r2, [r3, #32]
}
 800375e:	bf00      	nop
 8003760:	371c      	adds	r7, #28
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
	...

0800376c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800377c:	2b01      	cmp	r3, #1
 800377e:	d101      	bne.n	8003784 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003780:	2302      	movs	r3, #2
 8003782:	e05a      	b.n	800383a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2202      	movs	r2, #2
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a21      	ldr	r2, [pc, #132]	@ (8003848 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d022      	beq.n	800380e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037d0:	d01d      	beq.n	800380e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a1d      	ldr	r2, [pc, #116]	@ (800384c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d018      	beq.n	800380e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a1b      	ldr	r2, [pc, #108]	@ (8003850 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d013      	beq.n	800380e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a1a      	ldr	r2, [pc, #104]	@ (8003854 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d00e      	beq.n	800380e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a18      	ldr	r2, [pc, #96]	@ (8003858 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d009      	beq.n	800380e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a17      	ldr	r2, [pc, #92]	@ (800385c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d004      	beq.n	800380e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a15      	ldr	r2, [pc, #84]	@ (8003860 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d10c      	bne.n	8003828 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003814:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	4313      	orrs	r3, r2
 800381e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68ba      	ldr	r2, [r7, #8]
 8003826:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	40010000 	.word	0x40010000
 800384c:	40000400 	.word	0x40000400
 8003850:	40000800 	.word	0x40000800
 8003854:	40000c00 	.word	0x40000c00
 8003858:	40010400 	.word	0x40010400
 800385c:	40014000 	.word	0x40014000
 8003860:	40001800 	.word	0x40001800

08003864 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e042      	b.n	8003924 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d106      	bne.n	80038b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7fd fe12 	bl	80014dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2224      	movs	r2, #36	@ 0x24
 80038bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68da      	ldr	r2, [r3, #12]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 f82b 	bl	800392c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	691a      	ldr	r2, [r3, #16]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80038e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	695a      	ldr	r2, [r3, #20]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80038f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68da      	ldr	r2, [r3, #12]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003904:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2220      	movs	r2, #32
 8003910:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2220      	movs	r2, #32
 8003918:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800392c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003930:	b0c0      	sub	sp, #256	@ 0x100
 8003932:	af00      	add	r7, sp, #0
 8003934:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003948:	68d9      	ldr	r1, [r3, #12]
 800394a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	ea40 0301 	orr.w	r3, r0, r1
 8003954:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800395a:	689a      	ldr	r2, [r3, #8]
 800395c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	431a      	orrs	r2, r3
 8003964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	431a      	orrs	r2, r3
 800396c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	4313      	orrs	r3, r2
 8003974:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003984:	f021 010c 	bic.w	r1, r1, #12
 8003988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003992:	430b      	orrs	r3, r1
 8003994:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80039a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a6:	6999      	ldr	r1, [r3, #24]
 80039a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	ea40 0301 	orr.w	r3, r0, r1
 80039b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	4b8f      	ldr	r3, [pc, #572]	@ (8003bf8 <UART_SetConfig+0x2cc>)
 80039bc:	429a      	cmp	r2, r3
 80039be:	d005      	beq.n	80039cc <UART_SetConfig+0xa0>
 80039c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	4b8d      	ldr	r3, [pc, #564]	@ (8003bfc <UART_SetConfig+0x2d0>)
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d104      	bne.n	80039d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039cc:	f7fe fbaa 	bl	8002124 <HAL_RCC_GetPCLK2Freq>
 80039d0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80039d4:	e003      	b.n	80039de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039d6:	f7fe fb91 	bl	80020fc <HAL_RCC_GetPCLK1Freq>
 80039da:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039e2:	69db      	ldr	r3, [r3, #28]
 80039e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039e8:	f040 810c 	bne.w	8003c04 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039f0:	2200      	movs	r2, #0
 80039f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80039f6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80039fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80039fe:	4622      	mov	r2, r4
 8003a00:	462b      	mov	r3, r5
 8003a02:	1891      	adds	r1, r2, r2
 8003a04:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003a06:	415b      	adcs	r3, r3
 8003a08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003a0e:	4621      	mov	r1, r4
 8003a10:	eb12 0801 	adds.w	r8, r2, r1
 8003a14:	4629      	mov	r1, r5
 8003a16:	eb43 0901 	adc.w	r9, r3, r1
 8003a1a:	f04f 0200 	mov.w	r2, #0
 8003a1e:	f04f 0300 	mov.w	r3, #0
 8003a22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a2e:	4690      	mov	r8, r2
 8003a30:	4699      	mov	r9, r3
 8003a32:	4623      	mov	r3, r4
 8003a34:	eb18 0303 	adds.w	r3, r8, r3
 8003a38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003a3c:	462b      	mov	r3, r5
 8003a3e:	eb49 0303 	adc.w	r3, r9, r3
 8003a42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a52:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003a56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	18db      	adds	r3, r3, r3
 8003a5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a60:	4613      	mov	r3, r2
 8003a62:	eb42 0303 	adc.w	r3, r2, r3
 8003a66:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003a6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003a70:	f7fd f8ba 	bl	8000be8 <__aeabi_uldivmod>
 8003a74:	4602      	mov	r2, r0
 8003a76:	460b      	mov	r3, r1
 8003a78:	4b61      	ldr	r3, [pc, #388]	@ (8003c00 <UART_SetConfig+0x2d4>)
 8003a7a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a7e:	095b      	lsrs	r3, r3, #5
 8003a80:	011c      	lsls	r4, r3, #4
 8003a82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a86:	2200      	movs	r2, #0
 8003a88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a8c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003a90:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003a94:	4642      	mov	r2, r8
 8003a96:	464b      	mov	r3, r9
 8003a98:	1891      	adds	r1, r2, r2
 8003a9a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003a9c:	415b      	adcs	r3, r3
 8003a9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003aa0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003aa4:	4641      	mov	r1, r8
 8003aa6:	eb12 0a01 	adds.w	sl, r2, r1
 8003aaa:	4649      	mov	r1, r9
 8003aac:	eb43 0b01 	adc.w	fp, r3, r1
 8003ab0:	f04f 0200 	mov.w	r2, #0
 8003ab4:	f04f 0300 	mov.w	r3, #0
 8003ab8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003abc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ac0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ac4:	4692      	mov	sl, r2
 8003ac6:	469b      	mov	fp, r3
 8003ac8:	4643      	mov	r3, r8
 8003aca:	eb1a 0303 	adds.w	r3, sl, r3
 8003ace:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ad2:	464b      	mov	r3, r9
 8003ad4:	eb4b 0303 	adc.w	r3, fp, r3
 8003ad8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ae8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003aec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003af0:	460b      	mov	r3, r1
 8003af2:	18db      	adds	r3, r3, r3
 8003af4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003af6:	4613      	mov	r3, r2
 8003af8:	eb42 0303 	adc.w	r3, r2, r3
 8003afc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003afe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003b02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003b06:	f7fd f86f 	bl	8000be8 <__aeabi_uldivmod>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	4611      	mov	r1, r2
 8003b10:	4b3b      	ldr	r3, [pc, #236]	@ (8003c00 <UART_SetConfig+0x2d4>)
 8003b12:	fba3 2301 	umull	r2, r3, r3, r1
 8003b16:	095b      	lsrs	r3, r3, #5
 8003b18:	2264      	movs	r2, #100	@ 0x64
 8003b1a:	fb02 f303 	mul.w	r3, r2, r3
 8003b1e:	1acb      	subs	r3, r1, r3
 8003b20:	00db      	lsls	r3, r3, #3
 8003b22:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003b26:	4b36      	ldr	r3, [pc, #216]	@ (8003c00 <UART_SetConfig+0x2d4>)
 8003b28:	fba3 2302 	umull	r2, r3, r3, r2
 8003b2c:	095b      	lsrs	r3, r3, #5
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003b34:	441c      	add	r4, r3
 8003b36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b40:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003b44:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003b48:	4642      	mov	r2, r8
 8003b4a:	464b      	mov	r3, r9
 8003b4c:	1891      	adds	r1, r2, r2
 8003b4e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003b50:	415b      	adcs	r3, r3
 8003b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003b58:	4641      	mov	r1, r8
 8003b5a:	1851      	adds	r1, r2, r1
 8003b5c:	6339      	str	r1, [r7, #48]	@ 0x30
 8003b5e:	4649      	mov	r1, r9
 8003b60:	414b      	adcs	r3, r1
 8003b62:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b64:	f04f 0200 	mov.w	r2, #0
 8003b68:	f04f 0300 	mov.w	r3, #0
 8003b6c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003b70:	4659      	mov	r1, fp
 8003b72:	00cb      	lsls	r3, r1, #3
 8003b74:	4651      	mov	r1, sl
 8003b76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b7a:	4651      	mov	r1, sl
 8003b7c:	00ca      	lsls	r2, r1, #3
 8003b7e:	4610      	mov	r0, r2
 8003b80:	4619      	mov	r1, r3
 8003b82:	4603      	mov	r3, r0
 8003b84:	4642      	mov	r2, r8
 8003b86:	189b      	adds	r3, r3, r2
 8003b88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b8c:	464b      	mov	r3, r9
 8003b8e:	460a      	mov	r2, r1
 8003b90:	eb42 0303 	adc.w	r3, r2, r3
 8003b94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003ba4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003ba8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003bac:	460b      	mov	r3, r1
 8003bae:	18db      	adds	r3, r3, r3
 8003bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	eb42 0303 	adc.w	r3, r2, r3
 8003bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003bbe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003bc2:	f7fd f811 	bl	8000be8 <__aeabi_uldivmod>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	460b      	mov	r3, r1
 8003bca:	4b0d      	ldr	r3, [pc, #52]	@ (8003c00 <UART_SetConfig+0x2d4>)
 8003bcc:	fba3 1302 	umull	r1, r3, r3, r2
 8003bd0:	095b      	lsrs	r3, r3, #5
 8003bd2:	2164      	movs	r1, #100	@ 0x64
 8003bd4:	fb01 f303 	mul.w	r3, r1, r3
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	3332      	adds	r3, #50	@ 0x32
 8003bde:	4a08      	ldr	r2, [pc, #32]	@ (8003c00 <UART_SetConfig+0x2d4>)
 8003be0:	fba2 2303 	umull	r2, r3, r2, r3
 8003be4:	095b      	lsrs	r3, r3, #5
 8003be6:	f003 0207 	and.w	r2, r3, #7
 8003bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4422      	add	r2, r4
 8003bf2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003bf4:	e106      	b.n	8003e04 <UART_SetConfig+0x4d8>
 8003bf6:	bf00      	nop
 8003bf8:	40011000 	.word	0x40011000
 8003bfc:	40011400 	.word	0x40011400
 8003c00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003c0e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003c12:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003c16:	4642      	mov	r2, r8
 8003c18:	464b      	mov	r3, r9
 8003c1a:	1891      	adds	r1, r2, r2
 8003c1c:	6239      	str	r1, [r7, #32]
 8003c1e:	415b      	adcs	r3, r3
 8003c20:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c26:	4641      	mov	r1, r8
 8003c28:	1854      	adds	r4, r2, r1
 8003c2a:	4649      	mov	r1, r9
 8003c2c:	eb43 0501 	adc.w	r5, r3, r1
 8003c30:	f04f 0200 	mov.w	r2, #0
 8003c34:	f04f 0300 	mov.w	r3, #0
 8003c38:	00eb      	lsls	r3, r5, #3
 8003c3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c3e:	00e2      	lsls	r2, r4, #3
 8003c40:	4614      	mov	r4, r2
 8003c42:	461d      	mov	r5, r3
 8003c44:	4643      	mov	r3, r8
 8003c46:	18e3      	adds	r3, r4, r3
 8003c48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c4c:	464b      	mov	r3, r9
 8003c4e:	eb45 0303 	adc.w	r3, r5, r3
 8003c52:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c62:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c66:	f04f 0200 	mov.w	r2, #0
 8003c6a:	f04f 0300 	mov.w	r3, #0
 8003c6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003c72:	4629      	mov	r1, r5
 8003c74:	008b      	lsls	r3, r1, #2
 8003c76:	4621      	mov	r1, r4
 8003c78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c7c:	4621      	mov	r1, r4
 8003c7e:	008a      	lsls	r2, r1, #2
 8003c80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003c84:	f7fc ffb0 	bl	8000be8 <__aeabi_uldivmod>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	4b60      	ldr	r3, [pc, #384]	@ (8003e10 <UART_SetConfig+0x4e4>)
 8003c8e:	fba3 2302 	umull	r2, r3, r3, r2
 8003c92:	095b      	lsrs	r3, r3, #5
 8003c94:	011c      	lsls	r4, r3, #4
 8003c96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003ca0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003ca4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003ca8:	4642      	mov	r2, r8
 8003caa:	464b      	mov	r3, r9
 8003cac:	1891      	adds	r1, r2, r2
 8003cae:	61b9      	str	r1, [r7, #24]
 8003cb0:	415b      	adcs	r3, r3
 8003cb2:	61fb      	str	r3, [r7, #28]
 8003cb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cb8:	4641      	mov	r1, r8
 8003cba:	1851      	adds	r1, r2, r1
 8003cbc:	6139      	str	r1, [r7, #16]
 8003cbe:	4649      	mov	r1, r9
 8003cc0:	414b      	adcs	r3, r1
 8003cc2:	617b      	str	r3, [r7, #20]
 8003cc4:	f04f 0200 	mov.w	r2, #0
 8003cc8:	f04f 0300 	mov.w	r3, #0
 8003ccc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cd0:	4659      	mov	r1, fp
 8003cd2:	00cb      	lsls	r3, r1, #3
 8003cd4:	4651      	mov	r1, sl
 8003cd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cda:	4651      	mov	r1, sl
 8003cdc:	00ca      	lsls	r2, r1, #3
 8003cde:	4610      	mov	r0, r2
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	4642      	mov	r2, r8
 8003ce6:	189b      	adds	r3, r3, r2
 8003ce8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003cec:	464b      	mov	r3, r9
 8003cee:	460a      	mov	r2, r1
 8003cf0:	eb42 0303 	adc.w	r3, r2, r3
 8003cf4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d02:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003d04:	f04f 0200 	mov.w	r2, #0
 8003d08:	f04f 0300 	mov.w	r3, #0
 8003d0c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003d10:	4649      	mov	r1, r9
 8003d12:	008b      	lsls	r3, r1, #2
 8003d14:	4641      	mov	r1, r8
 8003d16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d1a:	4641      	mov	r1, r8
 8003d1c:	008a      	lsls	r2, r1, #2
 8003d1e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003d22:	f7fc ff61 	bl	8000be8 <__aeabi_uldivmod>
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	4611      	mov	r1, r2
 8003d2c:	4b38      	ldr	r3, [pc, #224]	@ (8003e10 <UART_SetConfig+0x4e4>)
 8003d2e:	fba3 2301 	umull	r2, r3, r3, r1
 8003d32:	095b      	lsrs	r3, r3, #5
 8003d34:	2264      	movs	r2, #100	@ 0x64
 8003d36:	fb02 f303 	mul.w	r3, r2, r3
 8003d3a:	1acb      	subs	r3, r1, r3
 8003d3c:	011b      	lsls	r3, r3, #4
 8003d3e:	3332      	adds	r3, #50	@ 0x32
 8003d40:	4a33      	ldr	r2, [pc, #204]	@ (8003e10 <UART_SetConfig+0x4e4>)
 8003d42:	fba2 2303 	umull	r2, r3, r2, r3
 8003d46:	095b      	lsrs	r3, r3, #5
 8003d48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d4c:	441c      	add	r4, r3
 8003d4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d52:	2200      	movs	r2, #0
 8003d54:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d56:	677a      	str	r2, [r7, #116]	@ 0x74
 8003d58:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003d5c:	4642      	mov	r2, r8
 8003d5e:	464b      	mov	r3, r9
 8003d60:	1891      	adds	r1, r2, r2
 8003d62:	60b9      	str	r1, [r7, #8]
 8003d64:	415b      	adcs	r3, r3
 8003d66:	60fb      	str	r3, [r7, #12]
 8003d68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d6c:	4641      	mov	r1, r8
 8003d6e:	1851      	adds	r1, r2, r1
 8003d70:	6039      	str	r1, [r7, #0]
 8003d72:	4649      	mov	r1, r9
 8003d74:	414b      	adcs	r3, r1
 8003d76:	607b      	str	r3, [r7, #4]
 8003d78:	f04f 0200 	mov.w	r2, #0
 8003d7c:	f04f 0300 	mov.w	r3, #0
 8003d80:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d84:	4659      	mov	r1, fp
 8003d86:	00cb      	lsls	r3, r1, #3
 8003d88:	4651      	mov	r1, sl
 8003d8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d8e:	4651      	mov	r1, sl
 8003d90:	00ca      	lsls	r2, r1, #3
 8003d92:	4610      	mov	r0, r2
 8003d94:	4619      	mov	r1, r3
 8003d96:	4603      	mov	r3, r0
 8003d98:	4642      	mov	r2, r8
 8003d9a:	189b      	adds	r3, r3, r2
 8003d9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d9e:	464b      	mov	r3, r9
 8003da0:	460a      	mov	r2, r1
 8003da2:	eb42 0303 	adc.w	r3, r2, r3
 8003da6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	663b      	str	r3, [r7, #96]	@ 0x60
 8003db2:	667a      	str	r2, [r7, #100]	@ 0x64
 8003db4:	f04f 0200 	mov.w	r2, #0
 8003db8:	f04f 0300 	mov.w	r3, #0
 8003dbc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003dc0:	4649      	mov	r1, r9
 8003dc2:	008b      	lsls	r3, r1, #2
 8003dc4:	4641      	mov	r1, r8
 8003dc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dca:	4641      	mov	r1, r8
 8003dcc:	008a      	lsls	r2, r1, #2
 8003dce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003dd2:	f7fc ff09 	bl	8000be8 <__aeabi_uldivmod>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	460b      	mov	r3, r1
 8003dda:	4b0d      	ldr	r3, [pc, #52]	@ (8003e10 <UART_SetConfig+0x4e4>)
 8003ddc:	fba3 1302 	umull	r1, r3, r3, r2
 8003de0:	095b      	lsrs	r3, r3, #5
 8003de2:	2164      	movs	r1, #100	@ 0x64
 8003de4:	fb01 f303 	mul.w	r3, r1, r3
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	011b      	lsls	r3, r3, #4
 8003dec:	3332      	adds	r3, #50	@ 0x32
 8003dee:	4a08      	ldr	r2, [pc, #32]	@ (8003e10 <UART_SetConfig+0x4e4>)
 8003df0:	fba2 2303 	umull	r2, r3, r2, r3
 8003df4:	095b      	lsrs	r3, r3, #5
 8003df6:	f003 020f 	and.w	r2, r3, #15
 8003dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4422      	add	r2, r4
 8003e02:	609a      	str	r2, [r3, #8]
}
 8003e04:	bf00      	nop
 8003e06:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e10:	51eb851f 	.word	0x51eb851f

08003e14 <__cvt>:
 8003e14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e18:	ec57 6b10 	vmov	r6, r7, d0
 8003e1c:	2f00      	cmp	r7, #0
 8003e1e:	460c      	mov	r4, r1
 8003e20:	4619      	mov	r1, r3
 8003e22:	463b      	mov	r3, r7
 8003e24:	bfbb      	ittet	lt
 8003e26:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003e2a:	461f      	movlt	r7, r3
 8003e2c:	2300      	movge	r3, #0
 8003e2e:	232d      	movlt	r3, #45	@ 0x2d
 8003e30:	700b      	strb	r3, [r1, #0]
 8003e32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003e34:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003e38:	4691      	mov	r9, r2
 8003e3a:	f023 0820 	bic.w	r8, r3, #32
 8003e3e:	bfbc      	itt	lt
 8003e40:	4632      	movlt	r2, r6
 8003e42:	4616      	movlt	r6, r2
 8003e44:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003e48:	d005      	beq.n	8003e56 <__cvt+0x42>
 8003e4a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003e4e:	d100      	bne.n	8003e52 <__cvt+0x3e>
 8003e50:	3401      	adds	r4, #1
 8003e52:	2102      	movs	r1, #2
 8003e54:	e000      	b.n	8003e58 <__cvt+0x44>
 8003e56:	2103      	movs	r1, #3
 8003e58:	ab03      	add	r3, sp, #12
 8003e5a:	9301      	str	r3, [sp, #4]
 8003e5c:	ab02      	add	r3, sp, #8
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	ec47 6b10 	vmov	d0, r6, r7
 8003e64:	4653      	mov	r3, sl
 8003e66:	4622      	mov	r2, r4
 8003e68:	f000 fe3a 	bl	8004ae0 <_dtoa_r>
 8003e6c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003e70:	4605      	mov	r5, r0
 8003e72:	d119      	bne.n	8003ea8 <__cvt+0x94>
 8003e74:	f019 0f01 	tst.w	r9, #1
 8003e78:	d00e      	beq.n	8003e98 <__cvt+0x84>
 8003e7a:	eb00 0904 	add.w	r9, r0, r4
 8003e7e:	2200      	movs	r2, #0
 8003e80:	2300      	movs	r3, #0
 8003e82:	4630      	mov	r0, r6
 8003e84:	4639      	mov	r1, r7
 8003e86:	f7fc fe3f 	bl	8000b08 <__aeabi_dcmpeq>
 8003e8a:	b108      	cbz	r0, 8003e90 <__cvt+0x7c>
 8003e8c:	f8cd 900c 	str.w	r9, [sp, #12]
 8003e90:	2230      	movs	r2, #48	@ 0x30
 8003e92:	9b03      	ldr	r3, [sp, #12]
 8003e94:	454b      	cmp	r3, r9
 8003e96:	d31e      	bcc.n	8003ed6 <__cvt+0xc2>
 8003e98:	9b03      	ldr	r3, [sp, #12]
 8003e9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003e9c:	1b5b      	subs	r3, r3, r5
 8003e9e:	4628      	mov	r0, r5
 8003ea0:	6013      	str	r3, [r2, #0]
 8003ea2:	b004      	add	sp, #16
 8003ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ea8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003eac:	eb00 0904 	add.w	r9, r0, r4
 8003eb0:	d1e5      	bne.n	8003e7e <__cvt+0x6a>
 8003eb2:	7803      	ldrb	r3, [r0, #0]
 8003eb4:	2b30      	cmp	r3, #48	@ 0x30
 8003eb6:	d10a      	bne.n	8003ece <__cvt+0xba>
 8003eb8:	2200      	movs	r2, #0
 8003eba:	2300      	movs	r3, #0
 8003ebc:	4630      	mov	r0, r6
 8003ebe:	4639      	mov	r1, r7
 8003ec0:	f7fc fe22 	bl	8000b08 <__aeabi_dcmpeq>
 8003ec4:	b918      	cbnz	r0, 8003ece <__cvt+0xba>
 8003ec6:	f1c4 0401 	rsb	r4, r4, #1
 8003eca:	f8ca 4000 	str.w	r4, [sl]
 8003ece:	f8da 3000 	ldr.w	r3, [sl]
 8003ed2:	4499      	add	r9, r3
 8003ed4:	e7d3      	b.n	8003e7e <__cvt+0x6a>
 8003ed6:	1c59      	adds	r1, r3, #1
 8003ed8:	9103      	str	r1, [sp, #12]
 8003eda:	701a      	strb	r2, [r3, #0]
 8003edc:	e7d9      	b.n	8003e92 <__cvt+0x7e>

08003ede <__exponent>:
 8003ede:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ee0:	2900      	cmp	r1, #0
 8003ee2:	bfba      	itte	lt
 8003ee4:	4249      	neglt	r1, r1
 8003ee6:	232d      	movlt	r3, #45	@ 0x2d
 8003ee8:	232b      	movge	r3, #43	@ 0x2b
 8003eea:	2909      	cmp	r1, #9
 8003eec:	7002      	strb	r2, [r0, #0]
 8003eee:	7043      	strb	r3, [r0, #1]
 8003ef0:	dd29      	ble.n	8003f46 <__exponent+0x68>
 8003ef2:	f10d 0307 	add.w	r3, sp, #7
 8003ef6:	461d      	mov	r5, r3
 8003ef8:	270a      	movs	r7, #10
 8003efa:	461a      	mov	r2, r3
 8003efc:	fbb1 f6f7 	udiv	r6, r1, r7
 8003f00:	fb07 1416 	mls	r4, r7, r6, r1
 8003f04:	3430      	adds	r4, #48	@ 0x30
 8003f06:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003f0a:	460c      	mov	r4, r1
 8003f0c:	2c63      	cmp	r4, #99	@ 0x63
 8003f0e:	f103 33ff 	add.w	r3, r3, #4294967295
 8003f12:	4631      	mov	r1, r6
 8003f14:	dcf1      	bgt.n	8003efa <__exponent+0x1c>
 8003f16:	3130      	adds	r1, #48	@ 0x30
 8003f18:	1e94      	subs	r4, r2, #2
 8003f1a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003f1e:	1c41      	adds	r1, r0, #1
 8003f20:	4623      	mov	r3, r4
 8003f22:	42ab      	cmp	r3, r5
 8003f24:	d30a      	bcc.n	8003f3c <__exponent+0x5e>
 8003f26:	f10d 0309 	add.w	r3, sp, #9
 8003f2a:	1a9b      	subs	r3, r3, r2
 8003f2c:	42ac      	cmp	r4, r5
 8003f2e:	bf88      	it	hi
 8003f30:	2300      	movhi	r3, #0
 8003f32:	3302      	adds	r3, #2
 8003f34:	4403      	add	r3, r0
 8003f36:	1a18      	subs	r0, r3, r0
 8003f38:	b003      	add	sp, #12
 8003f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f3c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003f40:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003f44:	e7ed      	b.n	8003f22 <__exponent+0x44>
 8003f46:	2330      	movs	r3, #48	@ 0x30
 8003f48:	3130      	adds	r1, #48	@ 0x30
 8003f4a:	7083      	strb	r3, [r0, #2]
 8003f4c:	70c1      	strb	r1, [r0, #3]
 8003f4e:	1d03      	adds	r3, r0, #4
 8003f50:	e7f1      	b.n	8003f36 <__exponent+0x58>
	...

08003f54 <_printf_float>:
 8003f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f58:	b08d      	sub	sp, #52	@ 0x34
 8003f5a:	460c      	mov	r4, r1
 8003f5c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003f60:	4616      	mov	r6, r2
 8003f62:	461f      	mov	r7, r3
 8003f64:	4605      	mov	r5, r0
 8003f66:	f000 fcb9 	bl	80048dc <_localeconv_r>
 8003f6a:	6803      	ldr	r3, [r0, #0]
 8003f6c:	9304      	str	r3, [sp, #16]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7fc f99e 	bl	80002b0 <strlen>
 8003f74:	2300      	movs	r3, #0
 8003f76:	930a      	str	r3, [sp, #40]	@ 0x28
 8003f78:	f8d8 3000 	ldr.w	r3, [r8]
 8003f7c:	9005      	str	r0, [sp, #20]
 8003f7e:	3307      	adds	r3, #7
 8003f80:	f023 0307 	bic.w	r3, r3, #7
 8003f84:	f103 0208 	add.w	r2, r3, #8
 8003f88:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003f8c:	f8d4 b000 	ldr.w	fp, [r4]
 8003f90:	f8c8 2000 	str.w	r2, [r8]
 8003f94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003f98:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003f9c:	9307      	str	r3, [sp, #28]
 8003f9e:	f8cd 8018 	str.w	r8, [sp, #24]
 8003fa2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003fa6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003faa:	4b9c      	ldr	r3, [pc, #624]	@ (800421c <_printf_float+0x2c8>)
 8003fac:	f04f 32ff 	mov.w	r2, #4294967295
 8003fb0:	f7fc fddc 	bl	8000b6c <__aeabi_dcmpun>
 8003fb4:	bb70      	cbnz	r0, 8004014 <_printf_float+0xc0>
 8003fb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003fba:	4b98      	ldr	r3, [pc, #608]	@ (800421c <_printf_float+0x2c8>)
 8003fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8003fc0:	f7fc fdb6 	bl	8000b30 <__aeabi_dcmple>
 8003fc4:	bb30      	cbnz	r0, 8004014 <_printf_float+0xc0>
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	2300      	movs	r3, #0
 8003fca:	4640      	mov	r0, r8
 8003fcc:	4649      	mov	r1, r9
 8003fce:	f7fc fda5 	bl	8000b1c <__aeabi_dcmplt>
 8003fd2:	b110      	cbz	r0, 8003fda <_printf_float+0x86>
 8003fd4:	232d      	movs	r3, #45	@ 0x2d
 8003fd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fda:	4a91      	ldr	r2, [pc, #580]	@ (8004220 <_printf_float+0x2cc>)
 8003fdc:	4b91      	ldr	r3, [pc, #580]	@ (8004224 <_printf_float+0x2d0>)
 8003fde:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003fe2:	bf8c      	ite	hi
 8003fe4:	4690      	movhi	r8, r2
 8003fe6:	4698      	movls	r8, r3
 8003fe8:	2303      	movs	r3, #3
 8003fea:	6123      	str	r3, [r4, #16]
 8003fec:	f02b 0304 	bic.w	r3, fp, #4
 8003ff0:	6023      	str	r3, [r4, #0]
 8003ff2:	f04f 0900 	mov.w	r9, #0
 8003ff6:	9700      	str	r7, [sp, #0]
 8003ff8:	4633      	mov	r3, r6
 8003ffa:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003ffc:	4621      	mov	r1, r4
 8003ffe:	4628      	mov	r0, r5
 8004000:	f000 f9d2 	bl	80043a8 <_printf_common>
 8004004:	3001      	adds	r0, #1
 8004006:	f040 808d 	bne.w	8004124 <_printf_float+0x1d0>
 800400a:	f04f 30ff 	mov.w	r0, #4294967295
 800400e:	b00d      	add	sp, #52	@ 0x34
 8004010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004014:	4642      	mov	r2, r8
 8004016:	464b      	mov	r3, r9
 8004018:	4640      	mov	r0, r8
 800401a:	4649      	mov	r1, r9
 800401c:	f7fc fda6 	bl	8000b6c <__aeabi_dcmpun>
 8004020:	b140      	cbz	r0, 8004034 <_printf_float+0xe0>
 8004022:	464b      	mov	r3, r9
 8004024:	2b00      	cmp	r3, #0
 8004026:	bfbc      	itt	lt
 8004028:	232d      	movlt	r3, #45	@ 0x2d
 800402a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800402e:	4a7e      	ldr	r2, [pc, #504]	@ (8004228 <_printf_float+0x2d4>)
 8004030:	4b7e      	ldr	r3, [pc, #504]	@ (800422c <_printf_float+0x2d8>)
 8004032:	e7d4      	b.n	8003fde <_printf_float+0x8a>
 8004034:	6863      	ldr	r3, [r4, #4]
 8004036:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800403a:	9206      	str	r2, [sp, #24]
 800403c:	1c5a      	adds	r2, r3, #1
 800403e:	d13b      	bne.n	80040b8 <_printf_float+0x164>
 8004040:	2306      	movs	r3, #6
 8004042:	6063      	str	r3, [r4, #4]
 8004044:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004048:	2300      	movs	r3, #0
 800404a:	6022      	str	r2, [r4, #0]
 800404c:	9303      	str	r3, [sp, #12]
 800404e:	ab0a      	add	r3, sp, #40	@ 0x28
 8004050:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004054:	ab09      	add	r3, sp, #36	@ 0x24
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	6861      	ldr	r1, [r4, #4]
 800405a:	ec49 8b10 	vmov	d0, r8, r9
 800405e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004062:	4628      	mov	r0, r5
 8004064:	f7ff fed6 	bl	8003e14 <__cvt>
 8004068:	9b06      	ldr	r3, [sp, #24]
 800406a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800406c:	2b47      	cmp	r3, #71	@ 0x47
 800406e:	4680      	mov	r8, r0
 8004070:	d129      	bne.n	80040c6 <_printf_float+0x172>
 8004072:	1cc8      	adds	r0, r1, #3
 8004074:	db02      	blt.n	800407c <_printf_float+0x128>
 8004076:	6863      	ldr	r3, [r4, #4]
 8004078:	4299      	cmp	r1, r3
 800407a:	dd41      	ble.n	8004100 <_printf_float+0x1ac>
 800407c:	f1aa 0a02 	sub.w	sl, sl, #2
 8004080:	fa5f fa8a 	uxtb.w	sl, sl
 8004084:	3901      	subs	r1, #1
 8004086:	4652      	mov	r2, sl
 8004088:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800408c:	9109      	str	r1, [sp, #36]	@ 0x24
 800408e:	f7ff ff26 	bl	8003ede <__exponent>
 8004092:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004094:	1813      	adds	r3, r2, r0
 8004096:	2a01      	cmp	r2, #1
 8004098:	4681      	mov	r9, r0
 800409a:	6123      	str	r3, [r4, #16]
 800409c:	dc02      	bgt.n	80040a4 <_printf_float+0x150>
 800409e:	6822      	ldr	r2, [r4, #0]
 80040a0:	07d2      	lsls	r2, r2, #31
 80040a2:	d501      	bpl.n	80040a8 <_printf_float+0x154>
 80040a4:	3301      	adds	r3, #1
 80040a6:	6123      	str	r3, [r4, #16]
 80040a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0a2      	beq.n	8003ff6 <_printf_float+0xa2>
 80040b0:	232d      	movs	r3, #45	@ 0x2d
 80040b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040b6:	e79e      	b.n	8003ff6 <_printf_float+0xa2>
 80040b8:	9a06      	ldr	r2, [sp, #24]
 80040ba:	2a47      	cmp	r2, #71	@ 0x47
 80040bc:	d1c2      	bne.n	8004044 <_printf_float+0xf0>
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1c0      	bne.n	8004044 <_printf_float+0xf0>
 80040c2:	2301      	movs	r3, #1
 80040c4:	e7bd      	b.n	8004042 <_printf_float+0xee>
 80040c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80040ca:	d9db      	bls.n	8004084 <_printf_float+0x130>
 80040cc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80040d0:	d118      	bne.n	8004104 <_printf_float+0x1b0>
 80040d2:	2900      	cmp	r1, #0
 80040d4:	6863      	ldr	r3, [r4, #4]
 80040d6:	dd0b      	ble.n	80040f0 <_printf_float+0x19c>
 80040d8:	6121      	str	r1, [r4, #16]
 80040da:	b913      	cbnz	r3, 80040e2 <_printf_float+0x18e>
 80040dc:	6822      	ldr	r2, [r4, #0]
 80040de:	07d0      	lsls	r0, r2, #31
 80040e0:	d502      	bpl.n	80040e8 <_printf_float+0x194>
 80040e2:	3301      	adds	r3, #1
 80040e4:	440b      	add	r3, r1
 80040e6:	6123      	str	r3, [r4, #16]
 80040e8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80040ea:	f04f 0900 	mov.w	r9, #0
 80040ee:	e7db      	b.n	80040a8 <_printf_float+0x154>
 80040f0:	b913      	cbnz	r3, 80040f8 <_printf_float+0x1a4>
 80040f2:	6822      	ldr	r2, [r4, #0]
 80040f4:	07d2      	lsls	r2, r2, #31
 80040f6:	d501      	bpl.n	80040fc <_printf_float+0x1a8>
 80040f8:	3302      	adds	r3, #2
 80040fa:	e7f4      	b.n	80040e6 <_printf_float+0x192>
 80040fc:	2301      	movs	r3, #1
 80040fe:	e7f2      	b.n	80040e6 <_printf_float+0x192>
 8004100:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004104:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004106:	4299      	cmp	r1, r3
 8004108:	db05      	blt.n	8004116 <_printf_float+0x1c2>
 800410a:	6823      	ldr	r3, [r4, #0]
 800410c:	6121      	str	r1, [r4, #16]
 800410e:	07d8      	lsls	r0, r3, #31
 8004110:	d5ea      	bpl.n	80040e8 <_printf_float+0x194>
 8004112:	1c4b      	adds	r3, r1, #1
 8004114:	e7e7      	b.n	80040e6 <_printf_float+0x192>
 8004116:	2900      	cmp	r1, #0
 8004118:	bfd4      	ite	le
 800411a:	f1c1 0202 	rsble	r2, r1, #2
 800411e:	2201      	movgt	r2, #1
 8004120:	4413      	add	r3, r2
 8004122:	e7e0      	b.n	80040e6 <_printf_float+0x192>
 8004124:	6823      	ldr	r3, [r4, #0]
 8004126:	055a      	lsls	r2, r3, #21
 8004128:	d407      	bmi.n	800413a <_printf_float+0x1e6>
 800412a:	6923      	ldr	r3, [r4, #16]
 800412c:	4642      	mov	r2, r8
 800412e:	4631      	mov	r1, r6
 8004130:	4628      	mov	r0, r5
 8004132:	47b8      	blx	r7
 8004134:	3001      	adds	r0, #1
 8004136:	d12b      	bne.n	8004190 <_printf_float+0x23c>
 8004138:	e767      	b.n	800400a <_printf_float+0xb6>
 800413a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800413e:	f240 80dd 	bls.w	80042fc <_printf_float+0x3a8>
 8004142:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004146:	2200      	movs	r2, #0
 8004148:	2300      	movs	r3, #0
 800414a:	f7fc fcdd 	bl	8000b08 <__aeabi_dcmpeq>
 800414e:	2800      	cmp	r0, #0
 8004150:	d033      	beq.n	80041ba <_printf_float+0x266>
 8004152:	4a37      	ldr	r2, [pc, #220]	@ (8004230 <_printf_float+0x2dc>)
 8004154:	2301      	movs	r3, #1
 8004156:	4631      	mov	r1, r6
 8004158:	4628      	mov	r0, r5
 800415a:	47b8      	blx	r7
 800415c:	3001      	adds	r0, #1
 800415e:	f43f af54 	beq.w	800400a <_printf_float+0xb6>
 8004162:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004166:	4543      	cmp	r3, r8
 8004168:	db02      	blt.n	8004170 <_printf_float+0x21c>
 800416a:	6823      	ldr	r3, [r4, #0]
 800416c:	07d8      	lsls	r0, r3, #31
 800416e:	d50f      	bpl.n	8004190 <_printf_float+0x23c>
 8004170:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004174:	4631      	mov	r1, r6
 8004176:	4628      	mov	r0, r5
 8004178:	47b8      	blx	r7
 800417a:	3001      	adds	r0, #1
 800417c:	f43f af45 	beq.w	800400a <_printf_float+0xb6>
 8004180:	f04f 0900 	mov.w	r9, #0
 8004184:	f108 38ff 	add.w	r8, r8, #4294967295
 8004188:	f104 0a1a 	add.w	sl, r4, #26
 800418c:	45c8      	cmp	r8, r9
 800418e:	dc09      	bgt.n	80041a4 <_printf_float+0x250>
 8004190:	6823      	ldr	r3, [r4, #0]
 8004192:	079b      	lsls	r3, r3, #30
 8004194:	f100 8103 	bmi.w	800439e <_printf_float+0x44a>
 8004198:	68e0      	ldr	r0, [r4, #12]
 800419a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800419c:	4298      	cmp	r0, r3
 800419e:	bfb8      	it	lt
 80041a0:	4618      	movlt	r0, r3
 80041a2:	e734      	b.n	800400e <_printf_float+0xba>
 80041a4:	2301      	movs	r3, #1
 80041a6:	4652      	mov	r2, sl
 80041a8:	4631      	mov	r1, r6
 80041aa:	4628      	mov	r0, r5
 80041ac:	47b8      	blx	r7
 80041ae:	3001      	adds	r0, #1
 80041b0:	f43f af2b 	beq.w	800400a <_printf_float+0xb6>
 80041b4:	f109 0901 	add.w	r9, r9, #1
 80041b8:	e7e8      	b.n	800418c <_printf_float+0x238>
 80041ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041bc:	2b00      	cmp	r3, #0
 80041be:	dc39      	bgt.n	8004234 <_printf_float+0x2e0>
 80041c0:	4a1b      	ldr	r2, [pc, #108]	@ (8004230 <_printf_float+0x2dc>)
 80041c2:	2301      	movs	r3, #1
 80041c4:	4631      	mov	r1, r6
 80041c6:	4628      	mov	r0, r5
 80041c8:	47b8      	blx	r7
 80041ca:	3001      	adds	r0, #1
 80041cc:	f43f af1d 	beq.w	800400a <_printf_float+0xb6>
 80041d0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80041d4:	ea59 0303 	orrs.w	r3, r9, r3
 80041d8:	d102      	bne.n	80041e0 <_printf_float+0x28c>
 80041da:	6823      	ldr	r3, [r4, #0]
 80041dc:	07d9      	lsls	r1, r3, #31
 80041de:	d5d7      	bpl.n	8004190 <_printf_float+0x23c>
 80041e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80041e4:	4631      	mov	r1, r6
 80041e6:	4628      	mov	r0, r5
 80041e8:	47b8      	blx	r7
 80041ea:	3001      	adds	r0, #1
 80041ec:	f43f af0d 	beq.w	800400a <_printf_float+0xb6>
 80041f0:	f04f 0a00 	mov.w	sl, #0
 80041f4:	f104 0b1a 	add.w	fp, r4, #26
 80041f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041fa:	425b      	negs	r3, r3
 80041fc:	4553      	cmp	r3, sl
 80041fe:	dc01      	bgt.n	8004204 <_printf_float+0x2b0>
 8004200:	464b      	mov	r3, r9
 8004202:	e793      	b.n	800412c <_printf_float+0x1d8>
 8004204:	2301      	movs	r3, #1
 8004206:	465a      	mov	r2, fp
 8004208:	4631      	mov	r1, r6
 800420a:	4628      	mov	r0, r5
 800420c:	47b8      	blx	r7
 800420e:	3001      	adds	r0, #1
 8004210:	f43f aefb 	beq.w	800400a <_printf_float+0xb6>
 8004214:	f10a 0a01 	add.w	sl, sl, #1
 8004218:	e7ee      	b.n	80041f8 <_printf_float+0x2a4>
 800421a:	bf00      	nop
 800421c:	7fefffff 	.word	0x7fefffff
 8004220:	0800674c 	.word	0x0800674c
 8004224:	08006748 	.word	0x08006748
 8004228:	08006754 	.word	0x08006754
 800422c:	08006750 	.word	0x08006750
 8004230:	08006758 	.word	0x08006758
 8004234:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004236:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800423a:	4553      	cmp	r3, sl
 800423c:	bfa8      	it	ge
 800423e:	4653      	movge	r3, sl
 8004240:	2b00      	cmp	r3, #0
 8004242:	4699      	mov	r9, r3
 8004244:	dc36      	bgt.n	80042b4 <_printf_float+0x360>
 8004246:	f04f 0b00 	mov.w	fp, #0
 800424a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800424e:	f104 021a 	add.w	r2, r4, #26
 8004252:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004254:	9306      	str	r3, [sp, #24]
 8004256:	eba3 0309 	sub.w	r3, r3, r9
 800425a:	455b      	cmp	r3, fp
 800425c:	dc31      	bgt.n	80042c2 <_printf_float+0x36e>
 800425e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004260:	459a      	cmp	sl, r3
 8004262:	dc3a      	bgt.n	80042da <_printf_float+0x386>
 8004264:	6823      	ldr	r3, [r4, #0]
 8004266:	07da      	lsls	r2, r3, #31
 8004268:	d437      	bmi.n	80042da <_printf_float+0x386>
 800426a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800426c:	ebaa 0903 	sub.w	r9, sl, r3
 8004270:	9b06      	ldr	r3, [sp, #24]
 8004272:	ebaa 0303 	sub.w	r3, sl, r3
 8004276:	4599      	cmp	r9, r3
 8004278:	bfa8      	it	ge
 800427a:	4699      	movge	r9, r3
 800427c:	f1b9 0f00 	cmp.w	r9, #0
 8004280:	dc33      	bgt.n	80042ea <_printf_float+0x396>
 8004282:	f04f 0800 	mov.w	r8, #0
 8004286:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800428a:	f104 0b1a 	add.w	fp, r4, #26
 800428e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004290:	ebaa 0303 	sub.w	r3, sl, r3
 8004294:	eba3 0309 	sub.w	r3, r3, r9
 8004298:	4543      	cmp	r3, r8
 800429a:	f77f af79 	ble.w	8004190 <_printf_float+0x23c>
 800429e:	2301      	movs	r3, #1
 80042a0:	465a      	mov	r2, fp
 80042a2:	4631      	mov	r1, r6
 80042a4:	4628      	mov	r0, r5
 80042a6:	47b8      	blx	r7
 80042a8:	3001      	adds	r0, #1
 80042aa:	f43f aeae 	beq.w	800400a <_printf_float+0xb6>
 80042ae:	f108 0801 	add.w	r8, r8, #1
 80042b2:	e7ec      	b.n	800428e <_printf_float+0x33a>
 80042b4:	4642      	mov	r2, r8
 80042b6:	4631      	mov	r1, r6
 80042b8:	4628      	mov	r0, r5
 80042ba:	47b8      	blx	r7
 80042bc:	3001      	adds	r0, #1
 80042be:	d1c2      	bne.n	8004246 <_printf_float+0x2f2>
 80042c0:	e6a3      	b.n	800400a <_printf_float+0xb6>
 80042c2:	2301      	movs	r3, #1
 80042c4:	4631      	mov	r1, r6
 80042c6:	4628      	mov	r0, r5
 80042c8:	9206      	str	r2, [sp, #24]
 80042ca:	47b8      	blx	r7
 80042cc:	3001      	adds	r0, #1
 80042ce:	f43f ae9c 	beq.w	800400a <_printf_float+0xb6>
 80042d2:	9a06      	ldr	r2, [sp, #24]
 80042d4:	f10b 0b01 	add.w	fp, fp, #1
 80042d8:	e7bb      	b.n	8004252 <_printf_float+0x2fe>
 80042da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80042de:	4631      	mov	r1, r6
 80042e0:	4628      	mov	r0, r5
 80042e2:	47b8      	blx	r7
 80042e4:	3001      	adds	r0, #1
 80042e6:	d1c0      	bne.n	800426a <_printf_float+0x316>
 80042e8:	e68f      	b.n	800400a <_printf_float+0xb6>
 80042ea:	9a06      	ldr	r2, [sp, #24]
 80042ec:	464b      	mov	r3, r9
 80042ee:	4442      	add	r2, r8
 80042f0:	4631      	mov	r1, r6
 80042f2:	4628      	mov	r0, r5
 80042f4:	47b8      	blx	r7
 80042f6:	3001      	adds	r0, #1
 80042f8:	d1c3      	bne.n	8004282 <_printf_float+0x32e>
 80042fa:	e686      	b.n	800400a <_printf_float+0xb6>
 80042fc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004300:	f1ba 0f01 	cmp.w	sl, #1
 8004304:	dc01      	bgt.n	800430a <_printf_float+0x3b6>
 8004306:	07db      	lsls	r3, r3, #31
 8004308:	d536      	bpl.n	8004378 <_printf_float+0x424>
 800430a:	2301      	movs	r3, #1
 800430c:	4642      	mov	r2, r8
 800430e:	4631      	mov	r1, r6
 8004310:	4628      	mov	r0, r5
 8004312:	47b8      	blx	r7
 8004314:	3001      	adds	r0, #1
 8004316:	f43f ae78 	beq.w	800400a <_printf_float+0xb6>
 800431a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800431e:	4631      	mov	r1, r6
 8004320:	4628      	mov	r0, r5
 8004322:	47b8      	blx	r7
 8004324:	3001      	adds	r0, #1
 8004326:	f43f ae70 	beq.w	800400a <_printf_float+0xb6>
 800432a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800432e:	2200      	movs	r2, #0
 8004330:	2300      	movs	r3, #0
 8004332:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004336:	f7fc fbe7 	bl	8000b08 <__aeabi_dcmpeq>
 800433a:	b9c0      	cbnz	r0, 800436e <_printf_float+0x41a>
 800433c:	4653      	mov	r3, sl
 800433e:	f108 0201 	add.w	r2, r8, #1
 8004342:	4631      	mov	r1, r6
 8004344:	4628      	mov	r0, r5
 8004346:	47b8      	blx	r7
 8004348:	3001      	adds	r0, #1
 800434a:	d10c      	bne.n	8004366 <_printf_float+0x412>
 800434c:	e65d      	b.n	800400a <_printf_float+0xb6>
 800434e:	2301      	movs	r3, #1
 8004350:	465a      	mov	r2, fp
 8004352:	4631      	mov	r1, r6
 8004354:	4628      	mov	r0, r5
 8004356:	47b8      	blx	r7
 8004358:	3001      	adds	r0, #1
 800435a:	f43f ae56 	beq.w	800400a <_printf_float+0xb6>
 800435e:	f108 0801 	add.w	r8, r8, #1
 8004362:	45d0      	cmp	r8, sl
 8004364:	dbf3      	blt.n	800434e <_printf_float+0x3fa>
 8004366:	464b      	mov	r3, r9
 8004368:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800436c:	e6df      	b.n	800412e <_printf_float+0x1da>
 800436e:	f04f 0800 	mov.w	r8, #0
 8004372:	f104 0b1a 	add.w	fp, r4, #26
 8004376:	e7f4      	b.n	8004362 <_printf_float+0x40e>
 8004378:	2301      	movs	r3, #1
 800437a:	4642      	mov	r2, r8
 800437c:	e7e1      	b.n	8004342 <_printf_float+0x3ee>
 800437e:	2301      	movs	r3, #1
 8004380:	464a      	mov	r2, r9
 8004382:	4631      	mov	r1, r6
 8004384:	4628      	mov	r0, r5
 8004386:	47b8      	blx	r7
 8004388:	3001      	adds	r0, #1
 800438a:	f43f ae3e 	beq.w	800400a <_printf_float+0xb6>
 800438e:	f108 0801 	add.w	r8, r8, #1
 8004392:	68e3      	ldr	r3, [r4, #12]
 8004394:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004396:	1a5b      	subs	r3, r3, r1
 8004398:	4543      	cmp	r3, r8
 800439a:	dcf0      	bgt.n	800437e <_printf_float+0x42a>
 800439c:	e6fc      	b.n	8004198 <_printf_float+0x244>
 800439e:	f04f 0800 	mov.w	r8, #0
 80043a2:	f104 0919 	add.w	r9, r4, #25
 80043a6:	e7f4      	b.n	8004392 <_printf_float+0x43e>

080043a8 <_printf_common>:
 80043a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043ac:	4616      	mov	r6, r2
 80043ae:	4698      	mov	r8, r3
 80043b0:	688a      	ldr	r2, [r1, #8]
 80043b2:	690b      	ldr	r3, [r1, #16]
 80043b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80043b8:	4293      	cmp	r3, r2
 80043ba:	bfb8      	it	lt
 80043bc:	4613      	movlt	r3, r2
 80043be:	6033      	str	r3, [r6, #0]
 80043c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80043c4:	4607      	mov	r7, r0
 80043c6:	460c      	mov	r4, r1
 80043c8:	b10a      	cbz	r2, 80043ce <_printf_common+0x26>
 80043ca:	3301      	adds	r3, #1
 80043cc:	6033      	str	r3, [r6, #0]
 80043ce:	6823      	ldr	r3, [r4, #0]
 80043d0:	0699      	lsls	r1, r3, #26
 80043d2:	bf42      	ittt	mi
 80043d4:	6833      	ldrmi	r3, [r6, #0]
 80043d6:	3302      	addmi	r3, #2
 80043d8:	6033      	strmi	r3, [r6, #0]
 80043da:	6825      	ldr	r5, [r4, #0]
 80043dc:	f015 0506 	ands.w	r5, r5, #6
 80043e0:	d106      	bne.n	80043f0 <_printf_common+0x48>
 80043e2:	f104 0a19 	add.w	sl, r4, #25
 80043e6:	68e3      	ldr	r3, [r4, #12]
 80043e8:	6832      	ldr	r2, [r6, #0]
 80043ea:	1a9b      	subs	r3, r3, r2
 80043ec:	42ab      	cmp	r3, r5
 80043ee:	dc26      	bgt.n	800443e <_printf_common+0x96>
 80043f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80043f4:	6822      	ldr	r2, [r4, #0]
 80043f6:	3b00      	subs	r3, #0
 80043f8:	bf18      	it	ne
 80043fa:	2301      	movne	r3, #1
 80043fc:	0692      	lsls	r2, r2, #26
 80043fe:	d42b      	bmi.n	8004458 <_printf_common+0xb0>
 8004400:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004404:	4641      	mov	r1, r8
 8004406:	4638      	mov	r0, r7
 8004408:	47c8      	blx	r9
 800440a:	3001      	adds	r0, #1
 800440c:	d01e      	beq.n	800444c <_printf_common+0xa4>
 800440e:	6823      	ldr	r3, [r4, #0]
 8004410:	6922      	ldr	r2, [r4, #16]
 8004412:	f003 0306 	and.w	r3, r3, #6
 8004416:	2b04      	cmp	r3, #4
 8004418:	bf02      	ittt	eq
 800441a:	68e5      	ldreq	r5, [r4, #12]
 800441c:	6833      	ldreq	r3, [r6, #0]
 800441e:	1aed      	subeq	r5, r5, r3
 8004420:	68a3      	ldr	r3, [r4, #8]
 8004422:	bf0c      	ite	eq
 8004424:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004428:	2500      	movne	r5, #0
 800442a:	4293      	cmp	r3, r2
 800442c:	bfc4      	itt	gt
 800442e:	1a9b      	subgt	r3, r3, r2
 8004430:	18ed      	addgt	r5, r5, r3
 8004432:	2600      	movs	r6, #0
 8004434:	341a      	adds	r4, #26
 8004436:	42b5      	cmp	r5, r6
 8004438:	d11a      	bne.n	8004470 <_printf_common+0xc8>
 800443a:	2000      	movs	r0, #0
 800443c:	e008      	b.n	8004450 <_printf_common+0xa8>
 800443e:	2301      	movs	r3, #1
 8004440:	4652      	mov	r2, sl
 8004442:	4641      	mov	r1, r8
 8004444:	4638      	mov	r0, r7
 8004446:	47c8      	blx	r9
 8004448:	3001      	adds	r0, #1
 800444a:	d103      	bne.n	8004454 <_printf_common+0xac>
 800444c:	f04f 30ff 	mov.w	r0, #4294967295
 8004450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004454:	3501      	adds	r5, #1
 8004456:	e7c6      	b.n	80043e6 <_printf_common+0x3e>
 8004458:	18e1      	adds	r1, r4, r3
 800445a:	1c5a      	adds	r2, r3, #1
 800445c:	2030      	movs	r0, #48	@ 0x30
 800445e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004462:	4422      	add	r2, r4
 8004464:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004468:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800446c:	3302      	adds	r3, #2
 800446e:	e7c7      	b.n	8004400 <_printf_common+0x58>
 8004470:	2301      	movs	r3, #1
 8004472:	4622      	mov	r2, r4
 8004474:	4641      	mov	r1, r8
 8004476:	4638      	mov	r0, r7
 8004478:	47c8      	blx	r9
 800447a:	3001      	adds	r0, #1
 800447c:	d0e6      	beq.n	800444c <_printf_common+0xa4>
 800447e:	3601      	adds	r6, #1
 8004480:	e7d9      	b.n	8004436 <_printf_common+0x8e>
	...

08004484 <_printf_i>:
 8004484:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004488:	7e0f      	ldrb	r7, [r1, #24]
 800448a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800448c:	2f78      	cmp	r7, #120	@ 0x78
 800448e:	4691      	mov	r9, r2
 8004490:	4680      	mov	r8, r0
 8004492:	460c      	mov	r4, r1
 8004494:	469a      	mov	sl, r3
 8004496:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800449a:	d807      	bhi.n	80044ac <_printf_i+0x28>
 800449c:	2f62      	cmp	r7, #98	@ 0x62
 800449e:	d80a      	bhi.n	80044b6 <_printf_i+0x32>
 80044a0:	2f00      	cmp	r7, #0
 80044a2:	f000 80d1 	beq.w	8004648 <_printf_i+0x1c4>
 80044a6:	2f58      	cmp	r7, #88	@ 0x58
 80044a8:	f000 80b8 	beq.w	800461c <_printf_i+0x198>
 80044ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80044b4:	e03a      	b.n	800452c <_printf_i+0xa8>
 80044b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80044ba:	2b15      	cmp	r3, #21
 80044bc:	d8f6      	bhi.n	80044ac <_printf_i+0x28>
 80044be:	a101      	add	r1, pc, #4	@ (adr r1, 80044c4 <_printf_i+0x40>)
 80044c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044c4:	0800451d 	.word	0x0800451d
 80044c8:	08004531 	.word	0x08004531
 80044cc:	080044ad 	.word	0x080044ad
 80044d0:	080044ad 	.word	0x080044ad
 80044d4:	080044ad 	.word	0x080044ad
 80044d8:	080044ad 	.word	0x080044ad
 80044dc:	08004531 	.word	0x08004531
 80044e0:	080044ad 	.word	0x080044ad
 80044e4:	080044ad 	.word	0x080044ad
 80044e8:	080044ad 	.word	0x080044ad
 80044ec:	080044ad 	.word	0x080044ad
 80044f0:	0800462f 	.word	0x0800462f
 80044f4:	0800455b 	.word	0x0800455b
 80044f8:	080045e9 	.word	0x080045e9
 80044fc:	080044ad 	.word	0x080044ad
 8004500:	080044ad 	.word	0x080044ad
 8004504:	08004651 	.word	0x08004651
 8004508:	080044ad 	.word	0x080044ad
 800450c:	0800455b 	.word	0x0800455b
 8004510:	080044ad 	.word	0x080044ad
 8004514:	080044ad 	.word	0x080044ad
 8004518:	080045f1 	.word	0x080045f1
 800451c:	6833      	ldr	r3, [r6, #0]
 800451e:	1d1a      	adds	r2, r3, #4
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	6032      	str	r2, [r6, #0]
 8004524:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004528:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800452c:	2301      	movs	r3, #1
 800452e:	e09c      	b.n	800466a <_printf_i+0x1e6>
 8004530:	6833      	ldr	r3, [r6, #0]
 8004532:	6820      	ldr	r0, [r4, #0]
 8004534:	1d19      	adds	r1, r3, #4
 8004536:	6031      	str	r1, [r6, #0]
 8004538:	0606      	lsls	r6, r0, #24
 800453a:	d501      	bpl.n	8004540 <_printf_i+0xbc>
 800453c:	681d      	ldr	r5, [r3, #0]
 800453e:	e003      	b.n	8004548 <_printf_i+0xc4>
 8004540:	0645      	lsls	r5, r0, #25
 8004542:	d5fb      	bpl.n	800453c <_printf_i+0xb8>
 8004544:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004548:	2d00      	cmp	r5, #0
 800454a:	da03      	bge.n	8004554 <_printf_i+0xd0>
 800454c:	232d      	movs	r3, #45	@ 0x2d
 800454e:	426d      	negs	r5, r5
 8004550:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004554:	4858      	ldr	r0, [pc, #352]	@ (80046b8 <_printf_i+0x234>)
 8004556:	230a      	movs	r3, #10
 8004558:	e011      	b.n	800457e <_printf_i+0xfa>
 800455a:	6821      	ldr	r1, [r4, #0]
 800455c:	6833      	ldr	r3, [r6, #0]
 800455e:	0608      	lsls	r0, r1, #24
 8004560:	f853 5b04 	ldr.w	r5, [r3], #4
 8004564:	d402      	bmi.n	800456c <_printf_i+0xe8>
 8004566:	0649      	lsls	r1, r1, #25
 8004568:	bf48      	it	mi
 800456a:	b2ad      	uxthmi	r5, r5
 800456c:	2f6f      	cmp	r7, #111	@ 0x6f
 800456e:	4852      	ldr	r0, [pc, #328]	@ (80046b8 <_printf_i+0x234>)
 8004570:	6033      	str	r3, [r6, #0]
 8004572:	bf14      	ite	ne
 8004574:	230a      	movne	r3, #10
 8004576:	2308      	moveq	r3, #8
 8004578:	2100      	movs	r1, #0
 800457a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800457e:	6866      	ldr	r6, [r4, #4]
 8004580:	60a6      	str	r6, [r4, #8]
 8004582:	2e00      	cmp	r6, #0
 8004584:	db05      	blt.n	8004592 <_printf_i+0x10e>
 8004586:	6821      	ldr	r1, [r4, #0]
 8004588:	432e      	orrs	r6, r5
 800458a:	f021 0104 	bic.w	r1, r1, #4
 800458e:	6021      	str	r1, [r4, #0]
 8004590:	d04b      	beq.n	800462a <_printf_i+0x1a6>
 8004592:	4616      	mov	r6, r2
 8004594:	fbb5 f1f3 	udiv	r1, r5, r3
 8004598:	fb03 5711 	mls	r7, r3, r1, r5
 800459c:	5dc7      	ldrb	r7, [r0, r7]
 800459e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80045a2:	462f      	mov	r7, r5
 80045a4:	42bb      	cmp	r3, r7
 80045a6:	460d      	mov	r5, r1
 80045a8:	d9f4      	bls.n	8004594 <_printf_i+0x110>
 80045aa:	2b08      	cmp	r3, #8
 80045ac:	d10b      	bne.n	80045c6 <_printf_i+0x142>
 80045ae:	6823      	ldr	r3, [r4, #0]
 80045b0:	07df      	lsls	r7, r3, #31
 80045b2:	d508      	bpl.n	80045c6 <_printf_i+0x142>
 80045b4:	6923      	ldr	r3, [r4, #16]
 80045b6:	6861      	ldr	r1, [r4, #4]
 80045b8:	4299      	cmp	r1, r3
 80045ba:	bfde      	ittt	le
 80045bc:	2330      	movle	r3, #48	@ 0x30
 80045be:	f806 3c01 	strble.w	r3, [r6, #-1]
 80045c2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80045c6:	1b92      	subs	r2, r2, r6
 80045c8:	6122      	str	r2, [r4, #16]
 80045ca:	f8cd a000 	str.w	sl, [sp]
 80045ce:	464b      	mov	r3, r9
 80045d0:	aa03      	add	r2, sp, #12
 80045d2:	4621      	mov	r1, r4
 80045d4:	4640      	mov	r0, r8
 80045d6:	f7ff fee7 	bl	80043a8 <_printf_common>
 80045da:	3001      	adds	r0, #1
 80045dc:	d14a      	bne.n	8004674 <_printf_i+0x1f0>
 80045de:	f04f 30ff 	mov.w	r0, #4294967295
 80045e2:	b004      	add	sp, #16
 80045e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045e8:	6823      	ldr	r3, [r4, #0]
 80045ea:	f043 0320 	orr.w	r3, r3, #32
 80045ee:	6023      	str	r3, [r4, #0]
 80045f0:	4832      	ldr	r0, [pc, #200]	@ (80046bc <_printf_i+0x238>)
 80045f2:	2778      	movs	r7, #120	@ 0x78
 80045f4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80045f8:	6823      	ldr	r3, [r4, #0]
 80045fa:	6831      	ldr	r1, [r6, #0]
 80045fc:	061f      	lsls	r7, r3, #24
 80045fe:	f851 5b04 	ldr.w	r5, [r1], #4
 8004602:	d402      	bmi.n	800460a <_printf_i+0x186>
 8004604:	065f      	lsls	r7, r3, #25
 8004606:	bf48      	it	mi
 8004608:	b2ad      	uxthmi	r5, r5
 800460a:	6031      	str	r1, [r6, #0]
 800460c:	07d9      	lsls	r1, r3, #31
 800460e:	bf44      	itt	mi
 8004610:	f043 0320 	orrmi.w	r3, r3, #32
 8004614:	6023      	strmi	r3, [r4, #0]
 8004616:	b11d      	cbz	r5, 8004620 <_printf_i+0x19c>
 8004618:	2310      	movs	r3, #16
 800461a:	e7ad      	b.n	8004578 <_printf_i+0xf4>
 800461c:	4826      	ldr	r0, [pc, #152]	@ (80046b8 <_printf_i+0x234>)
 800461e:	e7e9      	b.n	80045f4 <_printf_i+0x170>
 8004620:	6823      	ldr	r3, [r4, #0]
 8004622:	f023 0320 	bic.w	r3, r3, #32
 8004626:	6023      	str	r3, [r4, #0]
 8004628:	e7f6      	b.n	8004618 <_printf_i+0x194>
 800462a:	4616      	mov	r6, r2
 800462c:	e7bd      	b.n	80045aa <_printf_i+0x126>
 800462e:	6833      	ldr	r3, [r6, #0]
 8004630:	6825      	ldr	r5, [r4, #0]
 8004632:	6961      	ldr	r1, [r4, #20]
 8004634:	1d18      	adds	r0, r3, #4
 8004636:	6030      	str	r0, [r6, #0]
 8004638:	062e      	lsls	r6, r5, #24
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	d501      	bpl.n	8004642 <_printf_i+0x1be>
 800463e:	6019      	str	r1, [r3, #0]
 8004640:	e002      	b.n	8004648 <_printf_i+0x1c4>
 8004642:	0668      	lsls	r0, r5, #25
 8004644:	d5fb      	bpl.n	800463e <_printf_i+0x1ba>
 8004646:	8019      	strh	r1, [r3, #0]
 8004648:	2300      	movs	r3, #0
 800464a:	6123      	str	r3, [r4, #16]
 800464c:	4616      	mov	r6, r2
 800464e:	e7bc      	b.n	80045ca <_printf_i+0x146>
 8004650:	6833      	ldr	r3, [r6, #0]
 8004652:	1d1a      	adds	r2, r3, #4
 8004654:	6032      	str	r2, [r6, #0]
 8004656:	681e      	ldr	r6, [r3, #0]
 8004658:	6862      	ldr	r2, [r4, #4]
 800465a:	2100      	movs	r1, #0
 800465c:	4630      	mov	r0, r6
 800465e:	f7fb fdd7 	bl	8000210 <memchr>
 8004662:	b108      	cbz	r0, 8004668 <_printf_i+0x1e4>
 8004664:	1b80      	subs	r0, r0, r6
 8004666:	6060      	str	r0, [r4, #4]
 8004668:	6863      	ldr	r3, [r4, #4]
 800466a:	6123      	str	r3, [r4, #16]
 800466c:	2300      	movs	r3, #0
 800466e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004672:	e7aa      	b.n	80045ca <_printf_i+0x146>
 8004674:	6923      	ldr	r3, [r4, #16]
 8004676:	4632      	mov	r2, r6
 8004678:	4649      	mov	r1, r9
 800467a:	4640      	mov	r0, r8
 800467c:	47d0      	blx	sl
 800467e:	3001      	adds	r0, #1
 8004680:	d0ad      	beq.n	80045de <_printf_i+0x15a>
 8004682:	6823      	ldr	r3, [r4, #0]
 8004684:	079b      	lsls	r3, r3, #30
 8004686:	d413      	bmi.n	80046b0 <_printf_i+0x22c>
 8004688:	68e0      	ldr	r0, [r4, #12]
 800468a:	9b03      	ldr	r3, [sp, #12]
 800468c:	4298      	cmp	r0, r3
 800468e:	bfb8      	it	lt
 8004690:	4618      	movlt	r0, r3
 8004692:	e7a6      	b.n	80045e2 <_printf_i+0x15e>
 8004694:	2301      	movs	r3, #1
 8004696:	4632      	mov	r2, r6
 8004698:	4649      	mov	r1, r9
 800469a:	4640      	mov	r0, r8
 800469c:	47d0      	blx	sl
 800469e:	3001      	adds	r0, #1
 80046a0:	d09d      	beq.n	80045de <_printf_i+0x15a>
 80046a2:	3501      	adds	r5, #1
 80046a4:	68e3      	ldr	r3, [r4, #12]
 80046a6:	9903      	ldr	r1, [sp, #12]
 80046a8:	1a5b      	subs	r3, r3, r1
 80046aa:	42ab      	cmp	r3, r5
 80046ac:	dcf2      	bgt.n	8004694 <_printf_i+0x210>
 80046ae:	e7eb      	b.n	8004688 <_printf_i+0x204>
 80046b0:	2500      	movs	r5, #0
 80046b2:	f104 0619 	add.w	r6, r4, #25
 80046b6:	e7f5      	b.n	80046a4 <_printf_i+0x220>
 80046b8:	0800675a 	.word	0x0800675a
 80046bc:	0800676b 	.word	0x0800676b

080046c0 <std>:
 80046c0:	2300      	movs	r3, #0
 80046c2:	b510      	push	{r4, lr}
 80046c4:	4604      	mov	r4, r0
 80046c6:	e9c0 3300 	strd	r3, r3, [r0]
 80046ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80046ce:	6083      	str	r3, [r0, #8]
 80046d0:	8181      	strh	r1, [r0, #12]
 80046d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80046d4:	81c2      	strh	r2, [r0, #14]
 80046d6:	6183      	str	r3, [r0, #24]
 80046d8:	4619      	mov	r1, r3
 80046da:	2208      	movs	r2, #8
 80046dc:	305c      	adds	r0, #92	@ 0x5c
 80046de:	f000 f8f4 	bl	80048ca <memset>
 80046e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004718 <std+0x58>)
 80046e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80046e6:	4b0d      	ldr	r3, [pc, #52]	@ (800471c <std+0x5c>)
 80046e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80046ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004720 <std+0x60>)
 80046ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80046ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004724 <std+0x64>)
 80046f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80046f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004728 <std+0x68>)
 80046f4:	6224      	str	r4, [r4, #32]
 80046f6:	429c      	cmp	r4, r3
 80046f8:	d006      	beq.n	8004708 <std+0x48>
 80046fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80046fe:	4294      	cmp	r4, r2
 8004700:	d002      	beq.n	8004708 <std+0x48>
 8004702:	33d0      	adds	r3, #208	@ 0xd0
 8004704:	429c      	cmp	r4, r3
 8004706:	d105      	bne.n	8004714 <std+0x54>
 8004708:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800470c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004710:	f000 b958 	b.w	80049c4 <__retarget_lock_init_recursive>
 8004714:	bd10      	pop	{r4, pc}
 8004716:	bf00      	nop
 8004718:	08004845 	.word	0x08004845
 800471c:	08004867 	.word	0x08004867
 8004720:	0800489f 	.word	0x0800489f
 8004724:	080048c3 	.word	0x080048c3
 8004728:	200002a0 	.word	0x200002a0

0800472c <stdio_exit_handler>:
 800472c:	4a02      	ldr	r2, [pc, #8]	@ (8004738 <stdio_exit_handler+0xc>)
 800472e:	4903      	ldr	r1, [pc, #12]	@ (800473c <stdio_exit_handler+0x10>)
 8004730:	4803      	ldr	r0, [pc, #12]	@ (8004740 <stdio_exit_handler+0x14>)
 8004732:	f000 b869 	b.w	8004808 <_fwalk_sglue>
 8004736:	bf00      	nop
 8004738:	20000010 	.word	0x20000010
 800473c:	0800607d 	.word	0x0800607d
 8004740:	20000020 	.word	0x20000020

08004744 <cleanup_stdio>:
 8004744:	6841      	ldr	r1, [r0, #4]
 8004746:	4b0c      	ldr	r3, [pc, #48]	@ (8004778 <cleanup_stdio+0x34>)
 8004748:	4299      	cmp	r1, r3
 800474a:	b510      	push	{r4, lr}
 800474c:	4604      	mov	r4, r0
 800474e:	d001      	beq.n	8004754 <cleanup_stdio+0x10>
 8004750:	f001 fc94 	bl	800607c <_fflush_r>
 8004754:	68a1      	ldr	r1, [r4, #8]
 8004756:	4b09      	ldr	r3, [pc, #36]	@ (800477c <cleanup_stdio+0x38>)
 8004758:	4299      	cmp	r1, r3
 800475a:	d002      	beq.n	8004762 <cleanup_stdio+0x1e>
 800475c:	4620      	mov	r0, r4
 800475e:	f001 fc8d 	bl	800607c <_fflush_r>
 8004762:	68e1      	ldr	r1, [r4, #12]
 8004764:	4b06      	ldr	r3, [pc, #24]	@ (8004780 <cleanup_stdio+0x3c>)
 8004766:	4299      	cmp	r1, r3
 8004768:	d004      	beq.n	8004774 <cleanup_stdio+0x30>
 800476a:	4620      	mov	r0, r4
 800476c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004770:	f001 bc84 	b.w	800607c <_fflush_r>
 8004774:	bd10      	pop	{r4, pc}
 8004776:	bf00      	nop
 8004778:	200002a0 	.word	0x200002a0
 800477c:	20000308 	.word	0x20000308
 8004780:	20000370 	.word	0x20000370

08004784 <global_stdio_init.part.0>:
 8004784:	b510      	push	{r4, lr}
 8004786:	4b0b      	ldr	r3, [pc, #44]	@ (80047b4 <global_stdio_init.part.0+0x30>)
 8004788:	4c0b      	ldr	r4, [pc, #44]	@ (80047b8 <global_stdio_init.part.0+0x34>)
 800478a:	4a0c      	ldr	r2, [pc, #48]	@ (80047bc <global_stdio_init.part.0+0x38>)
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	4620      	mov	r0, r4
 8004790:	2200      	movs	r2, #0
 8004792:	2104      	movs	r1, #4
 8004794:	f7ff ff94 	bl	80046c0 <std>
 8004798:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800479c:	2201      	movs	r2, #1
 800479e:	2109      	movs	r1, #9
 80047a0:	f7ff ff8e 	bl	80046c0 <std>
 80047a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80047a8:	2202      	movs	r2, #2
 80047aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047ae:	2112      	movs	r1, #18
 80047b0:	f7ff bf86 	b.w	80046c0 <std>
 80047b4:	200003d8 	.word	0x200003d8
 80047b8:	200002a0 	.word	0x200002a0
 80047bc:	0800472d 	.word	0x0800472d

080047c0 <__sfp_lock_acquire>:
 80047c0:	4801      	ldr	r0, [pc, #4]	@ (80047c8 <__sfp_lock_acquire+0x8>)
 80047c2:	f000 b900 	b.w	80049c6 <__retarget_lock_acquire_recursive>
 80047c6:	bf00      	nop
 80047c8:	200003e1 	.word	0x200003e1

080047cc <__sfp_lock_release>:
 80047cc:	4801      	ldr	r0, [pc, #4]	@ (80047d4 <__sfp_lock_release+0x8>)
 80047ce:	f000 b8fb 	b.w	80049c8 <__retarget_lock_release_recursive>
 80047d2:	bf00      	nop
 80047d4:	200003e1 	.word	0x200003e1

080047d8 <__sinit>:
 80047d8:	b510      	push	{r4, lr}
 80047da:	4604      	mov	r4, r0
 80047dc:	f7ff fff0 	bl	80047c0 <__sfp_lock_acquire>
 80047e0:	6a23      	ldr	r3, [r4, #32]
 80047e2:	b11b      	cbz	r3, 80047ec <__sinit+0x14>
 80047e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047e8:	f7ff bff0 	b.w	80047cc <__sfp_lock_release>
 80047ec:	4b04      	ldr	r3, [pc, #16]	@ (8004800 <__sinit+0x28>)
 80047ee:	6223      	str	r3, [r4, #32]
 80047f0:	4b04      	ldr	r3, [pc, #16]	@ (8004804 <__sinit+0x2c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1f5      	bne.n	80047e4 <__sinit+0xc>
 80047f8:	f7ff ffc4 	bl	8004784 <global_stdio_init.part.0>
 80047fc:	e7f2      	b.n	80047e4 <__sinit+0xc>
 80047fe:	bf00      	nop
 8004800:	08004745 	.word	0x08004745
 8004804:	200003d8 	.word	0x200003d8

08004808 <_fwalk_sglue>:
 8004808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800480c:	4607      	mov	r7, r0
 800480e:	4688      	mov	r8, r1
 8004810:	4614      	mov	r4, r2
 8004812:	2600      	movs	r6, #0
 8004814:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004818:	f1b9 0901 	subs.w	r9, r9, #1
 800481c:	d505      	bpl.n	800482a <_fwalk_sglue+0x22>
 800481e:	6824      	ldr	r4, [r4, #0]
 8004820:	2c00      	cmp	r4, #0
 8004822:	d1f7      	bne.n	8004814 <_fwalk_sglue+0xc>
 8004824:	4630      	mov	r0, r6
 8004826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800482a:	89ab      	ldrh	r3, [r5, #12]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d907      	bls.n	8004840 <_fwalk_sglue+0x38>
 8004830:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004834:	3301      	adds	r3, #1
 8004836:	d003      	beq.n	8004840 <_fwalk_sglue+0x38>
 8004838:	4629      	mov	r1, r5
 800483a:	4638      	mov	r0, r7
 800483c:	47c0      	blx	r8
 800483e:	4306      	orrs	r6, r0
 8004840:	3568      	adds	r5, #104	@ 0x68
 8004842:	e7e9      	b.n	8004818 <_fwalk_sglue+0x10>

08004844 <__sread>:
 8004844:	b510      	push	{r4, lr}
 8004846:	460c      	mov	r4, r1
 8004848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800484c:	f000 f86c 	bl	8004928 <_read_r>
 8004850:	2800      	cmp	r0, #0
 8004852:	bfab      	itete	ge
 8004854:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004856:	89a3      	ldrhlt	r3, [r4, #12]
 8004858:	181b      	addge	r3, r3, r0
 800485a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800485e:	bfac      	ite	ge
 8004860:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004862:	81a3      	strhlt	r3, [r4, #12]
 8004864:	bd10      	pop	{r4, pc}

08004866 <__swrite>:
 8004866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800486a:	461f      	mov	r7, r3
 800486c:	898b      	ldrh	r3, [r1, #12]
 800486e:	05db      	lsls	r3, r3, #23
 8004870:	4605      	mov	r5, r0
 8004872:	460c      	mov	r4, r1
 8004874:	4616      	mov	r6, r2
 8004876:	d505      	bpl.n	8004884 <__swrite+0x1e>
 8004878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800487c:	2302      	movs	r3, #2
 800487e:	2200      	movs	r2, #0
 8004880:	f000 f840 	bl	8004904 <_lseek_r>
 8004884:	89a3      	ldrh	r3, [r4, #12]
 8004886:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800488a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800488e:	81a3      	strh	r3, [r4, #12]
 8004890:	4632      	mov	r2, r6
 8004892:	463b      	mov	r3, r7
 8004894:	4628      	mov	r0, r5
 8004896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800489a:	f000 b857 	b.w	800494c <_write_r>

0800489e <__sseek>:
 800489e:	b510      	push	{r4, lr}
 80048a0:	460c      	mov	r4, r1
 80048a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048a6:	f000 f82d 	bl	8004904 <_lseek_r>
 80048aa:	1c43      	adds	r3, r0, #1
 80048ac:	89a3      	ldrh	r3, [r4, #12]
 80048ae:	bf15      	itete	ne
 80048b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80048b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80048b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80048ba:	81a3      	strheq	r3, [r4, #12]
 80048bc:	bf18      	it	ne
 80048be:	81a3      	strhne	r3, [r4, #12]
 80048c0:	bd10      	pop	{r4, pc}

080048c2 <__sclose>:
 80048c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048c6:	f000 b80d 	b.w	80048e4 <_close_r>

080048ca <memset>:
 80048ca:	4402      	add	r2, r0
 80048cc:	4603      	mov	r3, r0
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d100      	bne.n	80048d4 <memset+0xa>
 80048d2:	4770      	bx	lr
 80048d4:	f803 1b01 	strb.w	r1, [r3], #1
 80048d8:	e7f9      	b.n	80048ce <memset+0x4>
	...

080048dc <_localeconv_r>:
 80048dc:	4800      	ldr	r0, [pc, #0]	@ (80048e0 <_localeconv_r+0x4>)
 80048de:	4770      	bx	lr
 80048e0:	2000015c 	.word	0x2000015c

080048e4 <_close_r>:
 80048e4:	b538      	push	{r3, r4, r5, lr}
 80048e6:	4d06      	ldr	r5, [pc, #24]	@ (8004900 <_close_r+0x1c>)
 80048e8:	2300      	movs	r3, #0
 80048ea:	4604      	mov	r4, r0
 80048ec:	4608      	mov	r0, r1
 80048ee:	602b      	str	r3, [r5, #0]
 80048f0:	f7fc fed2 	bl	8001698 <_close>
 80048f4:	1c43      	adds	r3, r0, #1
 80048f6:	d102      	bne.n	80048fe <_close_r+0x1a>
 80048f8:	682b      	ldr	r3, [r5, #0]
 80048fa:	b103      	cbz	r3, 80048fe <_close_r+0x1a>
 80048fc:	6023      	str	r3, [r4, #0]
 80048fe:	bd38      	pop	{r3, r4, r5, pc}
 8004900:	200003dc 	.word	0x200003dc

08004904 <_lseek_r>:
 8004904:	b538      	push	{r3, r4, r5, lr}
 8004906:	4d07      	ldr	r5, [pc, #28]	@ (8004924 <_lseek_r+0x20>)
 8004908:	4604      	mov	r4, r0
 800490a:	4608      	mov	r0, r1
 800490c:	4611      	mov	r1, r2
 800490e:	2200      	movs	r2, #0
 8004910:	602a      	str	r2, [r5, #0]
 8004912:	461a      	mov	r2, r3
 8004914:	f7fc fee7 	bl	80016e6 <_lseek>
 8004918:	1c43      	adds	r3, r0, #1
 800491a:	d102      	bne.n	8004922 <_lseek_r+0x1e>
 800491c:	682b      	ldr	r3, [r5, #0]
 800491e:	b103      	cbz	r3, 8004922 <_lseek_r+0x1e>
 8004920:	6023      	str	r3, [r4, #0]
 8004922:	bd38      	pop	{r3, r4, r5, pc}
 8004924:	200003dc 	.word	0x200003dc

08004928 <_read_r>:
 8004928:	b538      	push	{r3, r4, r5, lr}
 800492a:	4d07      	ldr	r5, [pc, #28]	@ (8004948 <_read_r+0x20>)
 800492c:	4604      	mov	r4, r0
 800492e:	4608      	mov	r0, r1
 8004930:	4611      	mov	r1, r2
 8004932:	2200      	movs	r2, #0
 8004934:	602a      	str	r2, [r5, #0]
 8004936:	461a      	mov	r2, r3
 8004938:	f7fc fe75 	bl	8001626 <_read>
 800493c:	1c43      	adds	r3, r0, #1
 800493e:	d102      	bne.n	8004946 <_read_r+0x1e>
 8004940:	682b      	ldr	r3, [r5, #0]
 8004942:	b103      	cbz	r3, 8004946 <_read_r+0x1e>
 8004944:	6023      	str	r3, [r4, #0]
 8004946:	bd38      	pop	{r3, r4, r5, pc}
 8004948:	200003dc 	.word	0x200003dc

0800494c <_write_r>:
 800494c:	b538      	push	{r3, r4, r5, lr}
 800494e:	4d07      	ldr	r5, [pc, #28]	@ (800496c <_write_r+0x20>)
 8004950:	4604      	mov	r4, r0
 8004952:	4608      	mov	r0, r1
 8004954:	4611      	mov	r1, r2
 8004956:	2200      	movs	r2, #0
 8004958:	602a      	str	r2, [r5, #0]
 800495a:	461a      	mov	r2, r3
 800495c:	f7fc fe80 	bl	8001660 <_write>
 8004960:	1c43      	adds	r3, r0, #1
 8004962:	d102      	bne.n	800496a <_write_r+0x1e>
 8004964:	682b      	ldr	r3, [r5, #0]
 8004966:	b103      	cbz	r3, 800496a <_write_r+0x1e>
 8004968:	6023      	str	r3, [r4, #0]
 800496a:	bd38      	pop	{r3, r4, r5, pc}
 800496c:	200003dc 	.word	0x200003dc

08004970 <__errno>:
 8004970:	4b01      	ldr	r3, [pc, #4]	@ (8004978 <__errno+0x8>)
 8004972:	6818      	ldr	r0, [r3, #0]
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	2000001c 	.word	0x2000001c

0800497c <__libc_init_array>:
 800497c:	b570      	push	{r4, r5, r6, lr}
 800497e:	4d0d      	ldr	r5, [pc, #52]	@ (80049b4 <__libc_init_array+0x38>)
 8004980:	4c0d      	ldr	r4, [pc, #52]	@ (80049b8 <__libc_init_array+0x3c>)
 8004982:	1b64      	subs	r4, r4, r5
 8004984:	10a4      	asrs	r4, r4, #2
 8004986:	2600      	movs	r6, #0
 8004988:	42a6      	cmp	r6, r4
 800498a:	d109      	bne.n	80049a0 <__libc_init_array+0x24>
 800498c:	4d0b      	ldr	r5, [pc, #44]	@ (80049bc <__libc_init_array+0x40>)
 800498e:	4c0c      	ldr	r4, [pc, #48]	@ (80049c0 <__libc_init_array+0x44>)
 8004990:	f001 fec2 	bl	8006718 <_init>
 8004994:	1b64      	subs	r4, r4, r5
 8004996:	10a4      	asrs	r4, r4, #2
 8004998:	2600      	movs	r6, #0
 800499a:	42a6      	cmp	r6, r4
 800499c:	d105      	bne.n	80049aa <__libc_init_array+0x2e>
 800499e:	bd70      	pop	{r4, r5, r6, pc}
 80049a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80049a4:	4798      	blx	r3
 80049a6:	3601      	adds	r6, #1
 80049a8:	e7ee      	b.n	8004988 <__libc_init_array+0xc>
 80049aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80049ae:	4798      	blx	r3
 80049b0:	3601      	adds	r6, #1
 80049b2:	e7f2      	b.n	800499a <__libc_init_array+0x1e>
 80049b4:	08006ac4 	.word	0x08006ac4
 80049b8:	08006ac4 	.word	0x08006ac4
 80049bc:	08006ac4 	.word	0x08006ac4
 80049c0:	08006ac8 	.word	0x08006ac8

080049c4 <__retarget_lock_init_recursive>:
 80049c4:	4770      	bx	lr

080049c6 <__retarget_lock_acquire_recursive>:
 80049c6:	4770      	bx	lr

080049c8 <__retarget_lock_release_recursive>:
 80049c8:	4770      	bx	lr

080049ca <quorem>:
 80049ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ce:	6903      	ldr	r3, [r0, #16]
 80049d0:	690c      	ldr	r4, [r1, #16]
 80049d2:	42a3      	cmp	r3, r4
 80049d4:	4607      	mov	r7, r0
 80049d6:	db7e      	blt.n	8004ad6 <quorem+0x10c>
 80049d8:	3c01      	subs	r4, #1
 80049da:	f101 0814 	add.w	r8, r1, #20
 80049de:	00a3      	lsls	r3, r4, #2
 80049e0:	f100 0514 	add.w	r5, r0, #20
 80049e4:	9300      	str	r3, [sp, #0]
 80049e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80049ea:	9301      	str	r3, [sp, #4]
 80049ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80049f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80049f4:	3301      	adds	r3, #1
 80049f6:	429a      	cmp	r2, r3
 80049f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80049fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8004a00:	d32e      	bcc.n	8004a60 <quorem+0x96>
 8004a02:	f04f 0a00 	mov.w	sl, #0
 8004a06:	46c4      	mov	ip, r8
 8004a08:	46ae      	mov	lr, r5
 8004a0a:	46d3      	mov	fp, sl
 8004a0c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004a10:	b298      	uxth	r0, r3
 8004a12:	fb06 a000 	mla	r0, r6, r0, sl
 8004a16:	0c02      	lsrs	r2, r0, #16
 8004a18:	0c1b      	lsrs	r3, r3, #16
 8004a1a:	fb06 2303 	mla	r3, r6, r3, r2
 8004a1e:	f8de 2000 	ldr.w	r2, [lr]
 8004a22:	b280      	uxth	r0, r0
 8004a24:	b292      	uxth	r2, r2
 8004a26:	1a12      	subs	r2, r2, r0
 8004a28:	445a      	add	r2, fp
 8004a2a:	f8de 0000 	ldr.w	r0, [lr]
 8004a2e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004a38:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004a3c:	b292      	uxth	r2, r2
 8004a3e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004a42:	45e1      	cmp	r9, ip
 8004a44:	f84e 2b04 	str.w	r2, [lr], #4
 8004a48:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004a4c:	d2de      	bcs.n	8004a0c <quorem+0x42>
 8004a4e:	9b00      	ldr	r3, [sp, #0]
 8004a50:	58eb      	ldr	r3, [r5, r3]
 8004a52:	b92b      	cbnz	r3, 8004a60 <quorem+0x96>
 8004a54:	9b01      	ldr	r3, [sp, #4]
 8004a56:	3b04      	subs	r3, #4
 8004a58:	429d      	cmp	r5, r3
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	d32f      	bcc.n	8004abe <quorem+0xf4>
 8004a5e:	613c      	str	r4, [r7, #16]
 8004a60:	4638      	mov	r0, r7
 8004a62:	f001 f97f 	bl	8005d64 <__mcmp>
 8004a66:	2800      	cmp	r0, #0
 8004a68:	db25      	blt.n	8004ab6 <quorem+0xec>
 8004a6a:	4629      	mov	r1, r5
 8004a6c:	2000      	movs	r0, #0
 8004a6e:	f858 2b04 	ldr.w	r2, [r8], #4
 8004a72:	f8d1 c000 	ldr.w	ip, [r1]
 8004a76:	fa1f fe82 	uxth.w	lr, r2
 8004a7a:	fa1f f38c 	uxth.w	r3, ip
 8004a7e:	eba3 030e 	sub.w	r3, r3, lr
 8004a82:	4403      	add	r3, r0
 8004a84:	0c12      	lsrs	r2, r2, #16
 8004a86:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004a8a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a94:	45c1      	cmp	r9, r8
 8004a96:	f841 3b04 	str.w	r3, [r1], #4
 8004a9a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004a9e:	d2e6      	bcs.n	8004a6e <quorem+0xa4>
 8004aa0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004aa4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004aa8:	b922      	cbnz	r2, 8004ab4 <quorem+0xea>
 8004aaa:	3b04      	subs	r3, #4
 8004aac:	429d      	cmp	r5, r3
 8004aae:	461a      	mov	r2, r3
 8004ab0:	d30b      	bcc.n	8004aca <quorem+0x100>
 8004ab2:	613c      	str	r4, [r7, #16]
 8004ab4:	3601      	adds	r6, #1
 8004ab6:	4630      	mov	r0, r6
 8004ab8:	b003      	add	sp, #12
 8004aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004abe:	6812      	ldr	r2, [r2, #0]
 8004ac0:	3b04      	subs	r3, #4
 8004ac2:	2a00      	cmp	r2, #0
 8004ac4:	d1cb      	bne.n	8004a5e <quorem+0x94>
 8004ac6:	3c01      	subs	r4, #1
 8004ac8:	e7c6      	b.n	8004a58 <quorem+0x8e>
 8004aca:	6812      	ldr	r2, [r2, #0]
 8004acc:	3b04      	subs	r3, #4
 8004ace:	2a00      	cmp	r2, #0
 8004ad0:	d1ef      	bne.n	8004ab2 <quorem+0xe8>
 8004ad2:	3c01      	subs	r4, #1
 8004ad4:	e7ea      	b.n	8004aac <quorem+0xe2>
 8004ad6:	2000      	movs	r0, #0
 8004ad8:	e7ee      	b.n	8004ab8 <quorem+0xee>
 8004ada:	0000      	movs	r0, r0
 8004adc:	0000      	movs	r0, r0
	...

08004ae0 <_dtoa_r>:
 8004ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ae4:	69c7      	ldr	r7, [r0, #28]
 8004ae6:	b097      	sub	sp, #92	@ 0x5c
 8004ae8:	ed8d 0b04 	vstr	d0, [sp, #16]
 8004aec:	ec55 4b10 	vmov	r4, r5, d0
 8004af0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8004af2:	9107      	str	r1, [sp, #28]
 8004af4:	4681      	mov	r9, r0
 8004af6:	920c      	str	r2, [sp, #48]	@ 0x30
 8004af8:	9311      	str	r3, [sp, #68]	@ 0x44
 8004afa:	b97f      	cbnz	r7, 8004b1c <_dtoa_r+0x3c>
 8004afc:	2010      	movs	r0, #16
 8004afe:	f000 fe09 	bl	8005714 <malloc>
 8004b02:	4602      	mov	r2, r0
 8004b04:	f8c9 001c 	str.w	r0, [r9, #28]
 8004b08:	b920      	cbnz	r0, 8004b14 <_dtoa_r+0x34>
 8004b0a:	4ba9      	ldr	r3, [pc, #676]	@ (8004db0 <_dtoa_r+0x2d0>)
 8004b0c:	21ef      	movs	r1, #239	@ 0xef
 8004b0e:	48a9      	ldr	r0, [pc, #676]	@ (8004db4 <_dtoa_r+0x2d4>)
 8004b10:	f001 fafa 	bl	8006108 <__assert_func>
 8004b14:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004b18:	6007      	str	r7, [r0, #0]
 8004b1a:	60c7      	str	r7, [r0, #12]
 8004b1c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004b20:	6819      	ldr	r1, [r3, #0]
 8004b22:	b159      	cbz	r1, 8004b3c <_dtoa_r+0x5c>
 8004b24:	685a      	ldr	r2, [r3, #4]
 8004b26:	604a      	str	r2, [r1, #4]
 8004b28:	2301      	movs	r3, #1
 8004b2a:	4093      	lsls	r3, r2
 8004b2c:	608b      	str	r3, [r1, #8]
 8004b2e:	4648      	mov	r0, r9
 8004b30:	f000 fee6 	bl	8005900 <_Bfree>
 8004b34:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	601a      	str	r2, [r3, #0]
 8004b3c:	1e2b      	subs	r3, r5, #0
 8004b3e:	bfb9      	ittee	lt
 8004b40:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004b44:	9305      	strlt	r3, [sp, #20]
 8004b46:	2300      	movge	r3, #0
 8004b48:	6033      	strge	r3, [r6, #0]
 8004b4a:	9f05      	ldr	r7, [sp, #20]
 8004b4c:	4b9a      	ldr	r3, [pc, #616]	@ (8004db8 <_dtoa_r+0x2d8>)
 8004b4e:	bfbc      	itt	lt
 8004b50:	2201      	movlt	r2, #1
 8004b52:	6032      	strlt	r2, [r6, #0]
 8004b54:	43bb      	bics	r3, r7
 8004b56:	d112      	bne.n	8004b7e <_dtoa_r+0x9e>
 8004b58:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004b5a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004b5e:	6013      	str	r3, [r2, #0]
 8004b60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004b64:	4323      	orrs	r3, r4
 8004b66:	f000 855a 	beq.w	800561e <_dtoa_r+0xb3e>
 8004b6a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004b6c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8004dcc <_dtoa_r+0x2ec>
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 855c 	beq.w	800562e <_dtoa_r+0xb4e>
 8004b76:	f10a 0303 	add.w	r3, sl, #3
 8004b7a:	f000 bd56 	b.w	800562a <_dtoa_r+0xb4a>
 8004b7e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8004b82:	2200      	movs	r2, #0
 8004b84:	ec51 0b17 	vmov	r0, r1, d7
 8004b88:	2300      	movs	r3, #0
 8004b8a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8004b8e:	f7fb ffbb 	bl	8000b08 <__aeabi_dcmpeq>
 8004b92:	4680      	mov	r8, r0
 8004b94:	b158      	cbz	r0, 8004bae <_dtoa_r+0xce>
 8004b96:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004b98:	2301      	movs	r3, #1
 8004b9a:	6013      	str	r3, [r2, #0]
 8004b9c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004b9e:	b113      	cbz	r3, 8004ba6 <_dtoa_r+0xc6>
 8004ba0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8004ba2:	4b86      	ldr	r3, [pc, #536]	@ (8004dbc <_dtoa_r+0x2dc>)
 8004ba4:	6013      	str	r3, [r2, #0]
 8004ba6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8004dd0 <_dtoa_r+0x2f0>
 8004baa:	f000 bd40 	b.w	800562e <_dtoa_r+0xb4e>
 8004bae:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8004bb2:	aa14      	add	r2, sp, #80	@ 0x50
 8004bb4:	a915      	add	r1, sp, #84	@ 0x54
 8004bb6:	4648      	mov	r0, r9
 8004bb8:	f001 f984 	bl	8005ec4 <__d2b>
 8004bbc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004bc0:	9002      	str	r0, [sp, #8]
 8004bc2:	2e00      	cmp	r6, #0
 8004bc4:	d078      	beq.n	8004cb8 <_dtoa_r+0x1d8>
 8004bc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004bc8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8004bcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bd0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004bd4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004bd8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004bdc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004be0:	4619      	mov	r1, r3
 8004be2:	2200      	movs	r2, #0
 8004be4:	4b76      	ldr	r3, [pc, #472]	@ (8004dc0 <_dtoa_r+0x2e0>)
 8004be6:	f7fb fb6f 	bl	80002c8 <__aeabi_dsub>
 8004bea:	a36b      	add	r3, pc, #428	@ (adr r3, 8004d98 <_dtoa_r+0x2b8>)
 8004bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf0:	f7fb fd22 	bl	8000638 <__aeabi_dmul>
 8004bf4:	a36a      	add	r3, pc, #424	@ (adr r3, 8004da0 <_dtoa_r+0x2c0>)
 8004bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfa:	f7fb fb67 	bl	80002cc <__adddf3>
 8004bfe:	4604      	mov	r4, r0
 8004c00:	4630      	mov	r0, r6
 8004c02:	460d      	mov	r5, r1
 8004c04:	f7fb fcae 	bl	8000564 <__aeabi_i2d>
 8004c08:	a367      	add	r3, pc, #412	@ (adr r3, 8004da8 <_dtoa_r+0x2c8>)
 8004c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0e:	f7fb fd13 	bl	8000638 <__aeabi_dmul>
 8004c12:	4602      	mov	r2, r0
 8004c14:	460b      	mov	r3, r1
 8004c16:	4620      	mov	r0, r4
 8004c18:	4629      	mov	r1, r5
 8004c1a:	f7fb fb57 	bl	80002cc <__adddf3>
 8004c1e:	4604      	mov	r4, r0
 8004c20:	460d      	mov	r5, r1
 8004c22:	f7fb ffb9 	bl	8000b98 <__aeabi_d2iz>
 8004c26:	2200      	movs	r2, #0
 8004c28:	4607      	mov	r7, r0
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	4620      	mov	r0, r4
 8004c2e:	4629      	mov	r1, r5
 8004c30:	f7fb ff74 	bl	8000b1c <__aeabi_dcmplt>
 8004c34:	b140      	cbz	r0, 8004c48 <_dtoa_r+0x168>
 8004c36:	4638      	mov	r0, r7
 8004c38:	f7fb fc94 	bl	8000564 <__aeabi_i2d>
 8004c3c:	4622      	mov	r2, r4
 8004c3e:	462b      	mov	r3, r5
 8004c40:	f7fb ff62 	bl	8000b08 <__aeabi_dcmpeq>
 8004c44:	b900      	cbnz	r0, 8004c48 <_dtoa_r+0x168>
 8004c46:	3f01      	subs	r7, #1
 8004c48:	2f16      	cmp	r7, #22
 8004c4a:	d852      	bhi.n	8004cf2 <_dtoa_r+0x212>
 8004c4c:	4b5d      	ldr	r3, [pc, #372]	@ (8004dc4 <_dtoa_r+0x2e4>)
 8004c4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c56:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004c5a:	f7fb ff5f 	bl	8000b1c <__aeabi_dcmplt>
 8004c5e:	2800      	cmp	r0, #0
 8004c60:	d049      	beq.n	8004cf6 <_dtoa_r+0x216>
 8004c62:	3f01      	subs	r7, #1
 8004c64:	2300      	movs	r3, #0
 8004c66:	9310      	str	r3, [sp, #64]	@ 0x40
 8004c68:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004c6a:	1b9b      	subs	r3, r3, r6
 8004c6c:	1e5a      	subs	r2, r3, #1
 8004c6e:	bf45      	ittet	mi
 8004c70:	f1c3 0301 	rsbmi	r3, r3, #1
 8004c74:	9300      	strmi	r3, [sp, #0]
 8004c76:	2300      	movpl	r3, #0
 8004c78:	2300      	movmi	r3, #0
 8004c7a:	9206      	str	r2, [sp, #24]
 8004c7c:	bf54      	ite	pl
 8004c7e:	9300      	strpl	r3, [sp, #0]
 8004c80:	9306      	strmi	r3, [sp, #24]
 8004c82:	2f00      	cmp	r7, #0
 8004c84:	db39      	blt.n	8004cfa <_dtoa_r+0x21a>
 8004c86:	9b06      	ldr	r3, [sp, #24]
 8004c88:	970d      	str	r7, [sp, #52]	@ 0x34
 8004c8a:	443b      	add	r3, r7
 8004c8c:	9306      	str	r3, [sp, #24]
 8004c8e:	2300      	movs	r3, #0
 8004c90:	9308      	str	r3, [sp, #32]
 8004c92:	9b07      	ldr	r3, [sp, #28]
 8004c94:	2b09      	cmp	r3, #9
 8004c96:	d863      	bhi.n	8004d60 <_dtoa_r+0x280>
 8004c98:	2b05      	cmp	r3, #5
 8004c9a:	bfc4      	itt	gt
 8004c9c:	3b04      	subgt	r3, #4
 8004c9e:	9307      	strgt	r3, [sp, #28]
 8004ca0:	9b07      	ldr	r3, [sp, #28]
 8004ca2:	f1a3 0302 	sub.w	r3, r3, #2
 8004ca6:	bfcc      	ite	gt
 8004ca8:	2400      	movgt	r4, #0
 8004caa:	2401      	movle	r4, #1
 8004cac:	2b03      	cmp	r3, #3
 8004cae:	d863      	bhi.n	8004d78 <_dtoa_r+0x298>
 8004cb0:	e8df f003 	tbb	[pc, r3]
 8004cb4:	2b375452 	.word	0x2b375452
 8004cb8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004cbc:	441e      	add	r6, r3
 8004cbe:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004cc2:	2b20      	cmp	r3, #32
 8004cc4:	bfc1      	itttt	gt
 8004cc6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004cca:	409f      	lslgt	r7, r3
 8004ccc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004cd0:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004cd4:	bfd6      	itet	le
 8004cd6:	f1c3 0320 	rsble	r3, r3, #32
 8004cda:	ea47 0003 	orrgt.w	r0, r7, r3
 8004cde:	fa04 f003 	lslle.w	r0, r4, r3
 8004ce2:	f7fb fc2f 	bl	8000544 <__aeabi_ui2d>
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004cec:	3e01      	subs	r6, #1
 8004cee:	9212      	str	r2, [sp, #72]	@ 0x48
 8004cf0:	e776      	b.n	8004be0 <_dtoa_r+0x100>
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e7b7      	b.n	8004c66 <_dtoa_r+0x186>
 8004cf6:	9010      	str	r0, [sp, #64]	@ 0x40
 8004cf8:	e7b6      	b.n	8004c68 <_dtoa_r+0x188>
 8004cfa:	9b00      	ldr	r3, [sp, #0]
 8004cfc:	1bdb      	subs	r3, r3, r7
 8004cfe:	9300      	str	r3, [sp, #0]
 8004d00:	427b      	negs	r3, r7
 8004d02:	9308      	str	r3, [sp, #32]
 8004d04:	2300      	movs	r3, #0
 8004d06:	930d      	str	r3, [sp, #52]	@ 0x34
 8004d08:	e7c3      	b.n	8004c92 <_dtoa_r+0x1b2>
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004d10:	eb07 0b03 	add.w	fp, r7, r3
 8004d14:	f10b 0301 	add.w	r3, fp, #1
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	9303      	str	r3, [sp, #12]
 8004d1c:	bfb8      	it	lt
 8004d1e:	2301      	movlt	r3, #1
 8004d20:	e006      	b.n	8004d30 <_dtoa_r+0x250>
 8004d22:	2301      	movs	r3, #1
 8004d24:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	dd28      	ble.n	8004d7e <_dtoa_r+0x29e>
 8004d2c:	469b      	mov	fp, r3
 8004d2e:	9303      	str	r3, [sp, #12]
 8004d30:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8004d34:	2100      	movs	r1, #0
 8004d36:	2204      	movs	r2, #4
 8004d38:	f102 0514 	add.w	r5, r2, #20
 8004d3c:	429d      	cmp	r5, r3
 8004d3e:	d926      	bls.n	8004d8e <_dtoa_r+0x2ae>
 8004d40:	6041      	str	r1, [r0, #4]
 8004d42:	4648      	mov	r0, r9
 8004d44:	f000 fd9c 	bl	8005880 <_Balloc>
 8004d48:	4682      	mov	sl, r0
 8004d4a:	2800      	cmp	r0, #0
 8004d4c:	d142      	bne.n	8004dd4 <_dtoa_r+0x2f4>
 8004d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8004dc8 <_dtoa_r+0x2e8>)
 8004d50:	4602      	mov	r2, r0
 8004d52:	f240 11af 	movw	r1, #431	@ 0x1af
 8004d56:	e6da      	b.n	8004b0e <_dtoa_r+0x2e>
 8004d58:	2300      	movs	r3, #0
 8004d5a:	e7e3      	b.n	8004d24 <_dtoa_r+0x244>
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	e7d5      	b.n	8004d0c <_dtoa_r+0x22c>
 8004d60:	2401      	movs	r4, #1
 8004d62:	2300      	movs	r3, #0
 8004d64:	9307      	str	r3, [sp, #28]
 8004d66:	9409      	str	r4, [sp, #36]	@ 0x24
 8004d68:	f04f 3bff 	mov.w	fp, #4294967295
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f8cd b00c 	str.w	fp, [sp, #12]
 8004d72:	2312      	movs	r3, #18
 8004d74:	920c      	str	r2, [sp, #48]	@ 0x30
 8004d76:	e7db      	b.n	8004d30 <_dtoa_r+0x250>
 8004d78:	2301      	movs	r3, #1
 8004d7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d7c:	e7f4      	b.n	8004d68 <_dtoa_r+0x288>
 8004d7e:	f04f 0b01 	mov.w	fp, #1
 8004d82:	f8cd b00c 	str.w	fp, [sp, #12]
 8004d86:	465b      	mov	r3, fp
 8004d88:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8004d8c:	e7d0      	b.n	8004d30 <_dtoa_r+0x250>
 8004d8e:	3101      	adds	r1, #1
 8004d90:	0052      	lsls	r2, r2, #1
 8004d92:	e7d1      	b.n	8004d38 <_dtoa_r+0x258>
 8004d94:	f3af 8000 	nop.w
 8004d98:	636f4361 	.word	0x636f4361
 8004d9c:	3fd287a7 	.word	0x3fd287a7
 8004da0:	8b60c8b3 	.word	0x8b60c8b3
 8004da4:	3fc68a28 	.word	0x3fc68a28
 8004da8:	509f79fb 	.word	0x509f79fb
 8004dac:	3fd34413 	.word	0x3fd34413
 8004db0:	08006789 	.word	0x08006789
 8004db4:	080067a0 	.word	0x080067a0
 8004db8:	7ff00000 	.word	0x7ff00000
 8004dbc:	08006759 	.word	0x08006759
 8004dc0:	3ff80000 	.word	0x3ff80000
 8004dc4:	080068f0 	.word	0x080068f0
 8004dc8:	080067f8 	.word	0x080067f8
 8004dcc:	08006785 	.word	0x08006785
 8004dd0:	08006758 	.word	0x08006758
 8004dd4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004dd8:	6018      	str	r0, [r3, #0]
 8004dda:	9b03      	ldr	r3, [sp, #12]
 8004ddc:	2b0e      	cmp	r3, #14
 8004dde:	f200 80a1 	bhi.w	8004f24 <_dtoa_r+0x444>
 8004de2:	2c00      	cmp	r4, #0
 8004de4:	f000 809e 	beq.w	8004f24 <_dtoa_r+0x444>
 8004de8:	2f00      	cmp	r7, #0
 8004dea:	dd33      	ble.n	8004e54 <_dtoa_r+0x374>
 8004dec:	4b9c      	ldr	r3, [pc, #624]	@ (8005060 <_dtoa_r+0x580>)
 8004dee:	f007 020f 	and.w	r2, r7, #15
 8004df2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004df6:	ed93 7b00 	vldr	d7, [r3]
 8004dfa:	05f8      	lsls	r0, r7, #23
 8004dfc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8004e00:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004e04:	d516      	bpl.n	8004e34 <_dtoa_r+0x354>
 8004e06:	4b97      	ldr	r3, [pc, #604]	@ (8005064 <_dtoa_r+0x584>)
 8004e08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004e0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004e10:	f7fb fd3c 	bl	800088c <__aeabi_ddiv>
 8004e14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e18:	f004 040f 	and.w	r4, r4, #15
 8004e1c:	2603      	movs	r6, #3
 8004e1e:	4d91      	ldr	r5, [pc, #580]	@ (8005064 <_dtoa_r+0x584>)
 8004e20:	b954      	cbnz	r4, 8004e38 <_dtoa_r+0x358>
 8004e22:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004e26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e2a:	f7fb fd2f 	bl	800088c <__aeabi_ddiv>
 8004e2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e32:	e028      	b.n	8004e86 <_dtoa_r+0x3a6>
 8004e34:	2602      	movs	r6, #2
 8004e36:	e7f2      	b.n	8004e1e <_dtoa_r+0x33e>
 8004e38:	07e1      	lsls	r1, r4, #31
 8004e3a:	d508      	bpl.n	8004e4e <_dtoa_r+0x36e>
 8004e3c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004e40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004e44:	f7fb fbf8 	bl	8000638 <__aeabi_dmul>
 8004e48:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004e4c:	3601      	adds	r6, #1
 8004e4e:	1064      	asrs	r4, r4, #1
 8004e50:	3508      	adds	r5, #8
 8004e52:	e7e5      	b.n	8004e20 <_dtoa_r+0x340>
 8004e54:	f000 80af 	beq.w	8004fb6 <_dtoa_r+0x4d6>
 8004e58:	427c      	negs	r4, r7
 8004e5a:	4b81      	ldr	r3, [pc, #516]	@ (8005060 <_dtoa_r+0x580>)
 8004e5c:	4d81      	ldr	r5, [pc, #516]	@ (8005064 <_dtoa_r+0x584>)
 8004e5e:	f004 020f 	and.w	r2, r4, #15
 8004e62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004e6e:	f7fb fbe3 	bl	8000638 <__aeabi_dmul>
 8004e72:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e76:	1124      	asrs	r4, r4, #4
 8004e78:	2300      	movs	r3, #0
 8004e7a:	2602      	movs	r6, #2
 8004e7c:	2c00      	cmp	r4, #0
 8004e7e:	f040 808f 	bne.w	8004fa0 <_dtoa_r+0x4c0>
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1d3      	bne.n	8004e2e <_dtoa_r+0x34e>
 8004e86:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004e88:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 8094 	beq.w	8004fba <_dtoa_r+0x4da>
 8004e92:	4b75      	ldr	r3, [pc, #468]	@ (8005068 <_dtoa_r+0x588>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	4620      	mov	r0, r4
 8004e98:	4629      	mov	r1, r5
 8004e9a:	f7fb fe3f 	bl	8000b1c <__aeabi_dcmplt>
 8004e9e:	2800      	cmp	r0, #0
 8004ea0:	f000 808b 	beq.w	8004fba <_dtoa_r+0x4da>
 8004ea4:	9b03      	ldr	r3, [sp, #12]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	f000 8087 	beq.w	8004fba <_dtoa_r+0x4da>
 8004eac:	f1bb 0f00 	cmp.w	fp, #0
 8004eb0:	dd34      	ble.n	8004f1c <_dtoa_r+0x43c>
 8004eb2:	4620      	mov	r0, r4
 8004eb4:	4b6d      	ldr	r3, [pc, #436]	@ (800506c <_dtoa_r+0x58c>)
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	4629      	mov	r1, r5
 8004eba:	f7fb fbbd 	bl	8000638 <__aeabi_dmul>
 8004ebe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ec2:	f107 38ff 	add.w	r8, r7, #4294967295
 8004ec6:	3601      	adds	r6, #1
 8004ec8:	465c      	mov	r4, fp
 8004eca:	4630      	mov	r0, r6
 8004ecc:	f7fb fb4a 	bl	8000564 <__aeabi_i2d>
 8004ed0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ed4:	f7fb fbb0 	bl	8000638 <__aeabi_dmul>
 8004ed8:	4b65      	ldr	r3, [pc, #404]	@ (8005070 <_dtoa_r+0x590>)
 8004eda:	2200      	movs	r2, #0
 8004edc:	f7fb f9f6 	bl	80002cc <__adddf3>
 8004ee0:	4605      	mov	r5, r0
 8004ee2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004ee6:	2c00      	cmp	r4, #0
 8004ee8:	d16a      	bne.n	8004fc0 <_dtoa_r+0x4e0>
 8004eea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004eee:	4b61      	ldr	r3, [pc, #388]	@ (8005074 <_dtoa_r+0x594>)
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f7fb f9e9 	bl	80002c8 <__aeabi_dsub>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	460b      	mov	r3, r1
 8004efa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004efe:	462a      	mov	r2, r5
 8004f00:	4633      	mov	r3, r6
 8004f02:	f7fb fe29 	bl	8000b58 <__aeabi_dcmpgt>
 8004f06:	2800      	cmp	r0, #0
 8004f08:	f040 8298 	bne.w	800543c <_dtoa_r+0x95c>
 8004f0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f10:	462a      	mov	r2, r5
 8004f12:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004f16:	f7fb fe01 	bl	8000b1c <__aeabi_dcmplt>
 8004f1a:	bb38      	cbnz	r0, 8004f6c <_dtoa_r+0x48c>
 8004f1c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8004f20:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004f24:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	f2c0 8157 	blt.w	80051da <_dtoa_r+0x6fa>
 8004f2c:	2f0e      	cmp	r7, #14
 8004f2e:	f300 8154 	bgt.w	80051da <_dtoa_r+0x6fa>
 8004f32:	4b4b      	ldr	r3, [pc, #300]	@ (8005060 <_dtoa_r+0x580>)
 8004f34:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004f38:	ed93 7b00 	vldr	d7, [r3]
 8004f3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	ed8d 7b00 	vstr	d7, [sp]
 8004f44:	f280 80e5 	bge.w	8005112 <_dtoa_r+0x632>
 8004f48:	9b03      	ldr	r3, [sp, #12]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f300 80e1 	bgt.w	8005112 <_dtoa_r+0x632>
 8004f50:	d10c      	bne.n	8004f6c <_dtoa_r+0x48c>
 8004f52:	4b48      	ldr	r3, [pc, #288]	@ (8005074 <_dtoa_r+0x594>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	ec51 0b17 	vmov	r0, r1, d7
 8004f5a:	f7fb fb6d 	bl	8000638 <__aeabi_dmul>
 8004f5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f62:	f7fb fdef 	bl	8000b44 <__aeabi_dcmpge>
 8004f66:	2800      	cmp	r0, #0
 8004f68:	f000 8266 	beq.w	8005438 <_dtoa_r+0x958>
 8004f6c:	2400      	movs	r4, #0
 8004f6e:	4625      	mov	r5, r4
 8004f70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004f72:	4656      	mov	r6, sl
 8004f74:	ea6f 0803 	mvn.w	r8, r3
 8004f78:	2700      	movs	r7, #0
 8004f7a:	4621      	mov	r1, r4
 8004f7c:	4648      	mov	r0, r9
 8004f7e:	f000 fcbf 	bl	8005900 <_Bfree>
 8004f82:	2d00      	cmp	r5, #0
 8004f84:	f000 80bd 	beq.w	8005102 <_dtoa_r+0x622>
 8004f88:	b12f      	cbz	r7, 8004f96 <_dtoa_r+0x4b6>
 8004f8a:	42af      	cmp	r7, r5
 8004f8c:	d003      	beq.n	8004f96 <_dtoa_r+0x4b6>
 8004f8e:	4639      	mov	r1, r7
 8004f90:	4648      	mov	r0, r9
 8004f92:	f000 fcb5 	bl	8005900 <_Bfree>
 8004f96:	4629      	mov	r1, r5
 8004f98:	4648      	mov	r0, r9
 8004f9a:	f000 fcb1 	bl	8005900 <_Bfree>
 8004f9e:	e0b0      	b.n	8005102 <_dtoa_r+0x622>
 8004fa0:	07e2      	lsls	r2, r4, #31
 8004fa2:	d505      	bpl.n	8004fb0 <_dtoa_r+0x4d0>
 8004fa4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004fa8:	f7fb fb46 	bl	8000638 <__aeabi_dmul>
 8004fac:	3601      	adds	r6, #1
 8004fae:	2301      	movs	r3, #1
 8004fb0:	1064      	asrs	r4, r4, #1
 8004fb2:	3508      	adds	r5, #8
 8004fb4:	e762      	b.n	8004e7c <_dtoa_r+0x39c>
 8004fb6:	2602      	movs	r6, #2
 8004fb8:	e765      	b.n	8004e86 <_dtoa_r+0x3a6>
 8004fba:	9c03      	ldr	r4, [sp, #12]
 8004fbc:	46b8      	mov	r8, r7
 8004fbe:	e784      	b.n	8004eca <_dtoa_r+0x3ea>
 8004fc0:	4b27      	ldr	r3, [pc, #156]	@ (8005060 <_dtoa_r+0x580>)
 8004fc2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004fc4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004fc8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004fcc:	4454      	add	r4, sl
 8004fce:	2900      	cmp	r1, #0
 8004fd0:	d054      	beq.n	800507c <_dtoa_r+0x59c>
 8004fd2:	4929      	ldr	r1, [pc, #164]	@ (8005078 <_dtoa_r+0x598>)
 8004fd4:	2000      	movs	r0, #0
 8004fd6:	f7fb fc59 	bl	800088c <__aeabi_ddiv>
 8004fda:	4633      	mov	r3, r6
 8004fdc:	462a      	mov	r2, r5
 8004fde:	f7fb f973 	bl	80002c8 <__aeabi_dsub>
 8004fe2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004fe6:	4656      	mov	r6, sl
 8004fe8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004fec:	f7fb fdd4 	bl	8000b98 <__aeabi_d2iz>
 8004ff0:	4605      	mov	r5, r0
 8004ff2:	f7fb fab7 	bl	8000564 <__aeabi_i2d>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ffe:	f7fb f963 	bl	80002c8 <__aeabi_dsub>
 8005002:	3530      	adds	r5, #48	@ 0x30
 8005004:	4602      	mov	r2, r0
 8005006:	460b      	mov	r3, r1
 8005008:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800500c:	f806 5b01 	strb.w	r5, [r6], #1
 8005010:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005014:	f7fb fd82 	bl	8000b1c <__aeabi_dcmplt>
 8005018:	2800      	cmp	r0, #0
 800501a:	d172      	bne.n	8005102 <_dtoa_r+0x622>
 800501c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005020:	4911      	ldr	r1, [pc, #68]	@ (8005068 <_dtoa_r+0x588>)
 8005022:	2000      	movs	r0, #0
 8005024:	f7fb f950 	bl	80002c8 <__aeabi_dsub>
 8005028:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800502c:	f7fb fd76 	bl	8000b1c <__aeabi_dcmplt>
 8005030:	2800      	cmp	r0, #0
 8005032:	f040 80b4 	bne.w	800519e <_dtoa_r+0x6be>
 8005036:	42a6      	cmp	r6, r4
 8005038:	f43f af70 	beq.w	8004f1c <_dtoa_r+0x43c>
 800503c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005040:	4b0a      	ldr	r3, [pc, #40]	@ (800506c <_dtoa_r+0x58c>)
 8005042:	2200      	movs	r2, #0
 8005044:	f7fb faf8 	bl	8000638 <__aeabi_dmul>
 8005048:	4b08      	ldr	r3, [pc, #32]	@ (800506c <_dtoa_r+0x58c>)
 800504a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800504e:	2200      	movs	r2, #0
 8005050:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005054:	f7fb faf0 	bl	8000638 <__aeabi_dmul>
 8005058:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800505c:	e7c4      	b.n	8004fe8 <_dtoa_r+0x508>
 800505e:	bf00      	nop
 8005060:	080068f0 	.word	0x080068f0
 8005064:	080068c8 	.word	0x080068c8
 8005068:	3ff00000 	.word	0x3ff00000
 800506c:	40240000 	.word	0x40240000
 8005070:	401c0000 	.word	0x401c0000
 8005074:	40140000 	.word	0x40140000
 8005078:	3fe00000 	.word	0x3fe00000
 800507c:	4631      	mov	r1, r6
 800507e:	4628      	mov	r0, r5
 8005080:	f7fb fada 	bl	8000638 <__aeabi_dmul>
 8005084:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005088:	9413      	str	r4, [sp, #76]	@ 0x4c
 800508a:	4656      	mov	r6, sl
 800508c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005090:	f7fb fd82 	bl	8000b98 <__aeabi_d2iz>
 8005094:	4605      	mov	r5, r0
 8005096:	f7fb fa65 	bl	8000564 <__aeabi_i2d>
 800509a:	4602      	mov	r2, r0
 800509c:	460b      	mov	r3, r1
 800509e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050a2:	f7fb f911 	bl	80002c8 <__aeabi_dsub>
 80050a6:	3530      	adds	r5, #48	@ 0x30
 80050a8:	f806 5b01 	strb.w	r5, [r6], #1
 80050ac:	4602      	mov	r2, r0
 80050ae:	460b      	mov	r3, r1
 80050b0:	42a6      	cmp	r6, r4
 80050b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80050b6:	f04f 0200 	mov.w	r2, #0
 80050ba:	d124      	bne.n	8005106 <_dtoa_r+0x626>
 80050bc:	4baf      	ldr	r3, [pc, #700]	@ (800537c <_dtoa_r+0x89c>)
 80050be:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80050c2:	f7fb f903 	bl	80002cc <__adddf3>
 80050c6:	4602      	mov	r2, r0
 80050c8:	460b      	mov	r3, r1
 80050ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050ce:	f7fb fd43 	bl	8000b58 <__aeabi_dcmpgt>
 80050d2:	2800      	cmp	r0, #0
 80050d4:	d163      	bne.n	800519e <_dtoa_r+0x6be>
 80050d6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80050da:	49a8      	ldr	r1, [pc, #672]	@ (800537c <_dtoa_r+0x89c>)
 80050dc:	2000      	movs	r0, #0
 80050de:	f7fb f8f3 	bl	80002c8 <__aeabi_dsub>
 80050e2:	4602      	mov	r2, r0
 80050e4:	460b      	mov	r3, r1
 80050e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050ea:	f7fb fd17 	bl	8000b1c <__aeabi_dcmplt>
 80050ee:	2800      	cmp	r0, #0
 80050f0:	f43f af14 	beq.w	8004f1c <_dtoa_r+0x43c>
 80050f4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80050f6:	1e73      	subs	r3, r6, #1
 80050f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80050fa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80050fe:	2b30      	cmp	r3, #48	@ 0x30
 8005100:	d0f8      	beq.n	80050f4 <_dtoa_r+0x614>
 8005102:	4647      	mov	r7, r8
 8005104:	e03b      	b.n	800517e <_dtoa_r+0x69e>
 8005106:	4b9e      	ldr	r3, [pc, #632]	@ (8005380 <_dtoa_r+0x8a0>)
 8005108:	f7fb fa96 	bl	8000638 <__aeabi_dmul>
 800510c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005110:	e7bc      	b.n	800508c <_dtoa_r+0x5ac>
 8005112:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005116:	4656      	mov	r6, sl
 8005118:	e9dd 2300 	ldrd	r2, r3, [sp]
 800511c:	4620      	mov	r0, r4
 800511e:	4629      	mov	r1, r5
 8005120:	f7fb fbb4 	bl	800088c <__aeabi_ddiv>
 8005124:	f7fb fd38 	bl	8000b98 <__aeabi_d2iz>
 8005128:	4680      	mov	r8, r0
 800512a:	f7fb fa1b 	bl	8000564 <__aeabi_i2d>
 800512e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005132:	f7fb fa81 	bl	8000638 <__aeabi_dmul>
 8005136:	4602      	mov	r2, r0
 8005138:	460b      	mov	r3, r1
 800513a:	4620      	mov	r0, r4
 800513c:	4629      	mov	r1, r5
 800513e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005142:	f7fb f8c1 	bl	80002c8 <__aeabi_dsub>
 8005146:	f806 4b01 	strb.w	r4, [r6], #1
 800514a:	9d03      	ldr	r5, [sp, #12]
 800514c:	eba6 040a 	sub.w	r4, r6, sl
 8005150:	42a5      	cmp	r5, r4
 8005152:	4602      	mov	r2, r0
 8005154:	460b      	mov	r3, r1
 8005156:	d133      	bne.n	80051c0 <_dtoa_r+0x6e0>
 8005158:	f7fb f8b8 	bl	80002cc <__adddf3>
 800515c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005160:	4604      	mov	r4, r0
 8005162:	460d      	mov	r5, r1
 8005164:	f7fb fcf8 	bl	8000b58 <__aeabi_dcmpgt>
 8005168:	b9c0      	cbnz	r0, 800519c <_dtoa_r+0x6bc>
 800516a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800516e:	4620      	mov	r0, r4
 8005170:	4629      	mov	r1, r5
 8005172:	f7fb fcc9 	bl	8000b08 <__aeabi_dcmpeq>
 8005176:	b110      	cbz	r0, 800517e <_dtoa_r+0x69e>
 8005178:	f018 0f01 	tst.w	r8, #1
 800517c:	d10e      	bne.n	800519c <_dtoa_r+0x6bc>
 800517e:	9902      	ldr	r1, [sp, #8]
 8005180:	4648      	mov	r0, r9
 8005182:	f000 fbbd 	bl	8005900 <_Bfree>
 8005186:	2300      	movs	r3, #0
 8005188:	7033      	strb	r3, [r6, #0]
 800518a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800518c:	3701      	adds	r7, #1
 800518e:	601f      	str	r7, [r3, #0]
 8005190:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005192:	2b00      	cmp	r3, #0
 8005194:	f000 824b 	beq.w	800562e <_dtoa_r+0xb4e>
 8005198:	601e      	str	r6, [r3, #0]
 800519a:	e248      	b.n	800562e <_dtoa_r+0xb4e>
 800519c:	46b8      	mov	r8, r7
 800519e:	4633      	mov	r3, r6
 80051a0:	461e      	mov	r6, r3
 80051a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80051a6:	2a39      	cmp	r2, #57	@ 0x39
 80051a8:	d106      	bne.n	80051b8 <_dtoa_r+0x6d8>
 80051aa:	459a      	cmp	sl, r3
 80051ac:	d1f8      	bne.n	80051a0 <_dtoa_r+0x6c0>
 80051ae:	2230      	movs	r2, #48	@ 0x30
 80051b0:	f108 0801 	add.w	r8, r8, #1
 80051b4:	f88a 2000 	strb.w	r2, [sl]
 80051b8:	781a      	ldrb	r2, [r3, #0]
 80051ba:	3201      	adds	r2, #1
 80051bc:	701a      	strb	r2, [r3, #0]
 80051be:	e7a0      	b.n	8005102 <_dtoa_r+0x622>
 80051c0:	4b6f      	ldr	r3, [pc, #444]	@ (8005380 <_dtoa_r+0x8a0>)
 80051c2:	2200      	movs	r2, #0
 80051c4:	f7fb fa38 	bl	8000638 <__aeabi_dmul>
 80051c8:	2200      	movs	r2, #0
 80051ca:	2300      	movs	r3, #0
 80051cc:	4604      	mov	r4, r0
 80051ce:	460d      	mov	r5, r1
 80051d0:	f7fb fc9a 	bl	8000b08 <__aeabi_dcmpeq>
 80051d4:	2800      	cmp	r0, #0
 80051d6:	d09f      	beq.n	8005118 <_dtoa_r+0x638>
 80051d8:	e7d1      	b.n	800517e <_dtoa_r+0x69e>
 80051da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80051dc:	2a00      	cmp	r2, #0
 80051de:	f000 80ea 	beq.w	80053b6 <_dtoa_r+0x8d6>
 80051e2:	9a07      	ldr	r2, [sp, #28]
 80051e4:	2a01      	cmp	r2, #1
 80051e6:	f300 80cd 	bgt.w	8005384 <_dtoa_r+0x8a4>
 80051ea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80051ec:	2a00      	cmp	r2, #0
 80051ee:	f000 80c1 	beq.w	8005374 <_dtoa_r+0x894>
 80051f2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80051f6:	9c08      	ldr	r4, [sp, #32]
 80051f8:	9e00      	ldr	r6, [sp, #0]
 80051fa:	9a00      	ldr	r2, [sp, #0]
 80051fc:	441a      	add	r2, r3
 80051fe:	9200      	str	r2, [sp, #0]
 8005200:	9a06      	ldr	r2, [sp, #24]
 8005202:	2101      	movs	r1, #1
 8005204:	441a      	add	r2, r3
 8005206:	4648      	mov	r0, r9
 8005208:	9206      	str	r2, [sp, #24]
 800520a:	f000 fc2d 	bl	8005a68 <__i2b>
 800520e:	4605      	mov	r5, r0
 8005210:	b166      	cbz	r6, 800522c <_dtoa_r+0x74c>
 8005212:	9b06      	ldr	r3, [sp, #24]
 8005214:	2b00      	cmp	r3, #0
 8005216:	dd09      	ble.n	800522c <_dtoa_r+0x74c>
 8005218:	42b3      	cmp	r3, r6
 800521a:	9a00      	ldr	r2, [sp, #0]
 800521c:	bfa8      	it	ge
 800521e:	4633      	movge	r3, r6
 8005220:	1ad2      	subs	r2, r2, r3
 8005222:	9200      	str	r2, [sp, #0]
 8005224:	9a06      	ldr	r2, [sp, #24]
 8005226:	1af6      	subs	r6, r6, r3
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	9306      	str	r3, [sp, #24]
 800522c:	9b08      	ldr	r3, [sp, #32]
 800522e:	b30b      	cbz	r3, 8005274 <_dtoa_r+0x794>
 8005230:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005232:	2b00      	cmp	r3, #0
 8005234:	f000 80c6 	beq.w	80053c4 <_dtoa_r+0x8e4>
 8005238:	2c00      	cmp	r4, #0
 800523a:	f000 80c0 	beq.w	80053be <_dtoa_r+0x8de>
 800523e:	4629      	mov	r1, r5
 8005240:	4622      	mov	r2, r4
 8005242:	4648      	mov	r0, r9
 8005244:	f000 fcc8 	bl	8005bd8 <__pow5mult>
 8005248:	9a02      	ldr	r2, [sp, #8]
 800524a:	4601      	mov	r1, r0
 800524c:	4605      	mov	r5, r0
 800524e:	4648      	mov	r0, r9
 8005250:	f000 fc20 	bl	8005a94 <__multiply>
 8005254:	9902      	ldr	r1, [sp, #8]
 8005256:	4680      	mov	r8, r0
 8005258:	4648      	mov	r0, r9
 800525a:	f000 fb51 	bl	8005900 <_Bfree>
 800525e:	9b08      	ldr	r3, [sp, #32]
 8005260:	1b1b      	subs	r3, r3, r4
 8005262:	9308      	str	r3, [sp, #32]
 8005264:	f000 80b1 	beq.w	80053ca <_dtoa_r+0x8ea>
 8005268:	9a08      	ldr	r2, [sp, #32]
 800526a:	4641      	mov	r1, r8
 800526c:	4648      	mov	r0, r9
 800526e:	f000 fcb3 	bl	8005bd8 <__pow5mult>
 8005272:	9002      	str	r0, [sp, #8]
 8005274:	2101      	movs	r1, #1
 8005276:	4648      	mov	r0, r9
 8005278:	f000 fbf6 	bl	8005a68 <__i2b>
 800527c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800527e:	4604      	mov	r4, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	f000 81d8 	beq.w	8005636 <_dtoa_r+0xb56>
 8005286:	461a      	mov	r2, r3
 8005288:	4601      	mov	r1, r0
 800528a:	4648      	mov	r0, r9
 800528c:	f000 fca4 	bl	8005bd8 <__pow5mult>
 8005290:	9b07      	ldr	r3, [sp, #28]
 8005292:	2b01      	cmp	r3, #1
 8005294:	4604      	mov	r4, r0
 8005296:	f300 809f 	bgt.w	80053d8 <_dtoa_r+0x8f8>
 800529a:	9b04      	ldr	r3, [sp, #16]
 800529c:	2b00      	cmp	r3, #0
 800529e:	f040 8097 	bne.w	80053d0 <_dtoa_r+0x8f0>
 80052a2:	9b05      	ldr	r3, [sp, #20]
 80052a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f040 8093 	bne.w	80053d4 <_dtoa_r+0x8f4>
 80052ae:	9b05      	ldr	r3, [sp, #20]
 80052b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80052b4:	0d1b      	lsrs	r3, r3, #20
 80052b6:	051b      	lsls	r3, r3, #20
 80052b8:	b133      	cbz	r3, 80052c8 <_dtoa_r+0x7e8>
 80052ba:	9b00      	ldr	r3, [sp, #0]
 80052bc:	3301      	adds	r3, #1
 80052be:	9300      	str	r3, [sp, #0]
 80052c0:	9b06      	ldr	r3, [sp, #24]
 80052c2:	3301      	adds	r3, #1
 80052c4:	9306      	str	r3, [sp, #24]
 80052c6:	2301      	movs	r3, #1
 80052c8:	9308      	str	r3, [sp, #32]
 80052ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f000 81b8 	beq.w	8005642 <_dtoa_r+0xb62>
 80052d2:	6923      	ldr	r3, [r4, #16]
 80052d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80052d8:	6918      	ldr	r0, [r3, #16]
 80052da:	f000 fb79 	bl	80059d0 <__hi0bits>
 80052de:	f1c0 0020 	rsb	r0, r0, #32
 80052e2:	9b06      	ldr	r3, [sp, #24]
 80052e4:	4418      	add	r0, r3
 80052e6:	f010 001f 	ands.w	r0, r0, #31
 80052ea:	f000 8082 	beq.w	80053f2 <_dtoa_r+0x912>
 80052ee:	f1c0 0320 	rsb	r3, r0, #32
 80052f2:	2b04      	cmp	r3, #4
 80052f4:	dd73      	ble.n	80053de <_dtoa_r+0x8fe>
 80052f6:	9b00      	ldr	r3, [sp, #0]
 80052f8:	f1c0 001c 	rsb	r0, r0, #28
 80052fc:	4403      	add	r3, r0
 80052fe:	9300      	str	r3, [sp, #0]
 8005300:	9b06      	ldr	r3, [sp, #24]
 8005302:	4403      	add	r3, r0
 8005304:	4406      	add	r6, r0
 8005306:	9306      	str	r3, [sp, #24]
 8005308:	9b00      	ldr	r3, [sp, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	dd05      	ble.n	800531a <_dtoa_r+0x83a>
 800530e:	9902      	ldr	r1, [sp, #8]
 8005310:	461a      	mov	r2, r3
 8005312:	4648      	mov	r0, r9
 8005314:	f000 fcba 	bl	8005c8c <__lshift>
 8005318:	9002      	str	r0, [sp, #8]
 800531a:	9b06      	ldr	r3, [sp, #24]
 800531c:	2b00      	cmp	r3, #0
 800531e:	dd05      	ble.n	800532c <_dtoa_r+0x84c>
 8005320:	4621      	mov	r1, r4
 8005322:	461a      	mov	r2, r3
 8005324:	4648      	mov	r0, r9
 8005326:	f000 fcb1 	bl	8005c8c <__lshift>
 800532a:	4604      	mov	r4, r0
 800532c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800532e:	2b00      	cmp	r3, #0
 8005330:	d061      	beq.n	80053f6 <_dtoa_r+0x916>
 8005332:	9802      	ldr	r0, [sp, #8]
 8005334:	4621      	mov	r1, r4
 8005336:	f000 fd15 	bl	8005d64 <__mcmp>
 800533a:	2800      	cmp	r0, #0
 800533c:	da5b      	bge.n	80053f6 <_dtoa_r+0x916>
 800533e:	2300      	movs	r3, #0
 8005340:	9902      	ldr	r1, [sp, #8]
 8005342:	220a      	movs	r2, #10
 8005344:	4648      	mov	r0, r9
 8005346:	f000 fafd 	bl	8005944 <__multadd>
 800534a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800534c:	9002      	str	r0, [sp, #8]
 800534e:	f107 38ff 	add.w	r8, r7, #4294967295
 8005352:	2b00      	cmp	r3, #0
 8005354:	f000 8177 	beq.w	8005646 <_dtoa_r+0xb66>
 8005358:	4629      	mov	r1, r5
 800535a:	2300      	movs	r3, #0
 800535c:	220a      	movs	r2, #10
 800535e:	4648      	mov	r0, r9
 8005360:	f000 faf0 	bl	8005944 <__multadd>
 8005364:	f1bb 0f00 	cmp.w	fp, #0
 8005368:	4605      	mov	r5, r0
 800536a:	dc6f      	bgt.n	800544c <_dtoa_r+0x96c>
 800536c:	9b07      	ldr	r3, [sp, #28]
 800536e:	2b02      	cmp	r3, #2
 8005370:	dc49      	bgt.n	8005406 <_dtoa_r+0x926>
 8005372:	e06b      	b.n	800544c <_dtoa_r+0x96c>
 8005374:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005376:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800537a:	e73c      	b.n	80051f6 <_dtoa_r+0x716>
 800537c:	3fe00000 	.word	0x3fe00000
 8005380:	40240000 	.word	0x40240000
 8005384:	9b03      	ldr	r3, [sp, #12]
 8005386:	1e5c      	subs	r4, r3, #1
 8005388:	9b08      	ldr	r3, [sp, #32]
 800538a:	42a3      	cmp	r3, r4
 800538c:	db09      	blt.n	80053a2 <_dtoa_r+0x8c2>
 800538e:	1b1c      	subs	r4, r3, r4
 8005390:	9b03      	ldr	r3, [sp, #12]
 8005392:	2b00      	cmp	r3, #0
 8005394:	f6bf af30 	bge.w	80051f8 <_dtoa_r+0x718>
 8005398:	9b00      	ldr	r3, [sp, #0]
 800539a:	9a03      	ldr	r2, [sp, #12]
 800539c:	1a9e      	subs	r6, r3, r2
 800539e:	2300      	movs	r3, #0
 80053a0:	e72b      	b.n	80051fa <_dtoa_r+0x71a>
 80053a2:	9b08      	ldr	r3, [sp, #32]
 80053a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80053a6:	9408      	str	r4, [sp, #32]
 80053a8:	1ae3      	subs	r3, r4, r3
 80053aa:	441a      	add	r2, r3
 80053ac:	9e00      	ldr	r6, [sp, #0]
 80053ae:	9b03      	ldr	r3, [sp, #12]
 80053b0:	920d      	str	r2, [sp, #52]	@ 0x34
 80053b2:	2400      	movs	r4, #0
 80053b4:	e721      	b.n	80051fa <_dtoa_r+0x71a>
 80053b6:	9c08      	ldr	r4, [sp, #32]
 80053b8:	9e00      	ldr	r6, [sp, #0]
 80053ba:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80053bc:	e728      	b.n	8005210 <_dtoa_r+0x730>
 80053be:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80053c2:	e751      	b.n	8005268 <_dtoa_r+0x788>
 80053c4:	9a08      	ldr	r2, [sp, #32]
 80053c6:	9902      	ldr	r1, [sp, #8]
 80053c8:	e750      	b.n	800526c <_dtoa_r+0x78c>
 80053ca:	f8cd 8008 	str.w	r8, [sp, #8]
 80053ce:	e751      	b.n	8005274 <_dtoa_r+0x794>
 80053d0:	2300      	movs	r3, #0
 80053d2:	e779      	b.n	80052c8 <_dtoa_r+0x7e8>
 80053d4:	9b04      	ldr	r3, [sp, #16]
 80053d6:	e777      	b.n	80052c8 <_dtoa_r+0x7e8>
 80053d8:	2300      	movs	r3, #0
 80053da:	9308      	str	r3, [sp, #32]
 80053dc:	e779      	b.n	80052d2 <_dtoa_r+0x7f2>
 80053de:	d093      	beq.n	8005308 <_dtoa_r+0x828>
 80053e0:	9a00      	ldr	r2, [sp, #0]
 80053e2:	331c      	adds	r3, #28
 80053e4:	441a      	add	r2, r3
 80053e6:	9200      	str	r2, [sp, #0]
 80053e8:	9a06      	ldr	r2, [sp, #24]
 80053ea:	441a      	add	r2, r3
 80053ec:	441e      	add	r6, r3
 80053ee:	9206      	str	r2, [sp, #24]
 80053f0:	e78a      	b.n	8005308 <_dtoa_r+0x828>
 80053f2:	4603      	mov	r3, r0
 80053f4:	e7f4      	b.n	80053e0 <_dtoa_r+0x900>
 80053f6:	9b03      	ldr	r3, [sp, #12]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	46b8      	mov	r8, r7
 80053fc:	dc20      	bgt.n	8005440 <_dtoa_r+0x960>
 80053fe:	469b      	mov	fp, r3
 8005400:	9b07      	ldr	r3, [sp, #28]
 8005402:	2b02      	cmp	r3, #2
 8005404:	dd1e      	ble.n	8005444 <_dtoa_r+0x964>
 8005406:	f1bb 0f00 	cmp.w	fp, #0
 800540a:	f47f adb1 	bne.w	8004f70 <_dtoa_r+0x490>
 800540e:	4621      	mov	r1, r4
 8005410:	465b      	mov	r3, fp
 8005412:	2205      	movs	r2, #5
 8005414:	4648      	mov	r0, r9
 8005416:	f000 fa95 	bl	8005944 <__multadd>
 800541a:	4601      	mov	r1, r0
 800541c:	4604      	mov	r4, r0
 800541e:	9802      	ldr	r0, [sp, #8]
 8005420:	f000 fca0 	bl	8005d64 <__mcmp>
 8005424:	2800      	cmp	r0, #0
 8005426:	f77f ada3 	ble.w	8004f70 <_dtoa_r+0x490>
 800542a:	4656      	mov	r6, sl
 800542c:	2331      	movs	r3, #49	@ 0x31
 800542e:	f806 3b01 	strb.w	r3, [r6], #1
 8005432:	f108 0801 	add.w	r8, r8, #1
 8005436:	e59f      	b.n	8004f78 <_dtoa_r+0x498>
 8005438:	9c03      	ldr	r4, [sp, #12]
 800543a:	46b8      	mov	r8, r7
 800543c:	4625      	mov	r5, r4
 800543e:	e7f4      	b.n	800542a <_dtoa_r+0x94a>
 8005440:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005444:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005446:	2b00      	cmp	r3, #0
 8005448:	f000 8101 	beq.w	800564e <_dtoa_r+0xb6e>
 800544c:	2e00      	cmp	r6, #0
 800544e:	dd05      	ble.n	800545c <_dtoa_r+0x97c>
 8005450:	4629      	mov	r1, r5
 8005452:	4632      	mov	r2, r6
 8005454:	4648      	mov	r0, r9
 8005456:	f000 fc19 	bl	8005c8c <__lshift>
 800545a:	4605      	mov	r5, r0
 800545c:	9b08      	ldr	r3, [sp, #32]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d05c      	beq.n	800551c <_dtoa_r+0xa3c>
 8005462:	6869      	ldr	r1, [r5, #4]
 8005464:	4648      	mov	r0, r9
 8005466:	f000 fa0b 	bl	8005880 <_Balloc>
 800546a:	4606      	mov	r6, r0
 800546c:	b928      	cbnz	r0, 800547a <_dtoa_r+0x99a>
 800546e:	4b82      	ldr	r3, [pc, #520]	@ (8005678 <_dtoa_r+0xb98>)
 8005470:	4602      	mov	r2, r0
 8005472:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005476:	f7ff bb4a 	b.w	8004b0e <_dtoa_r+0x2e>
 800547a:	692a      	ldr	r2, [r5, #16]
 800547c:	3202      	adds	r2, #2
 800547e:	0092      	lsls	r2, r2, #2
 8005480:	f105 010c 	add.w	r1, r5, #12
 8005484:	300c      	adds	r0, #12
 8005486:	f000 fe31 	bl	80060ec <memcpy>
 800548a:	2201      	movs	r2, #1
 800548c:	4631      	mov	r1, r6
 800548e:	4648      	mov	r0, r9
 8005490:	f000 fbfc 	bl	8005c8c <__lshift>
 8005494:	f10a 0301 	add.w	r3, sl, #1
 8005498:	9300      	str	r3, [sp, #0]
 800549a:	eb0a 030b 	add.w	r3, sl, fp
 800549e:	9308      	str	r3, [sp, #32]
 80054a0:	9b04      	ldr	r3, [sp, #16]
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	462f      	mov	r7, r5
 80054a8:	9306      	str	r3, [sp, #24]
 80054aa:	4605      	mov	r5, r0
 80054ac:	9b00      	ldr	r3, [sp, #0]
 80054ae:	9802      	ldr	r0, [sp, #8]
 80054b0:	4621      	mov	r1, r4
 80054b2:	f103 3bff 	add.w	fp, r3, #4294967295
 80054b6:	f7ff fa88 	bl	80049ca <quorem>
 80054ba:	4603      	mov	r3, r0
 80054bc:	3330      	adds	r3, #48	@ 0x30
 80054be:	9003      	str	r0, [sp, #12]
 80054c0:	4639      	mov	r1, r7
 80054c2:	9802      	ldr	r0, [sp, #8]
 80054c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80054c6:	f000 fc4d 	bl	8005d64 <__mcmp>
 80054ca:	462a      	mov	r2, r5
 80054cc:	9004      	str	r0, [sp, #16]
 80054ce:	4621      	mov	r1, r4
 80054d0:	4648      	mov	r0, r9
 80054d2:	f000 fc63 	bl	8005d9c <__mdiff>
 80054d6:	68c2      	ldr	r2, [r0, #12]
 80054d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054da:	4606      	mov	r6, r0
 80054dc:	bb02      	cbnz	r2, 8005520 <_dtoa_r+0xa40>
 80054de:	4601      	mov	r1, r0
 80054e0:	9802      	ldr	r0, [sp, #8]
 80054e2:	f000 fc3f 	bl	8005d64 <__mcmp>
 80054e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054e8:	4602      	mov	r2, r0
 80054ea:	4631      	mov	r1, r6
 80054ec:	4648      	mov	r0, r9
 80054ee:	920c      	str	r2, [sp, #48]	@ 0x30
 80054f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80054f2:	f000 fa05 	bl	8005900 <_Bfree>
 80054f6:	9b07      	ldr	r3, [sp, #28]
 80054f8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80054fa:	9e00      	ldr	r6, [sp, #0]
 80054fc:	ea42 0103 	orr.w	r1, r2, r3
 8005500:	9b06      	ldr	r3, [sp, #24]
 8005502:	4319      	orrs	r1, r3
 8005504:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005506:	d10d      	bne.n	8005524 <_dtoa_r+0xa44>
 8005508:	2b39      	cmp	r3, #57	@ 0x39
 800550a:	d027      	beq.n	800555c <_dtoa_r+0xa7c>
 800550c:	9a04      	ldr	r2, [sp, #16]
 800550e:	2a00      	cmp	r2, #0
 8005510:	dd01      	ble.n	8005516 <_dtoa_r+0xa36>
 8005512:	9b03      	ldr	r3, [sp, #12]
 8005514:	3331      	adds	r3, #49	@ 0x31
 8005516:	f88b 3000 	strb.w	r3, [fp]
 800551a:	e52e      	b.n	8004f7a <_dtoa_r+0x49a>
 800551c:	4628      	mov	r0, r5
 800551e:	e7b9      	b.n	8005494 <_dtoa_r+0x9b4>
 8005520:	2201      	movs	r2, #1
 8005522:	e7e2      	b.n	80054ea <_dtoa_r+0xa0a>
 8005524:	9904      	ldr	r1, [sp, #16]
 8005526:	2900      	cmp	r1, #0
 8005528:	db04      	blt.n	8005534 <_dtoa_r+0xa54>
 800552a:	9807      	ldr	r0, [sp, #28]
 800552c:	4301      	orrs	r1, r0
 800552e:	9806      	ldr	r0, [sp, #24]
 8005530:	4301      	orrs	r1, r0
 8005532:	d120      	bne.n	8005576 <_dtoa_r+0xa96>
 8005534:	2a00      	cmp	r2, #0
 8005536:	ddee      	ble.n	8005516 <_dtoa_r+0xa36>
 8005538:	9902      	ldr	r1, [sp, #8]
 800553a:	9300      	str	r3, [sp, #0]
 800553c:	2201      	movs	r2, #1
 800553e:	4648      	mov	r0, r9
 8005540:	f000 fba4 	bl	8005c8c <__lshift>
 8005544:	4621      	mov	r1, r4
 8005546:	9002      	str	r0, [sp, #8]
 8005548:	f000 fc0c 	bl	8005d64 <__mcmp>
 800554c:	2800      	cmp	r0, #0
 800554e:	9b00      	ldr	r3, [sp, #0]
 8005550:	dc02      	bgt.n	8005558 <_dtoa_r+0xa78>
 8005552:	d1e0      	bne.n	8005516 <_dtoa_r+0xa36>
 8005554:	07da      	lsls	r2, r3, #31
 8005556:	d5de      	bpl.n	8005516 <_dtoa_r+0xa36>
 8005558:	2b39      	cmp	r3, #57	@ 0x39
 800555a:	d1da      	bne.n	8005512 <_dtoa_r+0xa32>
 800555c:	2339      	movs	r3, #57	@ 0x39
 800555e:	f88b 3000 	strb.w	r3, [fp]
 8005562:	4633      	mov	r3, r6
 8005564:	461e      	mov	r6, r3
 8005566:	3b01      	subs	r3, #1
 8005568:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800556c:	2a39      	cmp	r2, #57	@ 0x39
 800556e:	d04e      	beq.n	800560e <_dtoa_r+0xb2e>
 8005570:	3201      	adds	r2, #1
 8005572:	701a      	strb	r2, [r3, #0]
 8005574:	e501      	b.n	8004f7a <_dtoa_r+0x49a>
 8005576:	2a00      	cmp	r2, #0
 8005578:	dd03      	ble.n	8005582 <_dtoa_r+0xaa2>
 800557a:	2b39      	cmp	r3, #57	@ 0x39
 800557c:	d0ee      	beq.n	800555c <_dtoa_r+0xa7c>
 800557e:	3301      	adds	r3, #1
 8005580:	e7c9      	b.n	8005516 <_dtoa_r+0xa36>
 8005582:	9a00      	ldr	r2, [sp, #0]
 8005584:	9908      	ldr	r1, [sp, #32]
 8005586:	f802 3c01 	strb.w	r3, [r2, #-1]
 800558a:	428a      	cmp	r2, r1
 800558c:	d028      	beq.n	80055e0 <_dtoa_r+0xb00>
 800558e:	9902      	ldr	r1, [sp, #8]
 8005590:	2300      	movs	r3, #0
 8005592:	220a      	movs	r2, #10
 8005594:	4648      	mov	r0, r9
 8005596:	f000 f9d5 	bl	8005944 <__multadd>
 800559a:	42af      	cmp	r7, r5
 800559c:	9002      	str	r0, [sp, #8]
 800559e:	f04f 0300 	mov.w	r3, #0
 80055a2:	f04f 020a 	mov.w	r2, #10
 80055a6:	4639      	mov	r1, r7
 80055a8:	4648      	mov	r0, r9
 80055aa:	d107      	bne.n	80055bc <_dtoa_r+0xadc>
 80055ac:	f000 f9ca 	bl	8005944 <__multadd>
 80055b0:	4607      	mov	r7, r0
 80055b2:	4605      	mov	r5, r0
 80055b4:	9b00      	ldr	r3, [sp, #0]
 80055b6:	3301      	adds	r3, #1
 80055b8:	9300      	str	r3, [sp, #0]
 80055ba:	e777      	b.n	80054ac <_dtoa_r+0x9cc>
 80055bc:	f000 f9c2 	bl	8005944 <__multadd>
 80055c0:	4629      	mov	r1, r5
 80055c2:	4607      	mov	r7, r0
 80055c4:	2300      	movs	r3, #0
 80055c6:	220a      	movs	r2, #10
 80055c8:	4648      	mov	r0, r9
 80055ca:	f000 f9bb 	bl	8005944 <__multadd>
 80055ce:	4605      	mov	r5, r0
 80055d0:	e7f0      	b.n	80055b4 <_dtoa_r+0xad4>
 80055d2:	f1bb 0f00 	cmp.w	fp, #0
 80055d6:	bfcc      	ite	gt
 80055d8:	465e      	movgt	r6, fp
 80055da:	2601      	movle	r6, #1
 80055dc:	4456      	add	r6, sl
 80055de:	2700      	movs	r7, #0
 80055e0:	9902      	ldr	r1, [sp, #8]
 80055e2:	9300      	str	r3, [sp, #0]
 80055e4:	2201      	movs	r2, #1
 80055e6:	4648      	mov	r0, r9
 80055e8:	f000 fb50 	bl	8005c8c <__lshift>
 80055ec:	4621      	mov	r1, r4
 80055ee:	9002      	str	r0, [sp, #8]
 80055f0:	f000 fbb8 	bl	8005d64 <__mcmp>
 80055f4:	2800      	cmp	r0, #0
 80055f6:	dcb4      	bgt.n	8005562 <_dtoa_r+0xa82>
 80055f8:	d102      	bne.n	8005600 <_dtoa_r+0xb20>
 80055fa:	9b00      	ldr	r3, [sp, #0]
 80055fc:	07db      	lsls	r3, r3, #31
 80055fe:	d4b0      	bmi.n	8005562 <_dtoa_r+0xa82>
 8005600:	4633      	mov	r3, r6
 8005602:	461e      	mov	r6, r3
 8005604:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005608:	2a30      	cmp	r2, #48	@ 0x30
 800560a:	d0fa      	beq.n	8005602 <_dtoa_r+0xb22>
 800560c:	e4b5      	b.n	8004f7a <_dtoa_r+0x49a>
 800560e:	459a      	cmp	sl, r3
 8005610:	d1a8      	bne.n	8005564 <_dtoa_r+0xa84>
 8005612:	2331      	movs	r3, #49	@ 0x31
 8005614:	f108 0801 	add.w	r8, r8, #1
 8005618:	f88a 3000 	strb.w	r3, [sl]
 800561c:	e4ad      	b.n	8004f7a <_dtoa_r+0x49a>
 800561e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005620:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800567c <_dtoa_r+0xb9c>
 8005624:	b11b      	cbz	r3, 800562e <_dtoa_r+0xb4e>
 8005626:	f10a 0308 	add.w	r3, sl, #8
 800562a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800562c:	6013      	str	r3, [r2, #0]
 800562e:	4650      	mov	r0, sl
 8005630:	b017      	add	sp, #92	@ 0x5c
 8005632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005636:	9b07      	ldr	r3, [sp, #28]
 8005638:	2b01      	cmp	r3, #1
 800563a:	f77f ae2e 	ble.w	800529a <_dtoa_r+0x7ba>
 800563e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005640:	9308      	str	r3, [sp, #32]
 8005642:	2001      	movs	r0, #1
 8005644:	e64d      	b.n	80052e2 <_dtoa_r+0x802>
 8005646:	f1bb 0f00 	cmp.w	fp, #0
 800564a:	f77f aed9 	ble.w	8005400 <_dtoa_r+0x920>
 800564e:	4656      	mov	r6, sl
 8005650:	9802      	ldr	r0, [sp, #8]
 8005652:	4621      	mov	r1, r4
 8005654:	f7ff f9b9 	bl	80049ca <quorem>
 8005658:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800565c:	f806 3b01 	strb.w	r3, [r6], #1
 8005660:	eba6 020a 	sub.w	r2, r6, sl
 8005664:	4593      	cmp	fp, r2
 8005666:	ddb4      	ble.n	80055d2 <_dtoa_r+0xaf2>
 8005668:	9902      	ldr	r1, [sp, #8]
 800566a:	2300      	movs	r3, #0
 800566c:	220a      	movs	r2, #10
 800566e:	4648      	mov	r0, r9
 8005670:	f000 f968 	bl	8005944 <__multadd>
 8005674:	9002      	str	r0, [sp, #8]
 8005676:	e7eb      	b.n	8005650 <_dtoa_r+0xb70>
 8005678:	080067f8 	.word	0x080067f8
 800567c:	0800677c 	.word	0x0800677c

08005680 <_free_r>:
 8005680:	b538      	push	{r3, r4, r5, lr}
 8005682:	4605      	mov	r5, r0
 8005684:	2900      	cmp	r1, #0
 8005686:	d041      	beq.n	800570c <_free_r+0x8c>
 8005688:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800568c:	1f0c      	subs	r4, r1, #4
 800568e:	2b00      	cmp	r3, #0
 8005690:	bfb8      	it	lt
 8005692:	18e4      	addlt	r4, r4, r3
 8005694:	f000 f8e8 	bl	8005868 <__malloc_lock>
 8005698:	4a1d      	ldr	r2, [pc, #116]	@ (8005710 <_free_r+0x90>)
 800569a:	6813      	ldr	r3, [r2, #0]
 800569c:	b933      	cbnz	r3, 80056ac <_free_r+0x2c>
 800569e:	6063      	str	r3, [r4, #4]
 80056a0:	6014      	str	r4, [r2, #0]
 80056a2:	4628      	mov	r0, r5
 80056a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056a8:	f000 b8e4 	b.w	8005874 <__malloc_unlock>
 80056ac:	42a3      	cmp	r3, r4
 80056ae:	d908      	bls.n	80056c2 <_free_r+0x42>
 80056b0:	6820      	ldr	r0, [r4, #0]
 80056b2:	1821      	adds	r1, r4, r0
 80056b4:	428b      	cmp	r3, r1
 80056b6:	bf01      	itttt	eq
 80056b8:	6819      	ldreq	r1, [r3, #0]
 80056ba:	685b      	ldreq	r3, [r3, #4]
 80056bc:	1809      	addeq	r1, r1, r0
 80056be:	6021      	streq	r1, [r4, #0]
 80056c0:	e7ed      	b.n	800569e <_free_r+0x1e>
 80056c2:	461a      	mov	r2, r3
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	b10b      	cbz	r3, 80056cc <_free_r+0x4c>
 80056c8:	42a3      	cmp	r3, r4
 80056ca:	d9fa      	bls.n	80056c2 <_free_r+0x42>
 80056cc:	6811      	ldr	r1, [r2, #0]
 80056ce:	1850      	adds	r0, r2, r1
 80056d0:	42a0      	cmp	r0, r4
 80056d2:	d10b      	bne.n	80056ec <_free_r+0x6c>
 80056d4:	6820      	ldr	r0, [r4, #0]
 80056d6:	4401      	add	r1, r0
 80056d8:	1850      	adds	r0, r2, r1
 80056da:	4283      	cmp	r3, r0
 80056dc:	6011      	str	r1, [r2, #0]
 80056de:	d1e0      	bne.n	80056a2 <_free_r+0x22>
 80056e0:	6818      	ldr	r0, [r3, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	6053      	str	r3, [r2, #4]
 80056e6:	4408      	add	r0, r1
 80056e8:	6010      	str	r0, [r2, #0]
 80056ea:	e7da      	b.n	80056a2 <_free_r+0x22>
 80056ec:	d902      	bls.n	80056f4 <_free_r+0x74>
 80056ee:	230c      	movs	r3, #12
 80056f0:	602b      	str	r3, [r5, #0]
 80056f2:	e7d6      	b.n	80056a2 <_free_r+0x22>
 80056f4:	6820      	ldr	r0, [r4, #0]
 80056f6:	1821      	adds	r1, r4, r0
 80056f8:	428b      	cmp	r3, r1
 80056fa:	bf04      	itt	eq
 80056fc:	6819      	ldreq	r1, [r3, #0]
 80056fe:	685b      	ldreq	r3, [r3, #4]
 8005700:	6063      	str	r3, [r4, #4]
 8005702:	bf04      	itt	eq
 8005704:	1809      	addeq	r1, r1, r0
 8005706:	6021      	streq	r1, [r4, #0]
 8005708:	6054      	str	r4, [r2, #4]
 800570a:	e7ca      	b.n	80056a2 <_free_r+0x22>
 800570c:	bd38      	pop	{r3, r4, r5, pc}
 800570e:	bf00      	nop
 8005710:	200003e8 	.word	0x200003e8

08005714 <malloc>:
 8005714:	4b02      	ldr	r3, [pc, #8]	@ (8005720 <malloc+0xc>)
 8005716:	4601      	mov	r1, r0
 8005718:	6818      	ldr	r0, [r3, #0]
 800571a:	f000 b825 	b.w	8005768 <_malloc_r>
 800571e:	bf00      	nop
 8005720:	2000001c 	.word	0x2000001c

08005724 <sbrk_aligned>:
 8005724:	b570      	push	{r4, r5, r6, lr}
 8005726:	4e0f      	ldr	r6, [pc, #60]	@ (8005764 <sbrk_aligned+0x40>)
 8005728:	460c      	mov	r4, r1
 800572a:	6831      	ldr	r1, [r6, #0]
 800572c:	4605      	mov	r5, r0
 800572e:	b911      	cbnz	r1, 8005736 <sbrk_aligned+0x12>
 8005730:	f000 fccc 	bl	80060cc <_sbrk_r>
 8005734:	6030      	str	r0, [r6, #0]
 8005736:	4621      	mov	r1, r4
 8005738:	4628      	mov	r0, r5
 800573a:	f000 fcc7 	bl	80060cc <_sbrk_r>
 800573e:	1c43      	adds	r3, r0, #1
 8005740:	d103      	bne.n	800574a <sbrk_aligned+0x26>
 8005742:	f04f 34ff 	mov.w	r4, #4294967295
 8005746:	4620      	mov	r0, r4
 8005748:	bd70      	pop	{r4, r5, r6, pc}
 800574a:	1cc4      	adds	r4, r0, #3
 800574c:	f024 0403 	bic.w	r4, r4, #3
 8005750:	42a0      	cmp	r0, r4
 8005752:	d0f8      	beq.n	8005746 <sbrk_aligned+0x22>
 8005754:	1a21      	subs	r1, r4, r0
 8005756:	4628      	mov	r0, r5
 8005758:	f000 fcb8 	bl	80060cc <_sbrk_r>
 800575c:	3001      	adds	r0, #1
 800575e:	d1f2      	bne.n	8005746 <sbrk_aligned+0x22>
 8005760:	e7ef      	b.n	8005742 <sbrk_aligned+0x1e>
 8005762:	bf00      	nop
 8005764:	200003e4 	.word	0x200003e4

08005768 <_malloc_r>:
 8005768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800576c:	1ccd      	adds	r5, r1, #3
 800576e:	f025 0503 	bic.w	r5, r5, #3
 8005772:	3508      	adds	r5, #8
 8005774:	2d0c      	cmp	r5, #12
 8005776:	bf38      	it	cc
 8005778:	250c      	movcc	r5, #12
 800577a:	2d00      	cmp	r5, #0
 800577c:	4606      	mov	r6, r0
 800577e:	db01      	blt.n	8005784 <_malloc_r+0x1c>
 8005780:	42a9      	cmp	r1, r5
 8005782:	d904      	bls.n	800578e <_malloc_r+0x26>
 8005784:	230c      	movs	r3, #12
 8005786:	6033      	str	r3, [r6, #0]
 8005788:	2000      	movs	r0, #0
 800578a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800578e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005864 <_malloc_r+0xfc>
 8005792:	f000 f869 	bl	8005868 <__malloc_lock>
 8005796:	f8d8 3000 	ldr.w	r3, [r8]
 800579a:	461c      	mov	r4, r3
 800579c:	bb44      	cbnz	r4, 80057f0 <_malloc_r+0x88>
 800579e:	4629      	mov	r1, r5
 80057a0:	4630      	mov	r0, r6
 80057a2:	f7ff ffbf 	bl	8005724 <sbrk_aligned>
 80057a6:	1c43      	adds	r3, r0, #1
 80057a8:	4604      	mov	r4, r0
 80057aa:	d158      	bne.n	800585e <_malloc_r+0xf6>
 80057ac:	f8d8 4000 	ldr.w	r4, [r8]
 80057b0:	4627      	mov	r7, r4
 80057b2:	2f00      	cmp	r7, #0
 80057b4:	d143      	bne.n	800583e <_malloc_r+0xd6>
 80057b6:	2c00      	cmp	r4, #0
 80057b8:	d04b      	beq.n	8005852 <_malloc_r+0xea>
 80057ba:	6823      	ldr	r3, [r4, #0]
 80057bc:	4639      	mov	r1, r7
 80057be:	4630      	mov	r0, r6
 80057c0:	eb04 0903 	add.w	r9, r4, r3
 80057c4:	f000 fc82 	bl	80060cc <_sbrk_r>
 80057c8:	4581      	cmp	r9, r0
 80057ca:	d142      	bne.n	8005852 <_malloc_r+0xea>
 80057cc:	6821      	ldr	r1, [r4, #0]
 80057ce:	1a6d      	subs	r5, r5, r1
 80057d0:	4629      	mov	r1, r5
 80057d2:	4630      	mov	r0, r6
 80057d4:	f7ff ffa6 	bl	8005724 <sbrk_aligned>
 80057d8:	3001      	adds	r0, #1
 80057da:	d03a      	beq.n	8005852 <_malloc_r+0xea>
 80057dc:	6823      	ldr	r3, [r4, #0]
 80057de:	442b      	add	r3, r5
 80057e0:	6023      	str	r3, [r4, #0]
 80057e2:	f8d8 3000 	ldr.w	r3, [r8]
 80057e6:	685a      	ldr	r2, [r3, #4]
 80057e8:	bb62      	cbnz	r2, 8005844 <_malloc_r+0xdc>
 80057ea:	f8c8 7000 	str.w	r7, [r8]
 80057ee:	e00f      	b.n	8005810 <_malloc_r+0xa8>
 80057f0:	6822      	ldr	r2, [r4, #0]
 80057f2:	1b52      	subs	r2, r2, r5
 80057f4:	d420      	bmi.n	8005838 <_malloc_r+0xd0>
 80057f6:	2a0b      	cmp	r2, #11
 80057f8:	d917      	bls.n	800582a <_malloc_r+0xc2>
 80057fa:	1961      	adds	r1, r4, r5
 80057fc:	42a3      	cmp	r3, r4
 80057fe:	6025      	str	r5, [r4, #0]
 8005800:	bf18      	it	ne
 8005802:	6059      	strne	r1, [r3, #4]
 8005804:	6863      	ldr	r3, [r4, #4]
 8005806:	bf08      	it	eq
 8005808:	f8c8 1000 	streq.w	r1, [r8]
 800580c:	5162      	str	r2, [r4, r5]
 800580e:	604b      	str	r3, [r1, #4]
 8005810:	4630      	mov	r0, r6
 8005812:	f000 f82f 	bl	8005874 <__malloc_unlock>
 8005816:	f104 000b 	add.w	r0, r4, #11
 800581a:	1d23      	adds	r3, r4, #4
 800581c:	f020 0007 	bic.w	r0, r0, #7
 8005820:	1ac2      	subs	r2, r0, r3
 8005822:	bf1c      	itt	ne
 8005824:	1a1b      	subne	r3, r3, r0
 8005826:	50a3      	strne	r3, [r4, r2]
 8005828:	e7af      	b.n	800578a <_malloc_r+0x22>
 800582a:	6862      	ldr	r2, [r4, #4]
 800582c:	42a3      	cmp	r3, r4
 800582e:	bf0c      	ite	eq
 8005830:	f8c8 2000 	streq.w	r2, [r8]
 8005834:	605a      	strne	r2, [r3, #4]
 8005836:	e7eb      	b.n	8005810 <_malloc_r+0xa8>
 8005838:	4623      	mov	r3, r4
 800583a:	6864      	ldr	r4, [r4, #4]
 800583c:	e7ae      	b.n	800579c <_malloc_r+0x34>
 800583e:	463c      	mov	r4, r7
 8005840:	687f      	ldr	r7, [r7, #4]
 8005842:	e7b6      	b.n	80057b2 <_malloc_r+0x4a>
 8005844:	461a      	mov	r2, r3
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	42a3      	cmp	r3, r4
 800584a:	d1fb      	bne.n	8005844 <_malloc_r+0xdc>
 800584c:	2300      	movs	r3, #0
 800584e:	6053      	str	r3, [r2, #4]
 8005850:	e7de      	b.n	8005810 <_malloc_r+0xa8>
 8005852:	230c      	movs	r3, #12
 8005854:	6033      	str	r3, [r6, #0]
 8005856:	4630      	mov	r0, r6
 8005858:	f000 f80c 	bl	8005874 <__malloc_unlock>
 800585c:	e794      	b.n	8005788 <_malloc_r+0x20>
 800585e:	6005      	str	r5, [r0, #0]
 8005860:	e7d6      	b.n	8005810 <_malloc_r+0xa8>
 8005862:	bf00      	nop
 8005864:	200003e8 	.word	0x200003e8

08005868 <__malloc_lock>:
 8005868:	4801      	ldr	r0, [pc, #4]	@ (8005870 <__malloc_lock+0x8>)
 800586a:	f7ff b8ac 	b.w	80049c6 <__retarget_lock_acquire_recursive>
 800586e:	bf00      	nop
 8005870:	200003e0 	.word	0x200003e0

08005874 <__malloc_unlock>:
 8005874:	4801      	ldr	r0, [pc, #4]	@ (800587c <__malloc_unlock+0x8>)
 8005876:	f7ff b8a7 	b.w	80049c8 <__retarget_lock_release_recursive>
 800587a:	bf00      	nop
 800587c:	200003e0 	.word	0x200003e0

08005880 <_Balloc>:
 8005880:	b570      	push	{r4, r5, r6, lr}
 8005882:	69c6      	ldr	r6, [r0, #28]
 8005884:	4604      	mov	r4, r0
 8005886:	460d      	mov	r5, r1
 8005888:	b976      	cbnz	r6, 80058a8 <_Balloc+0x28>
 800588a:	2010      	movs	r0, #16
 800588c:	f7ff ff42 	bl	8005714 <malloc>
 8005890:	4602      	mov	r2, r0
 8005892:	61e0      	str	r0, [r4, #28]
 8005894:	b920      	cbnz	r0, 80058a0 <_Balloc+0x20>
 8005896:	4b18      	ldr	r3, [pc, #96]	@ (80058f8 <_Balloc+0x78>)
 8005898:	4818      	ldr	r0, [pc, #96]	@ (80058fc <_Balloc+0x7c>)
 800589a:	216b      	movs	r1, #107	@ 0x6b
 800589c:	f000 fc34 	bl	8006108 <__assert_func>
 80058a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80058a4:	6006      	str	r6, [r0, #0]
 80058a6:	60c6      	str	r6, [r0, #12]
 80058a8:	69e6      	ldr	r6, [r4, #28]
 80058aa:	68f3      	ldr	r3, [r6, #12]
 80058ac:	b183      	cbz	r3, 80058d0 <_Balloc+0x50>
 80058ae:	69e3      	ldr	r3, [r4, #28]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80058b6:	b9b8      	cbnz	r0, 80058e8 <_Balloc+0x68>
 80058b8:	2101      	movs	r1, #1
 80058ba:	fa01 f605 	lsl.w	r6, r1, r5
 80058be:	1d72      	adds	r2, r6, #5
 80058c0:	0092      	lsls	r2, r2, #2
 80058c2:	4620      	mov	r0, r4
 80058c4:	f000 fc3e 	bl	8006144 <_calloc_r>
 80058c8:	b160      	cbz	r0, 80058e4 <_Balloc+0x64>
 80058ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80058ce:	e00e      	b.n	80058ee <_Balloc+0x6e>
 80058d0:	2221      	movs	r2, #33	@ 0x21
 80058d2:	2104      	movs	r1, #4
 80058d4:	4620      	mov	r0, r4
 80058d6:	f000 fc35 	bl	8006144 <_calloc_r>
 80058da:	69e3      	ldr	r3, [r4, #28]
 80058dc:	60f0      	str	r0, [r6, #12]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1e4      	bne.n	80058ae <_Balloc+0x2e>
 80058e4:	2000      	movs	r0, #0
 80058e6:	bd70      	pop	{r4, r5, r6, pc}
 80058e8:	6802      	ldr	r2, [r0, #0]
 80058ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80058ee:	2300      	movs	r3, #0
 80058f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80058f4:	e7f7      	b.n	80058e6 <_Balloc+0x66>
 80058f6:	bf00      	nop
 80058f8:	08006789 	.word	0x08006789
 80058fc:	08006809 	.word	0x08006809

08005900 <_Bfree>:
 8005900:	b570      	push	{r4, r5, r6, lr}
 8005902:	69c6      	ldr	r6, [r0, #28]
 8005904:	4605      	mov	r5, r0
 8005906:	460c      	mov	r4, r1
 8005908:	b976      	cbnz	r6, 8005928 <_Bfree+0x28>
 800590a:	2010      	movs	r0, #16
 800590c:	f7ff ff02 	bl	8005714 <malloc>
 8005910:	4602      	mov	r2, r0
 8005912:	61e8      	str	r0, [r5, #28]
 8005914:	b920      	cbnz	r0, 8005920 <_Bfree+0x20>
 8005916:	4b09      	ldr	r3, [pc, #36]	@ (800593c <_Bfree+0x3c>)
 8005918:	4809      	ldr	r0, [pc, #36]	@ (8005940 <_Bfree+0x40>)
 800591a:	218f      	movs	r1, #143	@ 0x8f
 800591c:	f000 fbf4 	bl	8006108 <__assert_func>
 8005920:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005924:	6006      	str	r6, [r0, #0]
 8005926:	60c6      	str	r6, [r0, #12]
 8005928:	b13c      	cbz	r4, 800593a <_Bfree+0x3a>
 800592a:	69eb      	ldr	r3, [r5, #28]
 800592c:	6862      	ldr	r2, [r4, #4]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005934:	6021      	str	r1, [r4, #0]
 8005936:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800593a:	bd70      	pop	{r4, r5, r6, pc}
 800593c:	08006789 	.word	0x08006789
 8005940:	08006809 	.word	0x08006809

08005944 <__multadd>:
 8005944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005948:	690d      	ldr	r5, [r1, #16]
 800594a:	4607      	mov	r7, r0
 800594c:	460c      	mov	r4, r1
 800594e:	461e      	mov	r6, r3
 8005950:	f101 0c14 	add.w	ip, r1, #20
 8005954:	2000      	movs	r0, #0
 8005956:	f8dc 3000 	ldr.w	r3, [ip]
 800595a:	b299      	uxth	r1, r3
 800595c:	fb02 6101 	mla	r1, r2, r1, r6
 8005960:	0c1e      	lsrs	r6, r3, #16
 8005962:	0c0b      	lsrs	r3, r1, #16
 8005964:	fb02 3306 	mla	r3, r2, r6, r3
 8005968:	b289      	uxth	r1, r1
 800596a:	3001      	adds	r0, #1
 800596c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005970:	4285      	cmp	r5, r0
 8005972:	f84c 1b04 	str.w	r1, [ip], #4
 8005976:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800597a:	dcec      	bgt.n	8005956 <__multadd+0x12>
 800597c:	b30e      	cbz	r6, 80059c2 <__multadd+0x7e>
 800597e:	68a3      	ldr	r3, [r4, #8]
 8005980:	42ab      	cmp	r3, r5
 8005982:	dc19      	bgt.n	80059b8 <__multadd+0x74>
 8005984:	6861      	ldr	r1, [r4, #4]
 8005986:	4638      	mov	r0, r7
 8005988:	3101      	adds	r1, #1
 800598a:	f7ff ff79 	bl	8005880 <_Balloc>
 800598e:	4680      	mov	r8, r0
 8005990:	b928      	cbnz	r0, 800599e <__multadd+0x5a>
 8005992:	4602      	mov	r2, r0
 8005994:	4b0c      	ldr	r3, [pc, #48]	@ (80059c8 <__multadd+0x84>)
 8005996:	480d      	ldr	r0, [pc, #52]	@ (80059cc <__multadd+0x88>)
 8005998:	21ba      	movs	r1, #186	@ 0xba
 800599a:	f000 fbb5 	bl	8006108 <__assert_func>
 800599e:	6922      	ldr	r2, [r4, #16]
 80059a0:	3202      	adds	r2, #2
 80059a2:	f104 010c 	add.w	r1, r4, #12
 80059a6:	0092      	lsls	r2, r2, #2
 80059a8:	300c      	adds	r0, #12
 80059aa:	f000 fb9f 	bl	80060ec <memcpy>
 80059ae:	4621      	mov	r1, r4
 80059b0:	4638      	mov	r0, r7
 80059b2:	f7ff ffa5 	bl	8005900 <_Bfree>
 80059b6:	4644      	mov	r4, r8
 80059b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80059bc:	3501      	adds	r5, #1
 80059be:	615e      	str	r6, [r3, #20]
 80059c0:	6125      	str	r5, [r4, #16]
 80059c2:	4620      	mov	r0, r4
 80059c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059c8:	080067f8 	.word	0x080067f8
 80059cc:	08006809 	.word	0x08006809

080059d0 <__hi0bits>:
 80059d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80059d4:	4603      	mov	r3, r0
 80059d6:	bf36      	itet	cc
 80059d8:	0403      	lslcc	r3, r0, #16
 80059da:	2000      	movcs	r0, #0
 80059dc:	2010      	movcc	r0, #16
 80059de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80059e2:	bf3c      	itt	cc
 80059e4:	021b      	lslcc	r3, r3, #8
 80059e6:	3008      	addcc	r0, #8
 80059e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059ec:	bf3c      	itt	cc
 80059ee:	011b      	lslcc	r3, r3, #4
 80059f0:	3004      	addcc	r0, #4
 80059f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059f6:	bf3c      	itt	cc
 80059f8:	009b      	lslcc	r3, r3, #2
 80059fa:	3002      	addcc	r0, #2
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	db05      	blt.n	8005a0c <__hi0bits+0x3c>
 8005a00:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005a04:	f100 0001 	add.w	r0, r0, #1
 8005a08:	bf08      	it	eq
 8005a0a:	2020      	moveq	r0, #32
 8005a0c:	4770      	bx	lr

08005a0e <__lo0bits>:
 8005a0e:	6803      	ldr	r3, [r0, #0]
 8005a10:	4602      	mov	r2, r0
 8005a12:	f013 0007 	ands.w	r0, r3, #7
 8005a16:	d00b      	beq.n	8005a30 <__lo0bits+0x22>
 8005a18:	07d9      	lsls	r1, r3, #31
 8005a1a:	d421      	bmi.n	8005a60 <__lo0bits+0x52>
 8005a1c:	0798      	lsls	r0, r3, #30
 8005a1e:	bf49      	itett	mi
 8005a20:	085b      	lsrmi	r3, r3, #1
 8005a22:	089b      	lsrpl	r3, r3, #2
 8005a24:	2001      	movmi	r0, #1
 8005a26:	6013      	strmi	r3, [r2, #0]
 8005a28:	bf5c      	itt	pl
 8005a2a:	6013      	strpl	r3, [r2, #0]
 8005a2c:	2002      	movpl	r0, #2
 8005a2e:	4770      	bx	lr
 8005a30:	b299      	uxth	r1, r3
 8005a32:	b909      	cbnz	r1, 8005a38 <__lo0bits+0x2a>
 8005a34:	0c1b      	lsrs	r3, r3, #16
 8005a36:	2010      	movs	r0, #16
 8005a38:	b2d9      	uxtb	r1, r3
 8005a3a:	b909      	cbnz	r1, 8005a40 <__lo0bits+0x32>
 8005a3c:	3008      	adds	r0, #8
 8005a3e:	0a1b      	lsrs	r3, r3, #8
 8005a40:	0719      	lsls	r1, r3, #28
 8005a42:	bf04      	itt	eq
 8005a44:	091b      	lsreq	r3, r3, #4
 8005a46:	3004      	addeq	r0, #4
 8005a48:	0799      	lsls	r1, r3, #30
 8005a4a:	bf04      	itt	eq
 8005a4c:	089b      	lsreq	r3, r3, #2
 8005a4e:	3002      	addeq	r0, #2
 8005a50:	07d9      	lsls	r1, r3, #31
 8005a52:	d403      	bmi.n	8005a5c <__lo0bits+0x4e>
 8005a54:	085b      	lsrs	r3, r3, #1
 8005a56:	f100 0001 	add.w	r0, r0, #1
 8005a5a:	d003      	beq.n	8005a64 <__lo0bits+0x56>
 8005a5c:	6013      	str	r3, [r2, #0]
 8005a5e:	4770      	bx	lr
 8005a60:	2000      	movs	r0, #0
 8005a62:	4770      	bx	lr
 8005a64:	2020      	movs	r0, #32
 8005a66:	4770      	bx	lr

08005a68 <__i2b>:
 8005a68:	b510      	push	{r4, lr}
 8005a6a:	460c      	mov	r4, r1
 8005a6c:	2101      	movs	r1, #1
 8005a6e:	f7ff ff07 	bl	8005880 <_Balloc>
 8005a72:	4602      	mov	r2, r0
 8005a74:	b928      	cbnz	r0, 8005a82 <__i2b+0x1a>
 8005a76:	4b05      	ldr	r3, [pc, #20]	@ (8005a8c <__i2b+0x24>)
 8005a78:	4805      	ldr	r0, [pc, #20]	@ (8005a90 <__i2b+0x28>)
 8005a7a:	f240 1145 	movw	r1, #325	@ 0x145
 8005a7e:	f000 fb43 	bl	8006108 <__assert_func>
 8005a82:	2301      	movs	r3, #1
 8005a84:	6144      	str	r4, [r0, #20]
 8005a86:	6103      	str	r3, [r0, #16]
 8005a88:	bd10      	pop	{r4, pc}
 8005a8a:	bf00      	nop
 8005a8c:	080067f8 	.word	0x080067f8
 8005a90:	08006809 	.word	0x08006809

08005a94 <__multiply>:
 8005a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a98:	4617      	mov	r7, r2
 8005a9a:	690a      	ldr	r2, [r1, #16]
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	bfa8      	it	ge
 8005aa2:	463b      	movge	r3, r7
 8005aa4:	4689      	mov	r9, r1
 8005aa6:	bfa4      	itt	ge
 8005aa8:	460f      	movge	r7, r1
 8005aaa:	4699      	movge	r9, r3
 8005aac:	693d      	ldr	r5, [r7, #16]
 8005aae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	6879      	ldr	r1, [r7, #4]
 8005ab6:	eb05 060a 	add.w	r6, r5, sl
 8005aba:	42b3      	cmp	r3, r6
 8005abc:	b085      	sub	sp, #20
 8005abe:	bfb8      	it	lt
 8005ac0:	3101      	addlt	r1, #1
 8005ac2:	f7ff fedd 	bl	8005880 <_Balloc>
 8005ac6:	b930      	cbnz	r0, 8005ad6 <__multiply+0x42>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	4b41      	ldr	r3, [pc, #260]	@ (8005bd0 <__multiply+0x13c>)
 8005acc:	4841      	ldr	r0, [pc, #260]	@ (8005bd4 <__multiply+0x140>)
 8005ace:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005ad2:	f000 fb19 	bl	8006108 <__assert_func>
 8005ad6:	f100 0414 	add.w	r4, r0, #20
 8005ada:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8005ade:	4623      	mov	r3, r4
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	4573      	cmp	r3, lr
 8005ae4:	d320      	bcc.n	8005b28 <__multiply+0x94>
 8005ae6:	f107 0814 	add.w	r8, r7, #20
 8005aea:	f109 0114 	add.w	r1, r9, #20
 8005aee:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8005af2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8005af6:	9302      	str	r3, [sp, #8]
 8005af8:	1beb      	subs	r3, r5, r7
 8005afa:	3b15      	subs	r3, #21
 8005afc:	f023 0303 	bic.w	r3, r3, #3
 8005b00:	3304      	adds	r3, #4
 8005b02:	3715      	adds	r7, #21
 8005b04:	42bd      	cmp	r5, r7
 8005b06:	bf38      	it	cc
 8005b08:	2304      	movcc	r3, #4
 8005b0a:	9301      	str	r3, [sp, #4]
 8005b0c:	9b02      	ldr	r3, [sp, #8]
 8005b0e:	9103      	str	r1, [sp, #12]
 8005b10:	428b      	cmp	r3, r1
 8005b12:	d80c      	bhi.n	8005b2e <__multiply+0x9a>
 8005b14:	2e00      	cmp	r6, #0
 8005b16:	dd03      	ble.n	8005b20 <__multiply+0x8c>
 8005b18:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d055      	beq.n	8005bcc <__multiply+0x138>
 8005b20:	6106      	str	r6, [r0, #16]
 8005b22:	b005      	add	sp, #20
 8005b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b28:	f843 2b04 	str.w	r2, [r3], #4
 8005b2c:	e7d9      	b.n	8005ae2 <__multiply+0x4e>
 8005b2e:	f8b1 a000 	ldrh.w	sl, [r1]
 8005b32:	f1ba 0f00 	cmp.w	sl, #0
 8005b36:	d01f      	beq.n	8005b78 <__multiply+0xe4>
 8005b38:	46c4      	mov	ip, r8
 8005b3a:	46a1      	mov	r9, r4
 8005b3c:	2700      	movs	r7, #0
 8005b3e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005b42:	f8d9 3000 	ldr.w	r3, [r9]
 8005b46:	fa1f fb82 	uxth.w	fp, r2
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	fb0a 330b 	mla	r3, sl, fp, r3
 8005b50:	443b      	add	r3, r7
 8005b52:	f8d9 7000 	ldr.w	r7, [r9]
 8005b56:	0c12      	lsrs	r2, r2, #16
 8005b58:	0c3f      	lsrs	r7, r7, #16
 8005b5a:	fb0a 7202 	mla	r2, sl, r2, r7
 8005b5e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b68:	4565      	cmp	r5, ip
 8005b6a:	f849 3b04 	str.w	r3, [r9], #4
 8005b6e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8005b72:	d8e4      	bhi.n	8005b3e <__multiply+0xaa>
 8005b74:	9b01      	ldr	r3, [sp, #4]
 8005b76:	50e7      	str	r7, [r4, r3]
 8005b78:	9b03      	ldr	r3, [sp, #12]
 8005b7a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005b7e:	3104      	adds	r1, #4
 8005b80:	f1b9 0f00 	cmp.w	r9, #0
 8005b84:	d020      	beq.n	8005bc8 <__multiply+0x134>
 8005b86:	6823      	ldr	r3, [r4, #0]
 8005b88:	4647      	mov	r7, r8
 8005b8a:	46a4      	mov	ip, r4
 8005b8c:	f04f 0a00 	mov.w	sl, #0
 8005b90:	f8b7 b000 	ldrh.w	fp, [r7]
 8005b94:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8005b98:	fb09 220b 	mla	r2, r9, fp, r2
 8005b9c:	4452      	add	r2, sl
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ba4:	f84c 3b04 	str.w	r3, [ip], #4
 8005ba8:	f857 3b04 	ldr.w	r3, [r7], #4
 8005bac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005bb0:	f8bc 3000 	ldrh.w	r3, [ip]
 8005bb4:	fb09 330a 	mla	r3, r9, sl, r3
 8005bb8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8005bbc:	42bd      	cmp	r5, r7
 8005bbe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005bc2:	d8e5      	bhi.n	8005b90 <__multiply+0xfc>
 8005bc4:	9a01      	ldr	r2, [sp, #4]
 8005bc6:	50a3      	str	r3, [r4, r2]
 8005bc8:	3404      	adds	r4, #4
 8005bca:	e79f      	b.n	8005b0c <__multiply+0x78>
 8005bcc:	3e01      	subs	r6, #1
 8005bce:	e7a1      	b.n	8005b14 <__multiply+0x80>
 8005bd0:	080067f8 	.word	0x080067f8
 8005bd4:	08006809 	.word	0x08006809

08005bd8 <__pow5mult>:
 8005bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bdc:	4615      	mov	r5, r2
 8005bde:	f012 0203 	ands.w	r2, r2, #3
 8005be2:	4607      	mov	r7, r0
 8005be4:	460e      	mov	r6, r1
 8005be6:	d007      	beq.n	8005bf8 <__pow5mult+0x20>
 8005be8:	4c25      	ldr	r4, [pc, #148]	@ (8005c80 <__pow5mult+0xa8>)
 8005bea:	3a01      	subs	r2, #1
 8005bec:	2300      	movs	r3, #0
 8005bee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005bf2:	f7ff fea7 	bl	8005944 <__multadd>
 8005bf6:	4606      	mov	r6, r0
 8005bf8:	10ad      	asrs	r5, r5, #2
 8005bfa:	d03d      	beq.n	8005c78 <__pow5mult+0xa0>
 8005bfc:	69fc      	ldr	r4, [r7, #28]
 8005bfe:	b97c      	cbnz	r4, 8005c20 <__pow5mult+0x48>
 8005c00:	2010      	movs	r0, #16
 8005c02:	f7ff fd87 	bl	8005714 <malloc>
 8005c06:	4602      	mov	r2, r0
 8005c08:	61f8      	str	r0, [r7, #28]
 8005c0a:	b928      	cbnz	r0, 8005c18 <__pow5mult+0x40>
 8005c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8005c84 <__pow5mult+0xac>)
 8005c0e:	481e      	ldr	r0, [pc, #120]	@ (8005c88 <__pow5mult+0xb0>)
 8005c10:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005c14:	f000 fa78 	bl	8006108 <__assert_func>
 8005c18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005c1c:	6004      	str	r4, [r0, #0]
 8005c1e:	60c4      	str	r4, [r0, #12]
 8005c20:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005c24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005c28:	b94c      	cbnz	r4, 8005c3e <__pow5mult+0x66>
 8005c2a:	f240 2171 	movw	r1, #625	@ 0x271
 8005c2e:	4638      	mov	r0, r7
 8005c30:	f7ff ff1a 	bl	8005a68 <__i2b>
 8005c34:	2300      	movs	r3, #0
 8005c36:	f8c8 0008 	str.w	r0, [r8, #8]
 8005c3a:	4604      	mov	r4, r0
 8005c3c:	6003      	str	r3, [r0, #0]
 8005c3e:	f04f 0900 	mov.w	r9, #0
 8005c42:	07eb      	lsls	r3, r5, #31
 8005c44:	d50a      	bpl.n	8005c5c <__pow5mult+0x84>
 8005c46:	4631      	mov	r1, r6
 8005c48:	4622      	mov	r2, r4
 8005c4a:	4638      	mov	r0, r7
 8005c4c:	f7ff ff22 	bl	8005a94 <__multiply>
 8005c50:	4631      	mov	r1, r6
 8005c52:	4680      	mov	r8, r0
 8005c54:	4638      	mov	r0, r7
 8005c56:	f7ff fe53 	bl	8005900 <_Bfree>
 8005c5a:	4646      	mov	r6, r8
 8005c5c:	106d      	asrs	r5, r5, #1
 8005c5e:	d00b      	beq.n	8005c78 <__pow5mult+0xa0>
 8005c60:	6820      	ldr	r0, [r4, #0]
 8005c62:	b938      	cbnz	r0, 8005c74 <__pow5mult+0x9c>
 8005c64:	4622      	mov	r2, r4
 8005c66:	4621      	mov	r1, r4
 8005c68:	4638      	mov	r0, r7
 8005c6a:	f7ff ff13 	bl	8005a94 <__multiply>
 8005c6e:	6020      	str	r0, [r4, #0]
 8005c70:	f8c0 9000 	str.w	r9, [r0]
 8005c74:	4604      	mov	r4, r0
 8005c76:	e7e4      	b.n	8005c42 <__pow5mult+0x6a>
 8005c78:	4630      	mov	r0, r6
 8005c7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c7e:	bf00      	nop
 8005c80:	080068bc 	.word	0x080068bc
 8005c84:	08006789 	.word	0x08006789
 8005c88:	08006809 	.word	0x08006809

08005c8c <__lshift>:
 8005c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c90:	460c      	mov	r4, r1
 8005c92:	6849      	ldr	r1, [r1, #4]
 8005c94:	6923      	ldr	r3, [r4, #16]
 8005c96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005c9a:	68a3      	ldr	r3, [r4, #8]
 8005c9c:	4607      	mov	r7, r0
 8005c9e:	4691      	mov	r9, r2
 8005ca0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005ca4:	f108 0601 	add.w	r6, r8, #1
 8005ca8:	42b3      	cmp	r3, r6
 8005caa:	db0b      	blt.n	8005cc4 <__lshift+0x38>
 8005cac:	4638      	mov	r0, r7
 8005cae:	f7ff fde7 	bl	8005880 <_Balloc>
 8005cb2:	4605      	mov	r5, r0
 8005cb4:	b948      	cbnz	r0, 8005cca <__lshift+0x3e>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	4b28      	ldr	r3, [pc, #160]	@ (8005d5c <__lshift+0xd0>)
 8005cba:	4829      	ldr	r0, [pc, #164]	@ (8005d60 <__lshift+0xd4>)
 8005cbc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005cc0:	f000 fa22 	bl	8006108 <__assert_func>
 8005cc4:	3101      	adds	r1, #1
 8005cc6:	005b      	lsls	r3, r3, #1
 8005cc8:	e7ee      	b.n	8005ca8 <__lshift+0x1c>
 8005cca:	2300      	movs	r3, #0
 8005ccc:	f100 0114 	add.w	r1, r0, #20
 8005cd0:	f100 0210 	add.w	r2, r0, #16
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	4553      	cmp	r3, sl
 8005cd8:	db33      	blt.n	8005d42 <__lshift+0xb6>
 8005cda:	6920      	ldr	r0, [r4, #16]
 8005cdc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005ce0:	f104 0314 	add.w	r3, r4, #20
 8005ce4:	f019 091f 	ands.w	r9, r9, #31
 8005ce8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005cec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005cf0:	d02b      	beq.n	8005d4a <__lshift+0xbe>
 8005cf2:	f1c9 0e20 	rsb	lr, r9, #32
 8005cf6:	468a      	mov	sl, r1
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	6818      	ldr	r0, [r3, #0]
 8005cfc:	fa00 f009 	lsl.w	r0, r0, r9
 8005d00:	4310      	orrs	r0, r2
 8005d02:	f84a 0b04 	str.w	r0, [sl], #4
 8005d06:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d0a:	459c      	cmp	ip, r3
 8005d0c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005d10:	d8f3      	bhi.n	8005cfa <__lshift+0x6e>
 8005d12:	ebac 0304 	sub.w	r3, ip, r4
 8005d16:	3b15      	subs	r3, #21
 8005d18:	f023 0303 	bic.w	r3, r3, #3
 8005d1c:	3304      	adds	r3, #4
 8005d1e:	f104 0015 	add.w	r0, r4, #21
 8005d22:	4560      	cmp	r0, ip
 8005d24:	bf88      	it	hi
 8005d26:	2304      	movhi	r3, #4
 8005d28:	50ca      	str	r2, [r1, r3]
 8005d2a:	b10a      	cbz	r2, 8005d30 <__lshift+0xa4>
 8005d2c:	f108 0602 	add.w	r6, r8, #2
 8005d30:	3e01      	subs	r6, #1
 8005d32:	4638      	mov	r0, r7
 8005d34:	612e      	str	r6, [r5, #16]
 8005d36:	4621      	mov	r1, r4
 8005d38:	f7ff fde2 	bl	8005900 <_Bfree>
 8005d3c:	4628      	mov	r0, r5
 8005d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d42:	f842 0f04 	str.w	r0, [r2, #4]!
 8005d46:	3301      	adds	r3, #1
 8005d48:	e7c5      	b.n	8005cd6 <__lshift+0x4a>
 8005d4a:	3904      	subs	r1, #4
 8005d4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d50:	f841 2f04 	str.w	r2, [r1, #4]!
 8005d54:	459c      	cmp	ip, r3
 8005d56:	d8f9      	bhi.n	8005d4c <__lshift+0xc0>
 8005d58:	e7ea      	b.n	8005d30 <__lshift+0xa4>
 8005d5a:	bf00      	nop
 8005d5c:	080067f8 	.word	0x080067f8
 8005d60:	08006809 	.word	0x08006809

08005d64 <__mcmp>:
 8005d64:	690a      	ldr	r2, [r1, #16]
 8005d66:	4603      	mov	r3, r0
 8005d68:	6900      	ldr	r0, [r0, #16]
 8005d6a:	1a80      	subs	r0, r0, r2
 8005d6c:	b530      	push	{r4, r5, lr}
 8005d6e:	d10e      	bne.n	8005d8e <__mcmp+0x2a>
 8005d70:	3314      	adds	r3, #20
 8005d72:	3114      	adds	r1, #20
 8005d74:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005d78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005d7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005d80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005d84:	4295      	cmp	r5, r2
 8005d86:	d003      	beq.n	8005d90 <__mcmp+0x2c>
 8005d88:	d205      	bcs.n	8005d96 <__mcmp+0x32>
 8005d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d8e:	bd30      	pop	{r4, r5, pc}
 8005d90:	42a3      	cmp	r3, r4
 8005d92:	d3f3      	bcc.n	8005d7c <__mcmp+0x18>
 8005d94:	e7fb      	b.n	8005d8e <__mcmp+0x2a>
 8005d96:	2001      	movs	r0, #1
 8005d98:	e7f9      	b.n	8005d8e <__mcmp+0x2a>
	...

08005d9c <__mdiff>:
 8005d9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da0:	4689      	mov	r9, r1
 8005da2:	4606      	mov	r6, r0
 8005da4:	4611      	mov	r1, r2
 8005da6:	4648      	mov	r0, r9
 8005da8:	4614      	mov	r4, r2
 8005daa:	f7ff ffdb 	bl	8005d64 <__mcmp>
 8005dae:	1e05      	subs	r5, r0, #0
 8005db0:	d112      	bne.n	8005dd8 <__mdiff+0x3c>
 8005db2:	4629      	mov	r1, r5
 8005db4:	4630      	mov	r0, r6
 8005db6:	f7ff fd63 	bl	8005880 <_Balloc>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	b928      	cbnz	r0, 8005dca <__mdiff+0x2e>
 8005dbe:	4b3f      	ldr	r3, [pc, #252]	@ (8005ebc <__mdiff+0x120>)
 8005dc0:	f240 2137 	movw	r1, #567	@ 0x237
 8005dc4:	483e      	ldr	r0, [pc, #248]	@ (8005ec0 <__mdiff+0x124>)
 8005dc6:	f000 f99f 	bl	8006108 <__assert_func>
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005dd0:	4610      	mov	r0, r2
 8005dd2:	b003      	add	sp, #12
 8005dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dd8:	bfbc      	itt	lt
 8005dda:	464b      	movlt	r3, r9
 8005ddc:	46a1      	movlt	r9, r4
 8005dde:	4630      	mov	r0, r6
 8005de0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005de4:	bfba      	itte	lt
 8005de6:	461c      	movlt	r4, r3
 8005de8:	2501      	movlt	r5, #1
 8005dea:	2500      	movge	r5, #0
 8005dec:	f7ff fd48 	bl	8005880 <_Balloc>
 8005df0:	4602      	mov	r2, r0
 8005df2:	b918      	cbnz	r0, 8005dfc <__mdiff+0x60>
 8005df4:	4b31      	ldr	r3, [pc, #196]	@ (8005ebc <__mdiff+0x120>)
 8005df6:	f240 2145 	movw	r1, #581	@ 0x245
 8005dfa:	e7e3      	b.n	8005dc4 <__mdiff+0x28>
 8005dfc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005e00:	6926      	ldr	r6, [r4, #16]
 8005e02:	60c5      	str	r5, [r0, #12]
 8005e04:	f109 0310 	add.w	r3, r9, #16
 8005e08:	f109 0514 	add.w	r5, r9, #20
 8005e0c:	f104 0e14 	add.w	lr, r4, #20
 8005e10:	f100 0b14 	add.w	fp, r0, #20
 8005e14:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005e18:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005e1c:	9301      	str	r3, [sp, #4]
 8005e1e:	46d9      	mov	r9, fp
 8005e20:	f04f 0c00 	mov.w	ip, #0
 8005e24:	9b01      	ldr	r3, [sp, #4]
 8005e26:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005e2a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005e2e:	9301      	str	r3, [sp, #4]
 8005e30:	fa1f f38a 	uxth.w	r3, sl
 8005e34:	4619      	mov	r1, r3
 8005e36:	b283      	uxth	r3, r0
 8005e38:	1acb      	subs	r3, r1, r3
 8005e3a:	0c00      	lsrs	r0, r0, #16
 8005e3c:	4463      	add	r3, ip
 8005e3e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005e42:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005e4c:	4576      	cmp	r6, lr
 8005e4e:	f849 3b04 	str.w	r3, [r9], #4
 8005e52:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005e56:	d8e5      	bhi.n	8005e24 <__mdiff+0x88>
 8005e58:	1b33      	subs	r3, r6, r4
 8005e5a:	3b15      	subs	r3, #21
 8005e5c:	f023 0303 	bic.w	r3, r3, #3
 8005e60:	3415      	adds	r4, #21
 8005e62:	3304      	adds	r3, #4
 8005e64:	42a6      	cmp	r6, r4
 8005e66:	bf38      	it	cc
 8005e68:	2304      	movcc	r3, #4
 8005e6a:	441d      	add	r5, r3
 8005e6c:	445b      	add	r3, fp
 8005e6e:	461e      	mov	r6, r3
 8005e70:	462c      	mov	r4, r5
 8005e72:	4544      	cmp	r4, r8
 8005e74:	d30e      	bcc.n	8005e94 <__mdiff+0xf8>
 8005e76:	f108 0103 	add.w	r1, r8, #3
 8005e7a:	1b49      	subs	r1, r1, r5
 8005e7c:	f021 0103 	bic.w	r1, r1, #3
 8005e80:	3d03      	subs	r5, #3
 8005e82:	45a8      	cmp	r8, r5
 8005e84:	bf38      	it	cc
 8005e86:	2100      	movcc	r1, #0
 8005e88:	440b      	add	r3, r1
 8005e8a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005e8e:	b191      	cbz	r1, 8005eb6 <__mdiff+0x11a>
 8005e90:	6117      	str	r7, [r2, #16]
 8005e92:	e79d      	b.n	8005dd0 <__mdiff+0x34>
 8005e94:	f854 1b04 	ldr.w	r1, [r4], #4
 8005e98:	46e6      	mov	lr, ip
 8005e9a:	0c08      	lsrs	r0, r1, #16
 8005e9c:	fa1c fc81 	uxtah	ip, ip, r1
 8005ea0:	4471      	add	r1, lr
 8005ea2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005ea6:	b289      	uxth	r1, r1
 8005ea8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005eac:	f846 1b04 	str.w	r1, [r6], #4
 8005eb0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005eb4:	e7dd      	b.n	8005e72 <__mdiff+0xd6>
 8005eb6:	3f01      	subs	r7, #1
 8005eb8:	e7e7      	b.n	8005e8a <__mdiff+0xee>
 8005eba:	bf00      	nop
 8005ebc:	080067f8 	.word	0x080067f8
 8005ec0:	08006809 	.word	0x08006809

08005ec4 <__d2b>:
 8005ec4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005ec8:	460f      	mov	r7, r1
 8005eca:	2101      	movs	r1, #1
 8005ecc:	ec59 8b10 	vmov	r8, r9, d0
 8005ed0:	4616      	mov	r6, r2
 8005ed2:	f7ff fcd5 	bl	8005880 <_Balloc>
 8005ed6:	4604      	mov	r4, r0
 8005ed8:	b930      	cbnz	r0, 8005ee8 <__d2b+0x24>
 8005eda:	4602      	mov	r2, r0
 8005edc:	4b23      	ldr	r3, [pc, #140]	@ (8005f6c <__d2b+0xa8>)
 8005ede:	4824      	ldr	r0, [pc, #144]	@ (8005f70 <__d2b+0xac>)
 8005ee0:	f240 310f 	movw	r1, #783	@ 0x30f
 8005ee4:	f000 f910 	bl	8006108 <__assert_func>
 8005ee8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005eec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005ef0:	b10d      	cbz	r5, 8005ef6 <__d2b+0x32>
 8005ef2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ef6:	9301      	str	r3, [sp, #4]
 8005ef8:	f1b8 0300 	subs.w	r3, r8, #0
 8005efc:	d023      	beq.n	8005f46 <__d2b+0x82>
 8005efe:	4668      	mov	r0, sp
 8005f00:	9300      	str	r3, [sp, #0]
 8005f02:	f7ff fd84 	bl	8005a0e <__lo0bits>
 8005f06:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005f0a:	b1d0      	cbz	r0, 8005f42 <__d2b+0x7e>
 8005f0c:	f1c0 0320 	rsb	r3, r0, #32
 8005f10:	fa02 f303 	lsl.w	r3, r2, r3
 8005f14:	430b      	orrs	r3, r1
 8005f16:	40c2      	lsrs	r2, r0
 8005f18:	6163      	str	r3, [r4, #20]
 8005f1a:	9201      	str	r2, [sp, #4]
 8005f1c:	9b01      	ldr	r3, [sp, #4]
 8005f1e:	61a3      	str	r3, [r4, #24]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	bf0c      	ite	eq
 8005f24:	2201      	moveq	r2, #1
 8005f26:	2202      	movne	r2, #2
 8005f28:	6122      	str	r2, [r4, #16]
 8005f2a:	b1a5      	cbz	r5, 8005f56 <__d2b+0x92>
 8005f2c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005f30:	4405      	add	r5, r0
 8005f32:	603d      	str	r5, [r7, #0]
 8005f34:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005f38:	6030      	str	r0, [r6, #0]
 8005f3a:	4620      	mov	r0, r4
 8005f3c:	b003      	add	sp, #12
 8005f3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f42:	6161      	str	r1, [r4, #20]
 8005f44:	e7ea      	b.n	8005f1c <__d2b+0x58>
 8005f46:	a801      	add	r0, sp, #4
 8005f48:	f7ff fd61 	bl	8005a0e <__lo0bits>
 8005f4c:	9b01      	ldr	r3, [sp, #4]
 8005f4e:	6163      	str	r3, [r4, #20]
 8005f50:	3020      	adds	r0, #32
 8005f52:	2201      	movs	r2, #1
 8005f54:	e7e8      	b.n	8005f28 <__d2b+0x64>
 8005f56:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005f5a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005f5e:	6038      	str	r0, [r7, #0]
 8005f60:	6918      	ldr	r0, [r3, #16]
 8005f62:	f7ff fd35 	bl	80059d0 <__hi0bits>
 8005f66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005f6a:	e7e5      	b.n	8005f38 <__d2b+0x74>
 8005f6c:	080067f8 	.word	0x080067f8
 8005f70:	08006809 	.word	0x08006809

08005f74 <__sflush_r>:
 8005f74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f7c:	0716      	lsls	r6, r2, #28
 8005f7e:	4605      	mov	r5, r0
 8005f80:	460c      	mov	r4, r1
 8005f82:	d454      	bmi.n	800602e <__sflush_r+0xba>
 8005f84:	684b      	ldr	r3, [r1, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	dc02      	bgt.n	8005f90 <__sflush_r+0x1c>
 8005f8a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	dd48      	ble.n	8006022 <__sflush_r+0xae>
 8005f90:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005f92:	2e00      	cmp	r6, #0
 8005f94:	d045      	beq.n	8006022 <__sflush_r+0xae>
 8005f96:	2300      	movs	r3, #0
 8005f98:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005f9c:	682f      	ldr	r7, [r5, #0]
 8005f9e:	6a21      	ldr	r1, [r4, #32]
 8005fa0:	602b      	str	r3, [r5, #0]
 8005fa2:	d030      	beq.n	8006006 <__sflush_r+0x92>
 8005fa4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005fa6:	89a3      	ldrh	r3, [r4, #12]
 8005fa8:	0759      	lsls	r1, r3, #29
 8005faa:	d505      	bpl.n	8005fb8 <__sflush_r+0x44>
 8005fac:	6863      	ldr	r3, [r4, #4]
 8005fae:	1ad2      	subs	r2, r2, r3
 8005fb0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005fb2:	b10b      	cbz	r3, 8005fb8 <__sflush_r+0x44>
 8005fb4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005fb6:	1ad2      	subs	r2, r2, r3
 8005fb8:	2300      	movs	r3, #0
 8005fba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005fbc:	6a21      	ldr	r1, [r4, #32]
 8005fbe:	4628      	mov	r0, r5
 8005fc0:	47b0      	blx	r6
 8005fc2:	1c43      	adds	r3, r0, #1
 8005fc4:	89a3      	ldrh	r3, [r4, #12]
 8005fc6:	d106      	bne.n	8005fd6 <__sflush_r+0x62>
 8005fc8:	6829      	ldr	r1, [r5, #0]
 8005fca:	291d      	cmp	r1, #29
 8005fcc:	d82b      	bhi.n	8006026 <__sflush_r+0xb2>
 8005fce:	4a2a      	ldr	r2, [pc, #168]	@ (8006078 <__sflush_r+0x104>)
 8005fd0:	40ca      	lsrs	r2, r1
 8005fd2:	07d6      	lsls	r6, r2, #31
 8005fd4:	d527      	bpl.n	8006026 <__sflush_r+0xb2>
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	6062      	str	r2, [r4, #4]
 8005fda:	04d9      	lsls	r1, r3, #19
 8005fdc:	6922      	ldr	r2, [r4, #16]
 8005fde:	6022      	str	r2, [r4, #0]
 8005fe0:	d504      	bpl.n	8005fec <__sflush_r+0x78>
 8005fe2:	1c42      	adds	r2, r0, #1
 8005fe4:	d101      	bne.n	8005fea <__sflush_r+0x76>
 8005fe6:	682b      	ldr	r3, [r5, #0]
 8005fe8:	b903      	cbnz	r3, 8005fec <__sflush_r+0x78>
 8005fea:	6560      	str	r0, [r4, #84]	@ 0x54
 8005fec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005fee:	602f      	str	r7, [r5, #0]
 8005ff0:	b1b9      	cbz	r1, 8006022 <__sflush_r+0xae>
 8005ff2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005ff6:	4299      	cmp	r1, r3
 8005ff8:	d002      	beq.n	8006000 <__sflush_r+0x8c>
 8005ffa:	4628      	mov	r0, r5
 8005ffc:	f7ff fb40 	bl	8005680 <_free_r>
 8006000:	2300      	movs	r3, #0
 8006002:	6363      	str	r3, [r4, #52]	@ 0x34
 8006004:	e00d      	b.n	8006022 <__sflush_r+0xae>
 8006006:	2301      	movs	r3, #1
 8006008:	4628      	mov	r0, r5
 800600a:	47b0      	blx	r6
 800600c:	4602      	mov	r2, r0
 800600e:	1c50      	adds	r0, r2, #1
 8006010:	d1c9      	bne.n	8005fa6 <__sflush_r+0x32>
 8006012:	682b      	ldr	r3, [r5, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d0c6      	beq.n	8005fa6 <__sflush_r+0x32>
 8006018:	2b1d      	cmp	r3, #29
 800601a:	d001      	beq.n	8006020 <__sflush_r+0xac>
 800601c:	2b16      	cmp	r3, #22
 800601e:	d11e      	bne.n	800605e <__sflush_r+0xea>
 8006020:	602f      	str	r7, [r5, #0]
 8006022:	2000      	movs	r0, #0
 8006024:	e022      	b.n	800606c <__sflush_r+0xf8>
 8006026:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800602a:	b21b      	sxth	r3, r3
 800602c:	e01b      	b.n	8006066 <__sflush_r+0xf2>
 800602e:	690f      	ldr	r7, [r1, #16]
 8006030:	2f00      	cmp	r7, #0
 8006032:	d0f6      	beq.n	8006022 <__sflush_r+0xae>
 8006034:	0793      	lsls	r3, r2, #30
 8006036:	680e      	ldr	r6, [r1, #0]
 8006038:	bf08      	it	eq
 800603a:	694b      	ldreq	r3, [r1, #20]
 800603c:	600f      	str	r7, [r1, #0]
 800603e:	bf18      	it	ne
 8006040:	2300      	movne	r3, #0
 8006042:	eba6 0807 	sub.w	r8, r6, r7
 8006046:	608b      	str	r3, [r1, #8]
 8006048:	f1b8 0f00 	cmp.w	r8, #0
 800604c:	dde9      	ble.n	8006022 <__sflush_r+0xae>
 800604e:	6a21      	ldr	r1, [r4, #32]
 8006050:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006052:	4643      	mov	r3, r8
 8006054:	463a      	mov	r2, r7
 8006056:	4628      	mov	r0, r5
 8006058:	47b0      	blx	r6
 800605a:	2800      	cmp	r0, #0
 800605c:	dc08      	bgt.n	8006070 <__sflush_r+0xfc>
 800605e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006062:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006066:	81a3      	strh	r3, [r4, #12]
 8006068:	f04f 30ff 	mov.w	r0, #4294967295
 800606c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006070:	4407      	add	r7, r0
 8006072:	eba8 0800 	sub.w	r8, r8, r0
 8006076:	e7e7      	b.n	8006048 <__sflush_r+0xd4>
 8006078:	20400001 	.word	0x20400001

0800607c <_fflush_r>:
 800607c:	b538      	push	{r3, r4, r5, lr}
 800607e:	690b      	ldr	r3, [r1, #16]
 8006080:	4605      	mov	r5, r0
 8006082:	460c      	mov	r4, r1
 8006084:	b913      	cbnz	r3, 800608c <_fflush_r+0x10>
 8006086:	2500      	movs	r5, #0
 8006088:	4628      	mov	r0, r5
 800608a:	bd38      	pop	{r3, r4, r5, pc}
 800608c:	b118      	cbz	r0, 8006096 <_fflush_r+0x1a>
 800608e:	6a03      	ldr	r3, [r0, #32]
 8006090:	b90b      	cbnz	r3, 8006096 <_fflush_r+0x1a>
 8006092:	f7fe fba1 	bl	80047d8 <__sinit>
 8006096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d0f3      	beq.n	8006086 <_fflush_r+0xa>
 800609e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80060a0:	07d0      	lsls	r0, r2, #31
 80060a2:	d404      	bmi.n	80060ae <_fflush_r+0x32>
 80060a4:	0599      	lsls	r1, r3, #22
 80060a6:	d402      	bmi.n	80060ae <_fflush_r+0x32>
 80060a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060aa:	f7fe fc8c 	bl	80049c6 <__retarget_lock_acquire_recursive>
 80060ae:	4628      	mov	r0, r5
 80060b0:	4621      	mov	r1, r4
 80060b2:	f7ff ff5f 	bl	8005f74 <__sflush_r>
 80060b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80060b8:	07da      	lsls	r2, r3, #31
 80060ba:	4605      	mov	r5, r0
 80060bc:	d4e4      	bmi.n	8006088 <_fflush_r+0xc>
 80060be:	89a3      	ldrh	r3, [r4, #12]
 80060c0:	059b      	lsls	r3, r3, #22
 80060c2:	d4e1      	bmi.n	8006088 <_fflush_r+0xc>
 80060c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060c6:	f7fe fc7f 	bl	80049c8 <__retarget_lock_release_recursive>
 80060ca:	e7dd      	b.n	8006088 <_fflush_r+0xc>

080060cc <_sbrk_r>:
 80060cc:	b538      	push	{r3, r4, r5, lr}
 80060ce:	4d06      	ldr	r5, [pc, #24]	@ (80060e8 <_sbrk_r+0x1c>)
 80060d0:	2300      	movs	r3, #0
 80060d2:	4604      	mov	r4, r0
 80060d4:	4608      	mov	r0, r1
 80060d6:	602b      	str	r3, [r5, #0]
 80060d8:	f7fb fb12 	bl	8001700 <_sbrk>
 80060dc:	1c43      	adds	r3, r0, #1
 80060de:	d102      	bne.n	80060e6 <_sbrk_r+0x1a>
 80060e0:	682b      	ldr	r3, [r5, #0]
 80060e2:	b103      	cbz	r3, 80060e6 <_sbrk_r+0x1a>
 80060e4:	6023      	str	r3, [r4, #0]
 80060e6:	bd38      	pop	{r3, r4, r5, pc}
 80060e8:	200003dc 	.word	0x200003dc

080060ec <memcpy>:
 80060ec:	440a      	add	r2, r1
 80060ee:	4291      	cmp	r1, r2
 80060f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80060f4:	d100      	bne.n	80060f8 <memcpy+0xc>
 80060f6:	4770      	bx	lr
 80060f8:	b510      	push	{r4, lr}
 80060fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006102:	4291      	cmp	r1, r2
 8006104:	d1f9      	bne.n	80060fa <memcpy+0xe>
 8006106:	bd10      	pop	{r4, pc}

08006108 <__assert_func>:
 8006108:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800610a:	4614      	mov	r4, r2
 800610c:	461a      	mov	r2, r3
 800610e:	4b09      	ldr	r3, [pc, #36]	@ (8006134 <__assert_func+0x2c>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4605      	mov	r5, r0
 8006114:	68d8      	ldr	r0, [r3, #12]
 8006116:	b14c      	cbz	r4, 800612c <__assert_func+0x24>
 8006118:	4b07      	ldr	r3, [pc, #28]	@ (8006138 <__assert_func+0x30>)
 800611a:	9100      	str	r1, [sp, #0]
 800611c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006120:	4906      	ldr	r1, [pc, #24]	@ (800613c <__assert_func+0x34>)
 8006122:	462b      	mov	r3, r5
 8006124:	f000 f842 	bl	80061ac <fiprintf>
 8006128:	f000 f852 	bl	80061d0 <abort>
 800612c:	4b04      	ldr	r3, [pc, #16]	@ (8006140 <__assert_func+0x38>)
 800612e:	461c      	mov	r4, r3
 8006130:	e7f3      	b.n	800611a <__assert_func+0x12>
 8006132:	bf00      	nop
 8006134:	2000001c 	.word	0x2000001c
 8006138:	0800686c 	.word	0x0800686c
 800613c:	08006879 	.word	0x08006879
 8006140:	080068a7 	.word	0x080068a7

08006144 <_calloc_r>:
 8006144:	b570      	push	{r4, r5, r6, lr}
 8006146:	fba1 5402 	umull	r5, r4, r1, r2
 800614a:	b934      	cbnz	r4, 800615a <_calloc_r+0x16>
 800614c:	4629      	mov	r1, r5
 800614e:	f7ff fb0b 	bl	8005768 <_malloc_r>
 8006152:	4606      	mov	r6, r0
 8006154:	b928      	cbnz	r0, 8006162 <_calloc_r+0x1e>
 8006156:	4630      	mov	r0, r6
 8006158:	bd70      	pop	{r4, r5, r6, pc}
 800615a:	220c      	movs	r2, #12
 800615c:	6002      	str	r2, [r0, #0]
 800615e:	2600      	movs	r6, #0
 8006160:	e7f9      	b.n	8006156 <_calloc_r+0x12>
 8006162:	462a      	mov	r2, r5
 8006164:	4621      	mov	r1, r4
 8006166:	f7fe fbb0 	bl	80048ca <memset>
 800616a:	e7f4      	b.n	8006156 <_calloc_r+0x12>

0800616c <__ascii_mbtowc>:
 800616c:	b082      	sub	sp, #8
 800616e:	b901      	cbnz	r1, 8006172 <__ascii_mbtowc+0x6>
 8006170:	a901      	add	r1, sp, #4
 8006172:	b142      	cbz	r2, 8006186 <__ascii_mbtowc+0x1a>
 8006174:	b14b      	cbz	r3, 800618a <__ascii_mbtowc+0x1e>
 8006176:	7813      	ldrb	r3, [r2, #0]
 8006178:	600b      	str	r3, [r1, #0]
 800617a:	7812      	ldrb	r2, [r2, #0]
 800617c:	1e10      	subs	r0, r2, #0
 800617e:	bf18      	it	ne
 8006180:	2001      	movne	r0, #1
 8006182:	b002      	add	sp, #8
 8006184:	4770      	bx	lr
 8006186:	4610      	mov	r0, r2
 8006188:	e7fb      	b.n	8006182 <__ascii_mbtowc+0x16>
 800618a:	f06f 0001 	mvn.w	r0, #1
 800618e:	e7f8      	b.n	8006182 <__ascii_mbtowc+0x16>

08006190 <__ascii_wctomb>:
 8006190:	4603      	mov	r3, r0
 8006192:	4608      	mov	r0, r1
 8006194:	b141      	cbz	r1, 80061a8 <__ascii_wctomb+0x18>
 8006196:	2aff      	cmp	r2, #255	@ 0xff
 8006198:	d904      	bls.n	80061a4 <__ascii_wctomb+0x14>
 800619a:	228a      	movs	r2, #138	@ 0x8a
 800619c:	601a      	str	r2, [r3, #0]
 800619e:	f04f 30ff 	mov.w	r0, #4294967295
 80061a2:	4770      	bx	lr
 80061a4:	700a      	strb	r2, [r1, #0]
 80061a6:	2001      	movs	r0, #1
 80061a8:	4770      	bx	lr
	...

080061ac <fiprintf>:
 80061ac:	b40e      	push	{r1, r2, r3}
 80061ae:	b503      	push	{r0, r1, lr}
 80061b0:	4601      	mov	r1, r0
 80061b2:	ab03      	add	r3, sp, #12
 80061b4:	4805      	ldr	r0, [pc, #20]	@ (80061cc <fiprintf+0x20>)
 80061b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80061ba:	6800      	ldr	r0, [r0, #0]
 80061bc:	9301      	str	r3, [sp, #4]
 80061be:	f000 f837 	bl	8006230 <_vfiprintf_r>
 80061c2:	b002      	add	sp, #8
 80061c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80061c8:	b003      	add	sp, #12
 80061ca:	4770      	bx	lr
 80061cc:	2000001c 	.word	0x2000001c

080061d0 <abort>:
 80061d0:	b508      	push	{r3, lr}
 80061d2:	2006      	movs	r0, #6
 80061d4:	f000 fa00 	bl	80065d8 <raise>
 80061d8:	2001      	movs	r0, #1
 80061da:	f7fb fa19 	bl	8001610 <_exit>

080061de <__sfputc_r>:
 80061de:	6893      	ldr	r3, [r2, #8]
 80061e0:	3b01      	subs	r3, #1
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	b410      	push	{r4}
 80061e6:	6093      	str	r3, [r2, #8]
 80061e8:	da08      	bge.n	80061fc <__sfputc_r+0x1e>
 80061ea:	6994      	ldr	r4, [r2, #24]
 80061ec:	42a3      	cmp	r3, r4
 80061ee:	db01      	blt.n	80061f4 <__sfputc_r+0x16>
 80061f0:	290a      	cmp	r1, #10
 80061f2:	d103      	bne.n	80061fc <__sfputc_r+0x1e>
 80061f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061f8:	f000 b932 	b.w	8006460 <__swbuf_r>
 80061fc:	6813      	ldr	r3, [r2, #0]
 80061fe:	1c58      	adds	r0, r3, #1
 8006200:	6010      	str	r0, [r2, #0]
 8006202:	7019      	strb	r1, [r3, #0]
 8006204:	4608      	mov	r0, r1
 8006206:	f85d 4b04 	ldr.w	r4, [sp], #4
 800620a:	4770      	bx	lr

0800620c <__sfputs_r>:
 800620c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800620e:	4606      	mov	r6, r0
 8006210:	460f      	mov	r7, r1
 8006212:	4614      	mov	r4, r2
 8006214:	18d5      	adds	r5, r2, r3
 8006216:	42ac      	cmp	r4, r5
 8006218:	d101      	bne.n	800621e <__sfputs_r+0x12>
 800621a:	2000      	movs	r0, #0
 800621c:	e007      	b.n	800622e <__sfputs_r+0x22>
 800621e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006222:	463a      	mov	r2, r7
 8006224:	4630      	mov	r0, r6
 8006226:	f7ff ffda 	bl	80061de <__sfputc_r>
 800622a:	1c43      	adds	r3, r0, #1
 800622c:	d1f3      	bne.n	8006216 <__sfputs_r+0xa>
 800622e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006230 <_vfiprintf_r>:
 8006230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006234:	460d      	mov	r5, r1
 8006236:	b09d      	sub	sp, #116	@ 0x74
 8006238:	4614      	mov	r4, r2
 800623a:	4698      	mov	r8, r3
 800623c:	4606      	mov	r6, r0
 800623e:	b118      	cbz	r0, 8006248 <_vfiprintf_r+0x18>
 8006240:	6a03      	ldr	r3, [r0, #32]
 8006242:	b90b      	cbnz	r3, 8006248 <_vfiprintf_r+0x18>
 8006244:	f7fe fac8 	bl	80047d8 <__sinit>
 8006248:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800624a:	07d9      	lsls	r1, r3, #31
 800624c:	d405      	bmi.n	800625a <_vfiprintf_r+0x2a>
 800624e:	89ab      	ldrh	r3, [r5, #12]
 8006250:	059a      	lsls	r2, r3, #22
 8006252:	d402      	bmi.n	800625a <_vfiprintf_r+0x2a>
 8006254:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006256:	f7fe fbb6 	bl	80049c6 <__retarget_lock_acquire_recursive>
 800625a:	89ab      	ldrh	r3, [r5, #12]
 800625c:	071b      	lsls	r3, r3, #28
 800625e:	d501      	bpl.n	8006264 <_vfiprintf_r+0x34>
 8006260:	692b      	ldr	r3, [r5, #16]
 8006262:	b99b      	cbnz	r3, 800628c <_vfiprintf_r+0x5c>
 8006264:	4629      	mov	r1, r5
 8006266:	4630      	mov	r0, r6
 8006268:	f000 f938 	bl	80064dc <__swsetup_r>
 800626c:	b170      	cbz	r0, 800628c <_vfiprintf_r+0x5c>
 800626e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006270:	07dc      	lsls	r4, r3, #31
 8006272:	d504      	bpl.n	800627e <_vfiprintf_r+0x4e>
 8006274:	f04f 30ff 	mov.w	r0, #4294967295
 8006278:	b01d      	add	sp, #116	@ 0x74
 800627a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800627e:	89ab      	ldrh	r3, [r5, #12]
 8006280:	0598      	lsls	r0, r3, #22
 8006282:	d4f7      	bmi.n	8006274 <_vfiprintf_r+0x44>
 8006284:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006286:	f7fe fb9f 	bl	80049c8 <__retarget_lock_release_recursive>
 800628a:	e7f3      	b.n	8006274 <_vfiprintf_r+0x44>
 800628c:	2300      	movs	r3, #0
 800628e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006290:	2320      	movs	r3, #32
 8006292:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006296:	f8cd 800c 	str.w	r8, [sp, #12]
 800629a:	2330      	movs	r3, #48	@ 0x30
 800629c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800644c <_vfiprintf_r+0x21c>
 80062a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80062a4:	f04f 0901 	mov.w	r9, #1
 80062a8:	4623      	mov	r3, r4
 80062aa:	469a      	mov	sl, r3
 80062ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062b0:	b10a      	cbz	r2, 80062b6 <_vfiprintf_r+0x86>
 80062b2:	2a25      	cmp	r2, #37	@ 0x25
 80062b4:	d1f9      	bne.n	80062aa <_vfiprintf_r+0x7a>
 80062b6:	ebba 0b04 	subs.w	fp, sl, r4
 80062ba:	d00b      	beq.n	80062d4 <_vfiprintf_r+0xa4>
 80062bc:	465b      	mov	r3, fp
 80062be:	4622      	mov	r2, r4
 80062c0:	4629      	mov	r1, r5
 80062c2:	4630      	mov	r0, r6
 80062c4:	f7ff ffa2 	bl	800620c <__sfputs_r>
 80062c8:	3001      	adds	r0, #1
 80062ca:	f000 80a7 	beq.w	800641c <_vfiprintf_r+0x1ec>
 80062ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062d0:	445a      	add	r2, fp
 80062d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80062d4:	f89a 3000 	ldrb.w	r3, [sl]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f000 809f 	beq.w	800641c <_vfiprintf_r+0x1ec>
 80062de:	2300      	movs	r3, #0
 80062e0:	f04f 32ff 	mov.w	r2, #4294967295
 80062e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062e8:	f10a 0a01 	add.w	sl, sl, #1
 80062ec:	9304      	str	r3, [sp, #16]
 80062ee:	9307      	str	r3, [sp, #28]
 80062f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80062f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80062f6:	4654      	mov	r4, sl
 80062f8:	2205      	movs	r2, #5
 80062fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062fe:	4853      	ldr	r0, [pc, #332]	@ (800644c <_vfiprintf_r+0x21c>)
 8006300:	f7f9 ff86 	bl	8000210 <memchr>
 8006304:	9a04      	ldr	r2, [sp, #16]
 8006306:	b9d8      	cbnz	r0, 8006340 <_vfiprintf_r+0x110>
 8006308:	06d1      	lsls	r1, r2, #27
 800630a:	bf44      	itt	mi
 800630c:	2320      	movmi	r3, #32
 800630e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006312:	0713      	lsls	r3, r2, #28
 8006314:	bf44      	itt	mi
 8006316:	232b      	movmi	r3, #43	@ 0x2b
 8006318:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800631c:	f89a 3000 	ldrb.w	r3, [sl]
 8006320:	2b2a      	cmp	r3, #42	@ 0x2a
 8006322:	d015      	beq.n	8006350 <_vfiprintf_r+0x120>
 8006324:	9a07      	ldr	r2, [sp, #28]
 8006326:	4654      	mov	r4, sl
 8006328:	2000      	movs	r0, #0
 800632a:	f04f 0c0a 	mov.w	ip, #10
 800632e:	4621      	mov	r1, r4
 8006330:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006334:	3b30      	subs	r3, #48	@ 0x30
 8006336:	2b09      	cmp	r3, #9
 8006338:	d94b      	bls.n	80063d2 <_vfiprintf_r+0x1a2>
 800633a:	b1b0      	cbz	r0, 800636a <_vfiprintf_r+0x13a>
 800633c:	9207      	str	r2, [sp, #28]
 800633e:	e014      	b.n	800636a <_vfiprintf_r+0x13a>
 8006340:	eba0 0308 	sub.w	r3, r0, r8
 8006344:	fa09 f303 	lsl.w	r3, r9, r3
 8006348:	4313      	orrs	r3, r2
 800634a:	9304      	str	r3, [sp, #16]
 800634c:	46a2      	mov	sl, r4
 800634e:	e7d2      	b.n	80062f6 <_vfiprintf_r+0xc6>
 8006350:	9b03      	ldr	r3, [sp, #12]
 8006352:	1d19      	adds	r1, r3, #4
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	9103      	str	r1, [sp, #12]
 8006358:	2b00      	cmp	r3, #0
 800635a:	bfbb      	ittet	lt
 800635c:	425b      	neglt	r3, r3
 800635e:	f042 0202 	orrlt.w	r2, r2, #2
 8006362:	9307      	strge	r3, [sp, #28]
 8006364:	9307      	strlt	r3, [sp, #28]
 8006366:	bfb8      	it	lt
 8006368:	9204      	strlt	r2, [sp, #16]
 800636a:	7823      	ldrb	r3, [r4, #0]
 800636c:	2b2e      	cmp	r3, #46	@ 0x2e
 800636e:	d10a      	bne.n	8006386 <_vfiprintf_r+0x156>
 8006370:	7863      	ldrb	r3, [r4, #1]
 8006372:	2b2a      	cmp	r3, #42	@ 0x2a
 8006374:	d132      	bne.n	80063dc <_vfiprintf_r+0x1ac>
 8006376:	9b03      	ldr	r3, [sp, #12]
 8006378:	1d1a      	adds	r2, r3, #4
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	9203      	str	r2, [sp, #12]
 800637e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006382:	3402      	adds	r4, #2
 8006384:	9305      	str	r3, [sp, #20]
 8006386:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800645c <_vfiprintf_r+0x22c>
 800638a:	7821      	ldrb	r1, [r4, #0]
 800638c:	2203      	movs	r2, #3
 800638e:	4650      	mov	r0, sl
 8006390:	f7f9 ff3e 	bl	8000210 <memchr>
 8006394:	b138      	cbz	r0, 80063a6 <_vfiprintf_r+0x176>
 8006396:	9b04      	ldr	r3, [sp, #16]
 8006398:	eba0 000a 	sub.w	r0, r0, sl
 800639c:	2240      	movs	r2, #64	@ 0x40
 800639e:	4082      	lsls	r2, r0
 80063a0:	4313      	orrs	r3, r2
 80063a2:	3401      	adds	r4, #1
 80063a4:	9304      	str	r3, [sp, #16]
 80063a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063aa:	4829      	ldr	r0, [pc, #164]	@ (8006450 <_vfiprintf_r+0x220>)
 80063ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80063b0:	2206      	movs	r2, #6
 80063b2:	f7f9 ff2d 	bl	8000210 <memchr>
 80063b6:	2800      	cmp	r0, #0
 80063b8:	d03f      	beq.n	800643a <_vfiprintf_r+0x20a>
 80063ba:	4b26      	ldr	r3, [pc, #152]	@ (8006454 <_vfiprintf_r+0x224>)
 80063bc:	bb1b      	cbnz	r3, 8006406 <_vfiprintf_r+0x1d6>
 80063be:	9b03      	ldr	r3, [sp, #12]
 80063c0:	3307      	adds	r3, #7
 80063c2:	f023 0307 	bic.w	r3, r3, #7
 80063c6:	3308      	adds	r3, #8
 80063c8:	9303      	str	r3, [sp, #12]
 80063ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063cc:	443b      	add	r3, r7
 80063ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80063d0:	e76a      	b.n	80062a8 <_vfiprintf_r+0x78>
 80063d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80063d6:	460c      	mov	r4, r1
 80063d8:	2001      	movs	r0, #1
 80063da:	e7a8      	b.n	800632e <_vfiprintf_r+0xfe>
 80063dc:	2300      	movs	r3, #0
 80063de:	3401      	adds	r4, #1
 80063e0:	9305      	str	r3, [sp, #20]
 80063e2:	4619      	mov	r1, r3
 80063e4:	f04f 0c0a 	mov.w	ip, #10
 80063e8:	4620      	mov	r0, r4
 80063ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063ee:	3a30      	subs	r2, #48	@ 0x30
 80063f0:	2a09      	cmp	r2, #9
 80063f2:	d903      	bls.n	80063fc <_vfiprintf_r+0x1cc>
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d0c6      	beq.n	8006386 <_vfiprintf_r+0x156>
 80063f8:	9105      	str	r1, [sp, #20]
 80063fa:	e7c4      	b.n	8006386 <_vfiprintf_r+0x156>
 80063fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006400:	4604      	mov	r4, r0
 8006402:	2301      	movs	r3, #1
 8006404:	e7f0      	b.n	80063e8 <_vfiprintf_r+0x1b8>
 8006406:	ab03      	add	r3, sp, #12
 8006408:	9300      	str	r3, [sp, #0]
 800640a:	462a      	mov	r2, r5
 800640c:	4b12      	ldr	r3, [pc, #72]	@ (8006458 <_vfiprintf_r+0x228>)
 800640e:	a904      	add	r1, sp, #16
 8006410:	4630      	mov	r0, r6
 8006412:	f7fd fd9f 	bl	8003f54 <_printf_float>
 8006416:	4607      	mov	r7, r0
 8006418:	1c78      	adds	r0, r7, #1
 800641a:	d1d6      	bne.n	80063ca <_vfiprintf_r+0x19a>
 800641c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800641e:	07d9      	lsls	r1, r3, #31
 8006420:	d405      	bmi.n	800642e <_vfiprintf_r+0x1fe>
 8006422:	89ab      	ldrh	r3, [r5, #12]
 8006424:	059a      	lsls	r2, r3, #22
 8006426:	d402      	bmi.n	800642e <_vfiprintf_r+0x1fe>
 8006428:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800642a:	f7fe facd 	bl	80049c8 <__retarget_lock_release_recursive>
 800642e:	89ab      	ldrh	r3, [r5, #12]
 8006430:	065b      	lsls	r3, r3, #25
 8006432:	f53f af1f 	bmi.w	8006274 <_vfiprintf_r+0x44>
 8006436:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006438:	e71e      	b.n	8006278 <_vfiprintf_r+0x48>
 800643a:	ab03      	add	r3, sp, #12
 800643c:	9300      	str	r3, [sp, #0]
 800643e:	462a      	mov	r2, r5
 8006440:	4b05      	ldr	r3, [pc, #20]	@ (8006458 <_vfiprintf_r+0x228>)
 8006442:	a904      	add	r1, sp, #16
 8006444:	4630      	mov	r0, r6
 8006446:	f7fe f81d 	bl	8004484 <_printf_i>
 800644a:	e7e4      	b.n	8006416 <_vfiprintf_r+0x1e6>
 800644c:	080068a8 	.word	0x080068a8
 8006450:	080068b2 	.word	0x080068b2
 8006454:	08003f55 	.word	0x08003f55
 8006458:	0800620d 	.word	0x0800620d
 800645c:	080068ae 	.word	0x080068ae

08006460 <__swbuf_r>:
 8006460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006462:	460e      	mov	r6, r1
 8006464:	4614      	mov	r4, r2
 8006466:	4605      	mov	r5, r0
 8006468:	b118      	cbz	r0, 8006472 <__swbuf_r+0x12>
 800646a:	6a03      	ldr	r3, [r0, #32]
 800646c:	b90b      	cbnz	r3, 8006472 <__swbuf_r+0x12>
 800646e:	f7fe f9b3 	bl	80047d8 <__sinit>
 8006472:	69a3      	ldr	r3, [r4, #24]
 8006474:	60a3      	str	r3, [r4, #8]
 8006476:	89a3      	ldrh	r3, [r4, #12]
 8006478:	071a      	lsls	r2, r3, #28
 800647a:	d501      	bpl.n	8006480 <__swbuf_r+0x20>
 800647c:	6923      	ldr	r3, [r4, #16]
 800647e:	b943      	cbnz	r3, 8006492 <__swbuf_r+0x32>
 8006480:	4621      	mov	r1, r4
 8006482:	4628      	mov	r0, r5
 8006484:	f000 f82a 	bl	80064dc <__swsetup_r>
 8006488:	b118      	cbz	r0, 8006492 <__swbuf_r+0x32>
 800648a:	f04f 37ff 	mov.w	r7, #4294967295
 800648e:	4638      	mov	r0, r7
 8006490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006492:	6823      	ldr	r3, [r4, #0]
 8006494:	6922      	ldr	r2, [r4, #16]
 8006496:	1a98      	subs	r0, r3, r2
 8006498:	6963      	ldr	r3, [r4, #20]
 800649a:	b2f6      	uxtb	r6, r6
 800649c:	4283      	cmp	r3, r0
 800649e:	4637      	mov	r7, r6
 80064a0:	dc05      	bgt.n	80064ae <__swbuf_r+0x4e>
 80064a2:	4621      	mov	r1, r4
 80064a4:	4628      	mov	r0, r5
 80064a6:	f7ff fde9 	bl	800607c <_fflush_r>
 80064aa:	2800      	cmp	r0, #0
 80064ac:	d1ed      	bne.n	800648a <__swbuf_r+0x2a>
 80064ae:	68a3      	ldr	r3, [r4, #8]
 80064b0:	3b01      	subs	r3, #1
 80064b2:	60a3      	str	r3, [r4, #8]
 80064b4:	6823      	ldr	r3, [r4, #0]
 80064b6:	1c5a      	adds	r2, r3, #1
 80064b8:	6022      	str	r2, [r4, #0]
 80064ba:	701e      	strb	r6, [r3, #0]
 80064bc:	6962      	ldr	r2, [r4, #20]
 80064be:	1c43      	adds	r3, r0, #1
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d004      	beq.n	80064ce <__swbuf_r+0x6e>
 80064c4:	89a3      	ldrh	r3, [r4, #12]
 80064c6:	07db      	lsls	r3, r3, #31
 80064c8:	d5e1      	bpl.n	800648e <__swbuf_r+0x2e>
 80064ca:	2e0a      	cmp	r6, #10
 80064cc:	d1df      	bne.n	800648e <__swbuf_r+0x2e>
 80064ce:	4621      	mov	r1, r4
 80064d0:	4628      	mov	r0, r5
 80064d2:	f7ff fdd3 	bl	800607c <_fflush_r>
 80064d6:	2800      	cmp	r0, #0
 80064d8:	d0d9      	beq.n	800648e <__swbuf_r+0x2e>
 80064da:	e7d6      	b.n	800648a <__swbuf_r+0x2a>

080064dc <__swsetup_r>:
 80064dc:	b538      	push	{r3, r4, r5, lr}
 80064de:	4b29      	ldr	r3, [pc, #164]	@ (8006584 <__swsetup_r+0xa8>)
 80064e0:	4605      	mov	r5, r0
 80064e2:	6818      	ldr	r0, [r3, #0]
 80064e4:	460c      	mov	r4, r1
 80064e6:	b118      	cbz	r0, 80064f0 <__swsetup_r+0x14>
 80064e8:	6a03      	ldr	r3, [r0, #32]
 80064ea:	b90b      	cbnz	r3, 80064f0 <__swsetup_r+0x14>
 80064ec:	f7fe f974 	bl	80047d8 <__sinit>
 80064f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064f4:	0719      	lsls	r1, r3, #28
 80064f6:	d422      	bmi.n	800653e <__swsetup_r+0x62>
 80064f8:	06da      	lsls	r2, r3, #27
 80064fa:	d407      	bmi.n	800650c <__swsetup_r+0x30>
 80064fc:	2209      	movs	r2, #9
 80064fe:	602a      	str	r2, [r5, #0]
 8006500:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006504:	81a3      	strh	r3, [r4, #12]
 8006506:	f04f 30ff 	mov.w	r0, #4294967295
 800650a:	e033      	b.n	8006574 <__swsetup_r+0x98>
 800650c:	0758      	lsls	r0, r3, #29
 800650e:	d512      	bpl.n	8006536 <__swsetup_r+0x5a>
 8006510:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006512:	b141      	cbz	r1, 8006526 <__swsetup_r+0x4a>
 8006514:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006518:	4299      	cmp	r1, r3
 800651a:	d002      	beq.n	8006522 <__swsetup_r+0x46>
 800651c:	4628      	mov	r0, r5
 800651e:	f7ff f8af 	bl	8005680 <_free_r>
 8006522:	2300      	movs	r3, #0
 8006524:	6363      	str	r3, [r4, #52]	@ 0x34
 8006526:	89a3      	ldrh	r3, [r4, #12]
 8006528:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800652c:	81a3      	strh	r3, [r4, #12]
 800652e:	2300      	movs	r3, #0
 8006530:	6063      	str	r3, [r4, #4]
 8006532:	6923      	ldr	r3, [r4, #16]
 8006534:	6023      	str	r3, [r4, #0]
 8006536:	89a3      	ldrh	r3, [r4, #12]
 8006538:	f043 0308 	orr.w	r3, r3, #8
 800653c:	81a3      	strh	r3, [r4, #12]
 800653e:	6923      	ldr	r3, [r4, #16]
 8006540:	b94b      	cbnz	r3, 8006556 <__swsetup_r+0x7a>
 8006542:	89a3      	ldrh	r3, [r4, #12]
 8006544:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006548:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800654c:	d003      	beq.n	8006556 <__swsetup_r+0x7a>
 800654e:	4621      	mov	r1, r4
 8006550:	4628      	mov	r0, r5
 8006552:	f000 f883 	bl	800665c <__smakebuf_r>
 8006556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800655a:	f013 0201 	ands.w	r2, r3, #1
 800655e:	d00a      	beq.n	8006576 <__swsetup_r+0x9a>
 8006560:	2200      	movs	r2, #0
 8006562:	60a2      	str	r2, [r4, #8]
 8006564:	6962      	ldr	r2, [r4, #20]
 8006566:	4252      	negs	r2, r2
 8006568:	61a2      	str	r2, [r4, #24]
 800656a:	6922      	ldr	r2, [r4, #16]
 800656c:	b942      	cbnz	r2, 8006580 <__swsetup_r+0xa4>
 800656e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006572:	d1c5      	bne.n	8006500 <__swsetup_r+0x24>
 8006574:	bd38      	pop	{r3, r4, r5, pc}
 8006576:	0799      	lsls	r1, r3, #30
 8006578:	bf58      	it	pl
 800657a:	6962      	ldrpl	r2, [r4, #20]
 800657c:	60a2      	str	r2, [r4, #8]
 800657e:	e7f4      	b.n	800656a <__swsetup_r+0x8e>
 8006580:	2000      	movs	r0, #0
 8006582:	e7f7      	b.n	8006574 <__swsetup_r+0x98>
 8006584:	2000001c 	.word	0x2000001c

08006588 <_raise_r>:
 8006588:	291f      	cmp	r1, #31
 800658a:	b538      	push	{r3, r4, r5, lr}
 800658c:	4605      	mov	r5, r0
 800658e:	460c      	mov	r4, r1
 8006590:	d904      	bls.n	800659c <_raise_r+0x14>
 8006592:	2316      	movs	r3, #22
 8006594:	6003      	str	r3, [r0, #0]
 8006596:	f04f 30ff 	mov.w	r0, #4294967295
 800659a:	bd38      	pop	{r3, r4, r5, pc}
 800659c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800659e:	b112      	cbz	r2, 80065a6 <_raise_r+0x1e>
 80065a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80065a4:	b94b      	cbnz	r3, 80065ba <_raise_r+0x32>
 80065a6:	4628      	mov	r0, r5
 80065a8:	f000 f830 	bl	800660c <_getpid_r>
 80065ac:	4622      	mov	r2, r4
 80065ae:	4601      	mov	r1, r0
 80065b0:	4628      	mov	r0, r5
 80065b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065b6:	f000 b817 	b.w	80065e8 <_kill_r>
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d00a      	beq.n	80065d4 <_raise_r+0x4c>
 80065be:	1c59      	adds	r1, r3, #1
 80065c0:	d103      	bne.n	80065ca <_raise_r+0x42>
 80065c2:	2316      	movs	r3, #22
 80065c4:	6003      	str	r3, [r0, #0]
 80065c6:	2001      	movs	r0, #1
 80065c8:	e7e7      	b.n	800659a <_raise_r+0x12>
 80065ca:	2100      	movs	r1, #0
 80065cc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80065d0:	4620      	mov	r0, r4
 80065d2:	4798      	blx	r3
 80065d4:	2000      	movs	r0, #0
 80065d6:	e7e0      	b.n	800659a <_raise_r+0x12>

080065d8 <raise>:
 80065d8:	4b02      	ldr	r3, [pc, #8]	@ (80065e4 <raise+0xc>)
 80065da:	4601      	mov	r1, r0
 80065dc:	6818      	ldr	r0, [r3, #0]
 80065de:	f7ff bfd3 	b.w	8006588 <_raise_r>
 80065e2:	bf00      	nop
 80065e4:	2000001c 	.word	0x2000001c

080065e8 <_kill_r>:
 80065e8:	b538      	push	{r3, r4, r5, lr}
 80065ea:	4d07      	ldr	r5, [pc, #28]	@ (8006608 <_kill_r+0x20>)
 80065ec:	2300      	movs	r3, #0
 80065ee:	4604      	mov	r4, r0
 80065f0:	4608      	mov	r0, r1
 80065f2:	4611      	mov	r1, r2
 80065f4:	602b      	str	r3, [r5, #0]
 80065f6:	f7fa fffb 	bl	80015f0 <_kill>
 80065fa:	1c43      	adds	r3, r0, #1
 80065fc:	d102      	bne.n	8006604 <_kill_r+0x1c>
 80065fe:	682b      	ldr	r3, [r5, #0]
 8006600:	b103      	cbz	r3, 8006604 <_kill_r+0x1c>
 8006602:	6023      	str	r3, [r4, #0]
 8006604:	bd38      	pop	{r3, r4, r5, pc}
 8006606:	bf00      	nop
 8006608:	200003dc 	.word	0x200003dc

0800660c <_getpid_r>:
 800660c:	f7fa bfe8 	b.w	80015e0 <_getpid>

08006610 <__swhatbuf_r>:
 8006610:	b570      	push	{r4, r5, r6, lr}
 8006612:	460c      	mov	r4, r1
 8006614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006618:	2900      	cmp	r1, #0
 800661a:	b096      	sub	sp, #88	@ 0x58
 800661c:	4615      	mov	r5, r2
 800661e:	461e      	mov	r6, r3
 8006620:	da0d      	bge.n	800663e <__swhatbuf_r+0x2e>
 8006622:	89a3      	ldrh	r3, [r4, #12]
 8006624:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006628:	f04f 0100 	mov.w	r1, #0
 800662c:	bf14      	ite	ne
 800662e:	2340      	movne	r3, #64	@ 0x40
 8006630:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006634:	2000      	movs	r0, #0
 8006636:	6031      	str	r1, [r6, #0]
 8006638:	602b      	str	r3, [r5, #0]
 800663a:	b016      	add	sp, #88	@ 0x58
 800663c:	bd70      	pop	{r4, r5, r6, pc}
 800663e:	466a      	mov	r2, sp
 8006640:	f000 f848 	bl	80066d4 <_fstat_r>
 8006644:	2800      	cmp	r0, #0
 8006646:	dbec      	blt.n	8006622 <__swhatbuf_r+0x12>
 8006648:	9901      	ldr	r1, [sp, #4]
 800664a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800664e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006652:	4259      	negs	r1, r3
 8006654:	4159      	adcs	r1, r3
 8006656:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800665a:	e7eb      	b.n	8006634 <__swhatbuf_r+0x24>

0800665c <__smakebuf_r>:
 800665c:	898b      	ldrh	r3, [r1, #12]
 800665e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006660:	079d      	lsls	r5, r3, #30
 8006662:	4606      	mov	r6, r0
 8006664:	460c      	mov	r4, r1
 8006666:	d507      	bpl.n	8006678 <__smakebuf_r+0x1c>
 8006668:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800666c:	6023      	str	r3, [r4, #0]
 800666e:	6123      	str	r3, [r4, #16]
 8006670:	2301      	movs	r3, #1
 8006672:	6163      	str	r3, [r4, #20]
 8006674:	b003      	add	sp, #12
 8006676:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006678:	ab01      	add	r3, sp, #4
 800667a:	466a      	mov	r2, sp
 800667c:	f7ff ffc8 	bl	8006610 <__swhatbuf_r>
 8006680:	9f00      	ldr	r7, [sp, #0]
 8006682:	4605      	mov	r5, r0
 8006684:	4639      	mov	r1, r7
 8006686:	4630      	mov	r0, r6
 8006688:	f7ff f86e 	bl	8005768 <_malloc_r>
 800668c:	b948      	cbnz	r0, 80066a2 <__smakebuf_r+0x46>
 800668e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006692:	059a      	lsls	r2, r3, #22
 8006694:	d4ee      	bmi.n	8006674 <__smakebuf_r+0x18>
 8006696:	f023 0303 	bic.w	r3, r3, #3
 800669a:	f043 0302 	orr.w	r3, r3, #2
 800669e:	81a3      	strh	r3, [r4, #12]
 80066a0:	e7e2      	b.n	8006668 <__smakebuf_r+0xc>
 80066a2:	89a3      	ldrh	r3, [r4, #12]
 80066a4:	6020      	str	r0, [r4, #0]
 80066a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066aa:	81a3      	strh	r3, [r4, #12]
 80066ac:	9b01      	ldr	r3, [sp, #4]
 80066ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80066b2:	b15b      	cbz	r3, 80066cc <__smakebuf_r+0x70>
 80066b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066b8:	4630      	mov	r0, r6
 80066ba:	f000 f81d 	bl	80066f8 <_isatty_r>
 80066be:	b128      	cbz	r0, 80066cc <__smakebuf_r+0x70>
 80066c0:	89a3      	ldrh	r3, [r4, #12]
 80066c2:	f023 0303 	bic.w	r3, r3, #3
 80066c6:	f043 0301 	orr.w	r3, r3, #1
 80066ca:	81a3      	strh	r3, [r4, #12]
 80066cc:	89a3      	ldrh	r3, [r4, #12]
 80066ce:	431d      	orrs	r5, r3
 80066d0:	81a5      	strh	r5, [r4, #12]
 80066d2:	e7cf      	b.n	8006674 <__smakebuf_r+0x18>

080066d4 <_fstat_r>:
 80066d4:	b538      	push	{r3, r4, r5, lr}
 80066d6:	4d07      	ldr	r5, [pc, #28]	@ (80066f4 <_fstat_r+0x20>)
 80066d8:	2300      	movs	r3, #0
 80066da:	4604      	mov	r4, r0
 80066dc:	4608      	mov	r0, r1
 80066de:	4611      	mov	r1, r2
 80066e0:	602b      	str	r3, [r5, #0]
 80066e2:	f7fa ffe5 	bl	80016b0 <_fstat>
 80066e6:	1c43      	adds	r3, r0, #1
 80066e8:	d102      	bne.n	80066f0 <_fstat_r+0x1c>
 80066ea:	682b      	ldr	r3, [r5, #0]
 80066ec:	b103      	cbz	r3, 80066f0 <_fstat_r+0x1c>
 80066ee:	6023      	str	r3, [r4, #0]
 80066f0:	bd38      	pop	{r3, r4, r5, pc}
 80066f2:	bf00      	nop
 80066f4:	200003dc 	.word	0x200003dc

080066f8 <_isatty_r>:
 80066f8:	b538      	push	{r3, r4, r5, lr}
 80066fa:	4d06      	ldr	r5, [pc, #24]	@ (8006714 <_isatty_r+0x1c>)
 80066fc:	2300      	movs	r3, #0
 80066fe:	4604      	mov	r4, r0
 8006700:	4608      	mov	r0, r1
 8006702:	602b      	str	r3, [r5, #0]
 8006704:	f7fa ffe4 	bl	80016d0 <_isatty>
 8006708:	1c43      	adds	r3, r0, #1
 800670a:	d102      	bne.n	8006712 <_isatty_r+0x1a>
 800670c:	682b      	ldr	r3, [r5, #0]
 800670e:	b103      	cbz	r3, 8006712 <_isatty_r+0x1a>
 8006710:	6023      	str	r3, [r4, #0]
 8006712:	bd38      	pop	{r3, r4, r5, pc}
 8006714:	200003dc 	.word	0x200003dc

08006718 <_init>:
 8006718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800671a:	bf00      	nop
 800671c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800671e:	bc08      	pop	{r3}
 8006720:	469e      	mov	lr, r3
 8006722:	4770      	bx	lr

08006724 <_fini>:
 8006724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006726:	bf00      	nop
 8006728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800672a:	bc08      	pop	{r3}
 800672c:	469e      	mov	lr, r3
 800672e:	4770      	bx	lr
